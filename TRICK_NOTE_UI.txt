TRICK NOTE UI
-------------
Ngày cập nhật: 06/06/2024
-------------------------

I. Giao diện: FE, html, css
 *position:
	- absolute: cho kích thước cố định px để khi responsive ko bị dịch (phần tử con)
	- relative: thay đổi theo trình duyệt, responsive (phần tử cha)
 *lớp giả: sau CSS để dấu 2 chấm
	- :hover: di chuột vào thay đổi màu nền chẳng hạn					-> SỬA PORTAL
	- :active: bấm giữ hoặc kích hoạt (thử sửa lại active vào 1 nút hay div gì đó)		-> SỬA PORTAL
 *object-fit: thêm điều kiện này vào tất cả các chỗ có fill ra ảnh
	- contain: giữ nguyên tỷ lệ khung hình sao cho phù hợp nhất (nhỏ bằng ảnh)
	- cover: lấp đầy và cắt bớt (kiểu zoom) 

 *quy tắc chia layout:
	- từ trên xuống dưới; ngoài vào trong.
---------------------------
- check lại toàn bộ thư mục của TO_PORTAL
---------------------------
*TRICK NOTE GITLAB
- ví dụ đang ở nhánh fixBug3
	- git status: kiểm tra xem các cập nhật mới
	- git add [files]: theo status
	- git commit -m'date chẳng hạn'
	- git push (push thường ko thêm origin gì cả)
	- git fetch origin/develop -> lấy nhánh này từ xa mà chưa cần hợp nhất ngay
	- git merge origin/develop -> hợp nhất cac thay đổi từ develop vào nhánh hiện tại -> xung đột -> giải quyết
	- git push (push lại là vì vừa hợp nhất code nên cần push lại) -> đẩy lại các thay đổi khi hợp nhất
	! xong xuôi thì tiếp tục tạo nhánh mới làm tiếp!
	- git checkout develop 
	- git pull origin develop
	- git checkout -b 'newName'
	(develop ở đây là nhánh main)
	! luôn git pull trước khi làm trên nhánh mới
---------------------------
*KẾT NỐI API
- khi kết nối API truyền payload truyền đủ các thông số thì nó mới đổ ra dữ liệu
---------------------------
- người dùng thực hiện hành động trên giao diện
- component phát ra action: chỗ nào có Action
- Saga lắng nghe action và gọi API: fetch
- Reducer cập nhật lại state
- component sử dụng useSelector lấy dữ liệu tử ReduxStore
---------------------------
Luồng code chạy của Redux Saga
------------------------------
b1: ngay từ ban đầu coder tạo ra useEffect thực hiện debounce (action)
b2: tiếp theo debounce gọi đến fetchData trong Reducer
b3: nó lắng nghe được fetchData này làm thay đổi trạng thái (false -> true) ngay từ đầu để có nghĩa là API này được sau 400ms
b4: tiếp tục bên Saga nó lắng nghe cái fetchData này và xử lý bên Saga (từ dưới lên trên)
b5: b4 + và nó put hay dispatch đến fetchDataSuccessed xử lý và cập nhật lại dữ liệu bên Reducer; nếu lỗi -> fetchDataFailed
b6: khi đã cập nhật xong nó đẩy lại về UI cập nhật dữ liệu giao diện
	const dispatch = useDispatch();
  	const websiteState = useSelector((state: AppState) => state.website);

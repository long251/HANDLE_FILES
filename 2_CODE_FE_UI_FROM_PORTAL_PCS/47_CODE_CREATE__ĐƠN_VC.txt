import {
  Button,
  Checkbox,
  ChoiceList,
  DataTable,
  FormLayout,
  Layout,
  LegacyCard,
  Link,
  Modal,
  Page,
  Popover,
  Text,
} from 'pcs-polaris';
import React, { useCallback, useEffect, useState } from 'react';
import {
  IconAmerican,
  IconArrowDetail,
  IconArrowDown,
  IconArrowDropExpand,
  IconArrowUp,
  IconDelete,
  IconEdit,
  IconEngland,
  IconGermany,
  IconImportExcel,
  IconJapan,
  IconKorea,
  IconPrintSuccessed,
  IconSuccessed,
  IconTrash,
} from './IconShippingOrders';
import { showToast } from '../../helpers/toast';
import TitleBreadcrumbs from '../../components/Breadcrumb/TitleBreadcrumb.tsx';
import { IconBack } from '../Ecommerce/IconEcommerce.tsx';
import { useDispatch, useSelector } from 'react-redux';
import { AppState } from '../../store/index.ts';
import { shippingOrdersAction } from '../../store/reducers/shippingOrdersReducer/index.ts';
import { debounce } from 'lodash';

const CreateShippingOrders = () => {
  const dispatch = useDispatch();
  const shippingOrdersState = useSelector((state: AppState) => state.shippingOrders);
  useEffect(() => {
    dispatch(shippingOrdersAction.fetchRoute({ route: 'US-VN' }));
    dispatch(shippingOrdersAction.fetchChooseAddress());
    dispatch(shippingOrdersAction.fetchProductType());
  }, []);
  // Logic Navigation Selected Page
  const [selected, setSelected] = useState(0);
  const handleSelectPageChange = useCallback((selectedTabIndex: number) => setSelected(selectedTabIndex), []);
  //-----------------Create Shipping Orders-------------------------------
  const [activeCountry, setActiveCountry] = useState<string | null>('US-VN');
  const [hoveredCountry, setHoveredCountry] = useState<string | null>(null);
  const handleMouseEnterCountry = (countryName: string) => {
    if (activeCountry !== countryName) {
      setHoveredCountry(countryName);
    }
  };
  const handleMouseLeaveCountry = () => {
    setHoveredCountry(null);
  };
  const handleClickCountry = (countryName: string) => {
    setActiveCountry(countryName);
    dispatch(shippingOrdersAction.fetchRoute({ route: countryName }));
  };
  const [activeAddress, setActiveAddress] = useState<string | null>('5050 NE 112th Ave');
  const [hoveredAddress, setHoveredAddress] = useState<string | null>(null);
  const handleMouseEnterAddress = (address: string) => {
    if (activeAddress !== address) {
      setHoveredAddress(address);
    }
  };
  const handleMouseLeaveAddress = () => {
    setHoveredAddress(null);
  };
  const [expandedAddress, setExpandedAddress] = useState<string | null>(null);
  const handleClickAddress = (address: string) => {
    setActiveAddress(address);
    if (expandedAddress === address) {
      setExpandedAddress(null);
    } else {
      setExpandedAddress(address);
    }
  };
  // Expand delivery Address
  const [activeDeliveyAddress, setActiveDeliveryAddress] = useState(false);
  const toggleModalDeliveryAddress = useCallback(
    () => setActiveDeliveryAddress((activeDeliveyAddress) => !activeDeliveyAddress),
    [],
  );
  const [selectedAddress, setSelectedAddress] = useState<number | null>(null);
  const handleSaveAddress = () => {
    if (selectedAddress) {
      // Tìm địa chỉ được chọn trong shippingOrdersState.address
      const selectedAdd = shippingOrdersState.address.find((add: any) => add.id === selectedAddress);

      if (selectedAdd) {
        // Cập nhật địa chỉ được chọn vào state
        console.log('data choose add', selectedAdd);
        setSelectedAddress(selectedAdd.id);
      }
    }
    toggleModalDeliveryAddress();
  };
  useEffect(() => {
    const defaultAddress = shippingOrdersState.address.find((add: any) => add.active === true);
    if (defaultAddress) {
      setSelectedAddress(defaultAddress.id);
    }
  }, [shippingOrdersState.address]);
  const handleCancel = () => {
    showToast('Hủy tạo đơn thành công', 'success');
  };
  const handleReset = () => {
    handleClickCountry('US-VN');
    handleClickAddress('5050 NE 112th Ave');
    const defaultAddress = shippingOrdersState.address.find((add: any) => add.active === true);
    if (defaultAddress) {
      setSelectedAddress(defaultAddress.id);
    }
  };
  //-----------------------------Create Shipping Orders Tracking Code-------------------------
  const [trackingCodeInput, setTrackingCodeInput] = useState<string>('');
  const [trackingData, setTrackingData] = useState<{ trackingCode: string }[]>([]);
  // Xử lý việc nhập mã tracking và tự động hiển thị bảng dữ liệu
  const handleTrackingCodeSubmit = () => {
    if (trackingCodeInput.trim() !== '') {
      setTrackingData([...trackingData, { trackingCode: trackingCodeInput }]);
      setTrackingCodeInput('');
    }
  };
  const handleTrackingCodeInput = (e: React.ChangeEvent<HTMLInputElement>) => {
    setTrackingCodeInput(e.target.value);
  };

  // Xử lý khi người dùng nhấn phím Enter
  const handleKeyPress = (e: React.KeyboardEvent<HTMLInputElement>) => {
    if (e.key === 'Enter') {
      handleTrackingCodeSubmit();
    }
  };
  const [expandedItem, setExpandedItem] = useState<any | null>(null);
  const handleEdit = (item: any) => {
    if (expandedItem && expandedItem.trackingCode === item.trackingCode) {
      // Đang mở rộng item này, nên thu gọn lại
      setExpandedItem(null);
    } else {
      // Mở rộng item mới
      setExpandedItem(item);
    }
  };
  const handleDelete = (index: number) => {
    const updatedTrackingData = [...trackingData];
    updatedTrackingData.splice(index, 1);
    setTrackingData(updatedTrackingData);
  };
  const rows = trackingData.map((item, index) => {
    const isExpanded = expandedItem && expandedItem.trackingCode === item.trackingCode;
  
    return [
      index + 1,
      <input type='text' defaultValue={item.trackingCode} className='Input_Tracking_Code' />,
      <div style={{ display: 'flex', alignItems: 'center' }}>
        <input
          type='text'
          defaultValue={''}
          style={{
            borderRadius: '4px 0 0 4px',
          }}
          className='Input_Tracking_Code'
        />
        <div className='Unit_Input_Tracking_Code'>kg</div>
      </div>,
  
      <input type='text' defaultValue={''} className='Input_Note' />,
  
      <input type='text' defaultValue={''} className='Input_Note' />,
      <div style={{ display: 'flex', gap: '16px', justifyContent: 'center' }}>
        <div
          className='Style_Icon_Edit_Delete'
          onClick={() => handleEdit(item)}
        >
          <IconEdit />
        </div>
        <div className='Style_Icon_Edit_Delete' onClick={() => handleDelete(index)}>
          <IconDelete />
        </div>
      </div>,
      isExpanded && (
        <div key={`expanded_${index}`} style={{
          width: '100%',
          height: '100px', // Chiều cao tùy ý bạn cần
          border: '1px solid #D1D5DB',
          marginTop: '10px', // Khoảng cách với item trên
        }}>
          {/* Nội dung bảng div */}
          <div>{item.trackingCode}</div>
          {/* Các trường dữ liệu khác có thể thêm vào đây */}
        </div>
      ),
    ];
  });

  const notifySave = () => showToast('Đã lưu vào cơ sở dữ liệu', 'success');
  const handleSave = () => {
    notifySave();
  };
  //------------------------Verify Request-----------------------------
  const fakeDataTrackingList = [
    {
      id: 1,
      trackingCode: 'HMDE000002627243HMDE000002627243',
      weight: '5.6 kg',
      service: 'VAS Included',
      note: 'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean euismod bibendum',
    },
  ];
  const rows2 = fakeDataTrackingList.map((item) => {
    return [item.id, item.trackingCode, item.weight, item.service, item.note];
  });
  const notify2 = () => showToast('Đã huỷ', 'warning');
  const [isOrderPlaced2, setIsOrderPlaced2] = useState(false);
  const handleCancel2 = () => {
    notify2();
    setIsOrderPlaced2(true);
  };
  //---------------------Verify Request Success---------------------------
  const notifyRequestSuccess = () => showToast('Tạo yêu cầu thành công', 'success');
  const handleClickRequestSuccess = () => {
    notifyRequestSuccess();
  };
  return (
    <div className='Polaris-Custom'>
      <Page
        //@ts-ignore
        title={<TitleBreadcrumbs breadcrumbs={[{ title: 'Tạo yêu cầu vận chuyển', url: '' }]} />}
        primaryAction={
          selected === 1 ? (
            <div className='Icon_Import' onClick={() => handleSelectPageChange(0)}>
              <div>
                <IconBack />
              </div>
              <div className='Create_Order_Font'>Quay lại</div>
            </div>
          ) : null || selected === 2 ? (
            <div className='Icon_Import' onClick={() => handleSelectPageChange(1)}>
              <div>
                <IconBack />
              </div>
              <div className='Create_Order_Font'>Quay lại</div>
            </div>
          ) : null
        }
      >
        <Layout>
          <Layout.Section>
            <LegacyCard>
              <LegacyCard.Section>
                {selected === 0 && (
                  <div>
                    <div style={{ position: 'relative' }}>
                      {/* chọn kho hàng */}
                      <div className='Select_Warehouse'>
                        <div className='Header'>Chọn kho nhận hàng</div>

                        <div className='Region'>
                          <div
                            style={{
                              backgroundColor:
                                activeCountry === 'US-VN' || hoveredCountry === 'US_VN' ? '#EFF1F4' : 'transparent',
                            }}
                            className='Style_Region'
                            onMouseEnter={() => handleMouseEnterCountry('US-VN')}
                            onMouseLeave={handleMouseLeaveCountry}
                            onClick={() => handleClickCountry('US-VN')}
                          >
                            <IconAmerican />
                            Mỹ-Việt Nam
                          </div>
                          <div
                            style={{
                              backgroundColor:
                                activeCountry === 'JP-VN' || hoveredCountry === 'JP-VN' ? '#EFF1F4' : 'transparent',
                            }}
                            className='Style_Region'
                            onMouseEnter={() => handleMouseEnterCountry('JP-VN')}
                            onMouseLeave={handleMouseLeaveCountry}
                            onClick={() => handleClickCountry('JP-VN')}
                          >
                            <IconJapan />
                            Nhật Bản-Việt Nam
                          </div>
                          <div
                            style={{
                              backgroundColor:
                                activeCountry === 'KR-VN' || hoveredCountry === 'KR-VN' ? '#EFF1F4' : 'transparent',
                            }}
                            className='Style_Region'
                            onMouseEnter={() => handleMouseEnterCountry('KR-VN')}
                            onMouseLeave={handleMouseLeaveCountry}
                            onClick={() => handleClickCountry('KR-VN')}
                          >
                            <IconKorea />
                            Hàn Quốc-Việt Nam
                          </div>
                          <div
                            style={{
                              backgroundColor:
                                activeCountry === 'UK-VN' || hoveredCountry === 'UK-VN' ? '#EFF1F4' : 'transparent',
                            }}
                            className='Style_Region'
                            onMouseEnter={() => handleMouseEnterCountry('UK-VN')}
                            onMouseLeave={handleMouseLeaveCountry}
                            onClick={() => handleClickCountry('UK-VN')}
                          >
                            <IconEngland />
                            Anh-Việt Nam
                          </div>
                          <div
                            style={{
                              backgroundColor:
                                activeCountry === 'DE-VN' || hoveredCountry === 'DE-VN' ? '#EFF1F4' : 'transparent',
                            }}
                            className='Style_Region'
                            onMouseEnter={() => handleMouseEnterCountry('DE-VN')}
                            onMouseLeave={handleMouseLeaveCountry}
                            onClick={() => handleClickCountry('DE-VN')}
                          >
                            <IconGermany />
                            Đức-Việt Nam
                          </div>
                        </div>

                        {/* Sổ địa chỉ */}
                        <div className='Address_Book'>
                          {shippingOrdersState.route.map((item: any, index: number) => (
                            <div
                              key={index}
                              style={{
                                backgroundColor:
                                  activeAddress === item.address || hoveredAddress === item.address
                                    ? '#DFE3E9'
                                    : 'transparent',
                              }}
                              className='Style_Address_Book'
                              onMouseEnter={() => handleMouseEnterAddress(item.address)}
                              onMouseLeave={handleMouseLeaveAddress}
                              onClick={() => setActiveAddress(item.address)}
                            >
                              <div style={{ display: 'flex', justifyContent: 'space-between', gap: '20px' }}>
                                <div className='Address'>
                                  Address: <div>{item.address}</div>
                                </div>
                                <div style={{ display: 'flex', alignItems: 'flex-start' }}>
                                  <div className='Style_Button_Expand' onClick={() => handleClickAddress(item.address)}>
                                    {expandedAddress === item.address ? 'Thu gọn' : 'Chi tiết'} <IconArrowDetail />
                                  </div>
                                </div>
                              </div>
                              <div className='Post_Code'>
                                PostCode: <div>{item.postalCode}</div>
                              </div>
                              <div className='Tel'>
                                Tel: <div>{item.phoneNumber}</div>
                              </div>
                              {/* mở rộng chi tiết */}
                              {expandedAddress === item.address && (
                                <div className='ExpandedDetails'>
                                  <div style={{ display: 'flex', gap: '24px' }}>
                                    Prefecture: <div>{item.provinceName}</div>
                                  </div>
                                  <div style={{ display: 'flex', gap: '46px' }}>
                                    District: <div>{item.districtName}</div>
                                  </div>
                                  <div style={{ display: 'flex', gap: '60px' }}>
                                    Ward: <div>{item.wardName}</div>
                                  </div>
                                  <div>{item.accountOther}</div>
                                  <div>{item.accountTransport}</div>
                                </div>
                              )}
                            </div>
                          ))}
                        </div>
                      </div>
                      {/* Địa chỉ nhận hàng */}
                      <div className='Delivery_Address'>
                        <div className='Header'>
                          <div className='Font_Header'>Địa chỉ nhận hàng</div>
                          <div
                            style={{ color: '#0050A6', cursor: 'pointer' }}
                            onClick={() => {
                              toggleModalDeliveryAddress();
                            }}
                          >
                            Sổ địa chỉ <IconArrowDetail />
                          </div>
                        </div>
                        <Modal
                          open={activeDeliveyAddress}
                          large
                          onClose={() => {
                            toggleModalDeliveryAddress();
                          }}
                          title='Chọn địa chỉ nhận hàng'
                          primaryAction={{
                            content: 'Lưu địa chỉ được chọn',
                            onAction: handleSaveAddress,
                          }}
                        >
                          <Modal.Section>
                            <div className='Style_Modal_Choose_Address'>
                              {shippingOrdersState.address.map((add: any, index: number) => (
                                <div
                                  key={index}
                                  className='Item_Choose_Address'
                                  style={{
                                    backgroundColor: selectedAddress === add.id ? '#DFE3E9' : 'transparent',
                                    cursor: 'pointer',
                                  }}
                                  onClick={() => setSelectedAddress(add.id)}
                                >
                                  <div style={{ display: 'flex', gap: '22px' }}>
                                    Người nhận: <div>{add.name}</div>
                                  </div>
                                  <div style={{ display: 'flex', gap: '52px' }}>
                                    Địa chỉ: <div>{add.fullAddress}</div>
                                  </div>
                                  <div style={{ display: 'flex', gap: '12px' }}>
                                    Số điện thoại: <div>{add.phone}</div>
                                  </div>
                                </div>
                              ))}
                            </div>
                          </Modal.Section>
                        </Modal>
                        <div className='Content_Delivery_Address'>
                          {selectedAddress &&
                            (() => {
                              const selectedAdd = shippingOrdersState.address.find(
                                (add: any) => add.id === selectedAddress,
                              );
                              return selectedAdd ? (
                                <>
                                  <div style={{ display: 'flex', gap: '22px' }}>
                                    Người nhận: <div>{selectedAdd.name}</div>
                                  </div>
                                  <div style={{ display: 'flex', gap: '52px' }}>
                                    Địa chỉ: <div>{selectedAdd.fullAddress}</div>
                                  </div>
                                  <div style={{ display: 'flex', gap: '12px' }}>
                                    Số điện thoại: <div>{selectedAdd.phone}</div>
                                  </div>
                                </>
                              ) : null;
                            })()}
                        </div>
                      </div>
                    </div>
                    {/* Active */}
                    <div style={{ position: 'absolute' }}>
                      <div className='Style_Active_Form_Button'>
                        <div style={{ color: '#85C0FF', cursor: 'pointer' }} onClick={handleReset}>
                          Reset
                        </div>
                        <div style={{ display: 'flex', gap: '28px', alignItems: 'center' }}>
                          <div style={{ color: '#FFFFFF', cursor: 'pointer' }} onClick={handleCancel}>
                            <Link url='/don-hang-van-chuyen' removeUnderline monochrome>
                              Hủy
                            </Link>
                          </div>
                          <div className='Active_Button' onClick={() => handleSelectPageChange(1)}>
                            <Button>Tiếp tục</Button>
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>
                )}
                {selected === 1 && (
                  <div>
                    <div className='Shipping_Information'>
                      {/* header */}
                      <div className='Header'>
                        <div className='Font'>Thông tin hàng hoá vận chuyển</div>
                        <div style={{ color: '#0050A6', cursor: 'pointer', whiteSpace: 'nowrap' }}>Tải file mẫu</div>
                      </div>

                      {/* Nhập mã tracking  */}
                      <div className='Enter_Tracking_Code'>
                        <div className='Label_Tracking_Code'>
                          <div>Nhập mã tracking</div>
                          <div style={{ flexGrow: '1' }}>
                            <input
                              type='text'
                              className='Input_Tracking'
                              value={trackingCodeInput}
                              onChange={handleTrackingCodeInput}
                              onKeyPress={handleKeyPress}
                            />
                          </div>
                        </div>
                        <div style={{ display: 'flex', alignItems: 'center', gap: '20px' }}>
                          <div className='Button_OK'>
                            <Button onClick={handleTrackingCodeSubmit}>OK</Button>
                          </div>
                          <div className='Button_Import'>
                            <IconImportExcel />
                            Import Excel
                          </div>
                        </div>
                      </div>

                      {/* Data Table */}
                      {trackingData.length > 0 && (
                        <div className='Data_Table_Shipping_Orders'>
                          <DataTable
                            columnContentTypes={['text', 'text', 'text', 'text', 'text', 'text']}
                            headings={['STT', 'Mã tracking', 'Total', 'Dịch vụ cộng thêm', 'Ghi chú', 'Action']}
                            rows={rows}
                          />
                        </div>
                      )}

                      {/* Modal Edit Tracking */}
                    </div>

                    <div style={{ position: 'absolute' }}>
                      <div className='Create_Input_Tracking_Code'>
                        <div style={{ color: '#85C0FF', whiteSpace: 'nowrap' }}>3 Tracking</div>
                        <div style={{ display: 'flex', gap: '20px', alignItems: 'center' }}>
                          <div style={{ color: '#FFFFFF', cursor: 'pointer' }} onClick={handleSave}>
                            Lưu
                          </div>
                          <div className='Active_Button' onClick={() => handleSelectPageChange(2)}>
                            <Button>Tiếp tục</Button>
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>
                )}
                {selected === 2 && (
                  <div>
                    <FormLayout>
                      <FormLayout.Group>
                        <table className='Info_Table_Shipping_Orders'>
                          <thead>
                            <tr>
                              <th colSpan={2}>Thông tin vận chuyển</th>
                            </tr>
                          </thead>
                          <tbody>
                            <tr>
                              <td style={{ width: '30%' }}>Tuyến vận chuyển</td>
                              <td style={{ width: '70%' }}>Mỹ-Việt Nam</td>
                            </tr>
                            <tr>
                              <td>Kho nhận hàng</td>
                              <td>Kho Oregon</td>
                            </tr>
                          </tbody>
                        </table>

                        <table className='Info_Table_Shipping_Orders'>
                          <thead>
                            <tr>
                              <th colSpan={2}>Thông tin giao hàng</th>
                            </tr>
                          </thead>
                          <tbody>
                            <tr>
                              <td style={{ width: '30%' }}>Người nhận</td>
                              <td style={{ width: '70%' }}>Lê Tuấn Anh - 0974497237</td>
                            </tr>
                            <tr>
                              <td>Địa chỉ</td>
                              <td>Số 17 Quang Tiến, P. Đại Mỗ, Q. Nam Từ Liêm, TP. Hà Nội</td>
                            </tr>
                          </tbody>
                        </table>
                      </FormLayout.Group>
                    </FormLayout>
                    {/* danh sách tracking */}
                    <div className='Data_Table_Verify_Request'>
                      <DataTable
                        columnContentTypes={['text', 'text', 'text', 'text', 'text']}
                        headings={['Danh sách tracking', '', '', '', '']}
                        rows={rows2}
                      />
                    </div>
                    {/* Active */}
                    {!isOrderPlaced2 && (
                      <div style={{ position: 'absolute' }}>
                        <div className='Verify_Request'>
                          <div style={{ color: '#85C0FF' }}>6 Tracking</div>
                          <div style={{ display: 'flex', gap: '28px', alignItems: 'center' }}>
                            <div style={{ color: '#FFFFFF', cursor: 'pointer' }} onClick={handleCancel2}>
                              Huỷ
                            </div>
                            <div className='Active_Button' onClick={() => handleSelectPageChange(3)}>
                              <Button>Gửi yêu cầu</Button>
                            </div>
                          </div>
                        </div>
                      </div>
                    )}
                  </div>
                )}
                {selected === 3 && (
                  <div className='Verify_Reuquest_Successed'>
                    {/* trạng thái thành công */}
                    <div className='Icon_Successed'>
                      <div>
                        <IconSuccessed />
                      </div>
                      <div className='Title_Verify_Request'>
                        <div className='Font_Title'>Quý khách đã tạo yêu cầu thành công</div>
                        <div>(11:25 - Thứ 6, ngày 12/08/2022)</div>
                      </div>
                    </div>

                    {/* Danh sách tracking */}
                    <div style={{ position: 'relative', marginTop: '68px' }}>
                      <div className='Data_Table_Verify_Request'>
                        <DataTable
                          columnContentTypes={['text', 'text', 'text', 'text', 'text']}
                          headings={['Danh sách tracking', '', '', '', '']}
                          rows={rows2}
                        />
                      </div>

                      <div className='Icon_Print_Information'>
                        <IconPrintSuccessed /> In Thông tin
                      </div>
                    </div>

                    {/* Quản lý & tạo yêu cầu */}
                    <div
                      style={{
                        display: 'flex',
                        justifyContent: 'center',
                        alignItems: 'center',
                        gap: '20px',
                        marginTop: '48px',
                        flexWrap: 'wrap',
                      }}
                    >
                      <div className='Button_Order_Management'>
                        <Button url='/don-hang-van-chuyen' monochrome removeUnderline>
                          Quản lý đơn hàng
                        </Button>
                      </div>
                      <div className='Button_Create_Request' onClick={handleClickRequestSuccess}>
                        <Button>Tạo yêu cầu đơn mới</Button>
                      </div>
                    </div>
                  </div>
                )}
              </LegacyCard.Section>
            </LegacyCard>
          </Layout.Section>
        </Layout>
      </Page>
    </div>
  );
};

export default CreateShippingOrders;

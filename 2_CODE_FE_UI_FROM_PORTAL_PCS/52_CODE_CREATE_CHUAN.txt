import {
  Autocomplete,
  Button,
  Checkbox,
  DataTable,
  FormLayout,
  Layout,
  LegacyCard,
  Link,
  Modal,
  Page,
  Popover,
} from 'pcs-polaris';
import React, { useCallback, useEffect, useState } from 'react';
import {
  IconAddProduct,
  IconAmerican,
  IconArrowDetail,
  IconArrowDown,
  IconArrowDropExpand,
  IconArrowUp,
  IconCanada,
  IconChina,
  IconDelete,
  IconEdit,
  IconEngland,
  IconGermany,
  IconImportExcel,
  IconJapan,
  IconKorea,
  IconPrintSuccessed,
  IconSuccessed,
  IconVietNam,
} from './IconShippingOrders';
import { showToast } from '../../helpers/toast';
import TitleBreadcrumbs from '../../components/Breadcrumb/TitleBreadcrumb.tsx';
import { IconBack } from '../Ecommerce/IconEcommerce.tsx';
import { useDispatch, useSelector } from 'react-redux';
import { AppState } from '../../store/index.ts';
import { shippingOrdersAction } from '../../store/reducers/shippingOrdersReducer/index.ts';

type PackageProduct = {
  ten_sp: string;
  loai_sp: string;
  so_luong: number;
  trong_luong: number;
  gia_tri: number;
};
type Package = {
  packageProducts: PackageProduct[];
};
type Tracking = {
  ma: string;
  dich_vu_cong_them: string[]; // theo id thi la number[], theo code thi la string[],
  ghi_chu: string;
  packages: Package[];

  tuyen: string;
  kho: string; // ma code
  dc_nhan_hang: {
    ten: string;
    nuoc: string;
    tinh: string;
    huyen: string;
    xa: string;
    sdt: string;
  };
};
type Input = {
  tracking: Tracking[];
  payment_method: string;
};

const CreateShippingOrders = () => {
  const dispatch = useDispatch();
  const shippingOrdersState = useSelector((state: AppState) => state.shippingOrders);
  useEffect(() => {
    dispatch(shippingOrdersAction.fetchAllRoute());
    dispatch(shippingOrdersAction.fetchRoute({ route: 'US-VN' }));
    dispatch(shippingOrdersAction.fetchChooseAddress());
    dispatch(shippingOrdersAction.fetchProductType());
    dispatch(shippingOrdersAction.fetchCurrency());
  }, []);

  // Logic Navigation Selected Page
  const [selected, setSelected] = useState(0);
  const handleSelectPageChange = useCallback((selectedTabIndex: number) => setSelected(selectedTabIndex), []);
  //------------------------ Step 1: Choose country, address,...---------------------------------
  const getRouteInfo = (code: string) => {
    switch (code) {
      case 'US-VN':
        return { label: 'Mỹ - Việt Nam', icon: <IconAmerican /> };
      case 'JP-VN':
        return { label: 'Nhật Bản - Việt Nam', icon: <IconJapan /> };
      case 'KR-VN':
        return { label: 'Hàn Quốc - Việt Nam', icon: <IconKorea /> };
      case 'UK-VN':
        return { label: 'Anh - Việt Nam', icon: <IconEngland /> };
      case 'DE-VN':
        return { label: 'Đức - Việt Nam', icon: <IconGermany /> };
      case 'VN':
        return { label: 'Việt Nam', icon: <IconVietNam /> };
      case 'CN-VN':
        return { label: 'Trung quốc-Việt Nam', icon: <IconChina /> };
      case 'CA-VN':
        return { label: 'Canada-Việt Nam', icon: <IconCanada /> };
      default:
        return { label: 'Unknown', icon: <div /> };
    }
  };
  const [activeCountry, setActiveCountry] = useState<string | null>('US-VN');
  const moneyIcon = () => {
    switch (activeCountry) {
      case 'US-VN':
        return '$';
      case 'UK-VN':
        return '£';
      case 'JP-VN':
        return '¥';
      default:
        return 'tien';
    }
  };
  const [hoveredCountry, setHoveredCountry] = useState<string | null>(null);
  const handleMouseEnterCountry = (countryName: string) => {
    if (activeCountry !== countryName) {
      setHoveredCountry(countryName);
    }
  };
  const handleMouseLeaveCountry = () => {
    setHoveredCountry(null);
  };
  //
  const handleClickCountry = (countryName: string) => {
    setActiveCountry(countryName);
    dispatch(shippingOrdersAction.fetchRoute({ route: countryName }));
  };
  
  const [activeAddress, setActiveAddress] = useState<string | null>('5050 NE 112th Ave');
  const [provinceName, setProvinceName] = useState<string | null>('Oregon');
  const [hoveredAddress, setHoveredAddress] = useState<string | null>(null);
  const handleMouseEnterAddress = (address: string) => {
    if (activeAddress !== address) {
      setHoveredAddress(address);
    }
  };
  const handleMouseLeaveAddress = () => {
    setHoveredAddress(null);
  };
  const handleClickAddress = (address: string, provinceName: string) => {
    setActiveAddress(address);
    setProvinceName(provinceName);
  };
  
  const [expandedAddress, setExpandedAddress] = useState<string | null>(null);
  const handleClickExpandAddress = (address: string) => {
    setActiveAddress(address);
    if (expandedAddress === address) {
      setExpandedAddress(null);
    } else {
      setExpandedAddress(address);
    }
  };
  // Expand delivery Address
  const [activeDeliveyAddress, setActiveDeliveryAddress] = useState(false);
  const toggleModalDeliveryAddress = useCallback(
    () => setActiveDeliveryAddress((activeDeliveyAddress) => !activeDeliveyAddress),
    [],
  );
  const [selectedAddress, setSelectedAddress] = useState<number | null>(null);
  const handleSaveAddress = () => {
    if (selectedAddress) {
      const selectedAdd = shippingOrdersState.address.find((add: any) => add.id === selectedAddress);
      if (selectedAdd) {
        setSelectedAddress(selectedAdd.id);
      }
    }
    toggleModalDeliveryAddress();
  };
  useEffect(() => {
    const defaultAddress = shippingOrdersState.address.find((add: any) => add.active === true);
    if (defaultAddress) {
      setSelectedAddress(defaultAddress.id);
    } else if (shippingOrdersState.address.length > 0) {
      setSelectedAddress(shippingOrdersState.address[0].id);
    }  
  }, [shippingOrdersState.address]);
  const handleAddAddress = ()=>{
    
  }

  const handleCancel = () => {
    showToast('Hủy tạo đơn thành công', 'success');
  };
  const handleReset = () => {
    handleClickCountry('US-VN');
    handleClickAddress('5050 NE 112th Ave', 'Oregon');
    const defaultAddress = shippingOrdersState.address.find((add: any) => add.active === true);
    if (defaultAddress) {
      setSelectedAddress(defaultAddress.id);
    }
  };
  //------------------------------ Step 2: Input Tracking Code ---------------------------------
  const [trackingCodeInput, setTrackingCodeInput] = useState<string>('');
  const defaultProduct = {
    name: '',
    nameCustom: '',
    image: '',
    qty: 0,
    price: 0,
    priceWeight: 0,
    weight: 0,
    priceStandard: 0,
  };
  const defaultPack = {
    tracking: '',
    weight: 0,
    width: 0,
    height: 0,
    length: 0,
    note: '',
    packageProducts: [defaultProduct],
  };
  const [trackingData, setTrackingData] = useState<
    {
      trackingCode: string;
      services: any[];
      packages: {
        tracking: string;
        weight: number;
        width: number;
        height: number;
        length: number;
        note: string;
        packageProducts: {
          name: string;
          nameCustom: string;
          image: string;
          qty: number;
          price: number;
          priceWeight: number;
          weight: number;
          priceStandard: number;
        }[];
      }[];
    }[]
  >([]);
console.log('ggwp', trackingData);

  const services = shippingOrdersState?.product_type?.data?.serviceCharges;
  const packages = shippingOrdersState?.product_type?.data?.productTypes || [];

  const [activePopover, setActivePopover] = useState<string | null>(null); // mở chọn dịch vụ
  const [expandedItem, setExpandedItem] = useState<string | null>(null); // mở rộng từ Edit của Tracking tổng
  const [expandedItemPackage, setExpandedItemPackage] = useState<number | null>(null);

  const handleTrackingCodeSubmit = () => {
    if (trackingCodeInput.trim() !== '') {
      const newTracking = {
        trackingCode: trackingCodeInput,
        services: [],
        packages: [defaultPack],
      };
      setTrackingData([...trackingData, newTracking]);
      setTrackingCodeInput('');
    }
  };
  const handleTogglePopover = (trackingCode: string) => {
    setActivePopover((active) => (active === trackingCode ? null : trackingCode));
  };
  const handleCheckboxChange = (serviceId: number, trackingCode: string) => {
    setTrackingData((prev) =>
      prev.map((item) =>
        item.trackingCode === trackingCode
          ? {
              ...item,
              services: item.services.includes(serviceId)
                ? item.services.filter((id) => id !== serviceId)
                : [...item.services, serviceId],
            }
          : item,
      ),
    );
  };
  const handleApplySelection = () => {
    setActivePopover(null);
  };
  const handleEdit = (trackingCode: string) => {
    setExpandedItem((prev) => (prev === trackingCode ? null : trackingCode));
  };
  const handleDelete = (index: number) => {
    setTrackingData((prev) => prev.filter((_, idx) => idx !== index));
  };

  const handleAddPackage = (trackingCode: string) => {
    const tracking = trackingData.find((t) => t.trackingCode === trackingCode);
    const packsToAdd = tracking?.packages;
    if (packsToAdd) {
      if (packsToAdd.length > 0) {
        const newPacks = [...packsToAdd, { ...defaultPack, tracking: trackingCode }];
        const newTracking = { ...tracking, packages: newPacks };
        setTrackingData(trackingData.map((t) => (t.trackingCode === trackingCode ? newTracking : t)));
      } else {
        const newPacks = [{ ...defaultPack, tracking: trackingCode }];
        const newTracking = { ...tracking, packages: newPacks };
        setTrackingData(trackingData.map((t) => (t.trackingCode === trackingCode ? newTracking : t)));
      }
    }
  };
  const handleRemovePackage = (trackingCode: string, packageIndex: number) => {
    setTrackingData((prev) =>
      prev.map((item) =>
        item.trackingCode === trackingCode
          ? { ...item, packages: item.packages.filter((_, idx) => idx !== packageIndex) }
          : item,
      ),
    );
  };
  const handleTogglePackageDetails = (packages: number) => {
    setExpandedItemPackage((prev) => (prev === packages ? null : packages));
  };

  const handleAddProduct = (packIndex: number, trackingCode: string) => {
    const tracking = trackingData.find((t) => t.trackingCode === trackingCode);
    const packs = tracking?.packages;
    if (packs && packs.length > 0) {
      const pack = packs[packIndex];
      const packageProducts = pack.packageProducts;

      if (packageProducts && packageProducts.length > 0) {
        const newProducts = [...packageProducts, defaultProduct];

        const newPack = { ...pack, packageProducts: newProducts };
        const newPacks = packs.map((p: any, i: number) => (i === packIndex ? newPack : p));
        const newTracking = { ...tracking, packages: newPacks };
        setTrackingData(trackingData.map((t) => (t.trackingCode === trackingCode ? newTracking : t)));
      } else {
        const newProducts = [defaultProduct];
        const newPack = { ...pack, packageProducts: newProducts };
        const newPacks = packs.map((p: any, i: number) => (i === packIndex ? newPack : p));
        const newTracking = { ...tracking, packages: newPacks };
        setTrackingData(trackingData.map((t) => (t.trackingCode === trackingCode ? newTracking : t)));
      }
    }
  };

  const handleDeleteProduct = (productIndex: number, packageIndex: number, trackingCode: string) => {
    const tracking = trackingData.find((t) => t.trackingCode === trackingCode);
    if (tracking) {
      const packs = tracking.packages;
      if (packs && packs.length > 0) {
        const pack = packs[packageIndex];
        if (pack) {
          const products = pack.packageProducts;
          if (products && products.length > 0) {
            const newProducts = products.filter((p: any, i: number) => i !== productIndex);

            const newPack = { ...pack, packageProducts: newProducts };
            const newPacks = packs.map((p: any, i: number) => (i === packageIndex ? newPack : p));
            const newTracking = { ...tracking, packages: newPacks };
            setTrackingData(trackingData.map((t) => (t.trackingCode === trackingCode ? newTracking : t)));
          }
        }
      }
    }
  };

  const notifySave = () => showToast('Đã lưu vào cơ sở dữ liệu', 'success');
  const handleSave = () => {
    notifySave();
  };
  const [completedProducts, setCompleletProducts] = useState<Array<number>>([]);
  useEffect(() => {
    setCompleletProducts([]);
  }, [expandedItem, expandedItemPackage]);
  const setNameForProduct = (input: string, productIndex: number, packIndex: number, trackingCode: string) => {
    const tracking = trackingData.find((t) => t.trackingCode === trackingCode);
    if (tracking) {
      const packs = tracking.packages;
      if (packs && packs.length > 0) {
        const pack = packs[packIndex];
        if (pack) {
          const products = pack.packageProducts;
          if (products && products.length > 0) {
            const product = products[productIndex];
            const newProduct = { ...product, name: input };
            const newProducts = products.map((p: any, i: number) => (i === productIndex ? newProduct : p));
            const newPack = { ...pack, packageProducts: newProducts };
            const newPacks = packs.map((p: any, i: number) => (i === packIndex ? newPack : p));
            const newTracking = { ...tracking, packages: newPacks };
            setTrackingData(trackingData.map((t) => (t.trackingCode === trackingCode ? newTracking : t)));
          }
        }
      }
    }
  };
  const setTypeForProduct = (input: string, productIndex: number, packIndex: number, trackingCode: string) => {
    const tracking = trackingData.find((t) => t.trackingCode === trackingCode);
    if (tracking) {
      const packs = tracking.packages;
      if (packs && packs.length > 0) {
        const pack = packs[packIndex];
        if (pack) {
          const products = pack.packageProducts;
          if (products && products.length > 0) {
            const product = products[productIndex];
            const newProduct = { ...product, nameCustom: input };
            const newProducts = products.map((p: any, i: number) => (i === productIndex ? newProduct : p));
            const newPack = { ...pack, packageProducts: newProducts };
            const newPacks = packs.map((p: any, i: number) => (i === packIndex ? newPack : p));
            const newTracking = { ...tracking, packages: newPacks };
            setTrackingData(trackingData.map((t) => (t.trackingCode === trackingCode ? newTracking : t)));
          }
        }
      }
    }
  };
  const setAmountForProduct = (input: string, productIndex: number, packIndex: number, trackingCode: string) => {
    const tracking = trackingData.find((t) => t.trackingCode === trackingCode);
    if (tracking) {
      const packs = tracking.packages;
      if (packs && packs.length > 0) {
        const pack = packs[packIndex];
        if (pack) {
          const products = pack.packageProducts;
          if (products && products.length > 0) {
            const product = products[productIndex];
            const newProduct = { ...product, qty: parseInt(input) };
            const newProducts = products.map((p: any, i: number) => (i === productIndex ? newProduct : p));
            const newPack = { ...pack, packageProducts: newProducts };
            const newPacks = packs.map((p: any, i: number) => (i === packIndex ? newPack : p));
            const newTracking = { ...tracking, packages: newPacks };
            setTrackingData(trackingData.map((t) => (t.trackingCode === trackingCode ? newTracking : t)));
          }
        }
      }
    }
  };
  const setWeightForProduct = (input: string, productIndex: number, packIndex: number, trackingCode: string) => {
    const tracking = trackingData.find((t) => t.trackingCode === trackingCode);
    if (tracking) {
      const packs = tracking.packages;
      if (packs && packs.length > 0) {
        const pack = packs[packIndex];
        if (pack) {
          const products = pack.packageProducts;
          if (products && products.length > 0) {
            const product = products[productIndex];
            const newProduct = { ...product, weight: parseInt(input) };
            const newProducts = products.map((p: any, i: number) => (i === productIndex ? newProduct : p));
            const newPack = { ...pack, packageProducts: newProducts };
            const newPacks = packs.map((p: any, i: number) => (i === packIndex ? newPack : p));
            const newTracking = { ...tracking, packages: newPacks };
            setTrackingData(trackingData.map((t) => (t.trackingCode === trackingCode ? newTracking : t)));
          }
        }
      }
    }
  };
  const setPriceForProduct = (input: string, productIndex: number, packIndex: number, trackingCode: string) => {
    const tracking = trackingData.find((t) => t.trackingCode === trackingCode);
    if (tracking) {
      const packs = tracking.packages;
      if (packs && packs.length > 0) {
        const pack = packs[packIndex];
        if (pack) {
          const products = pack.packageProducts;
          if (products && products.length > 0) {
            const product = products[productIndex];
            const newProduct = { ...product, price: parseInt(input) };
            const newProducts = products.map((p: any, i: number) => (i === productIndex ? newProduct : p));
            const newPack = { ...pack, packageProducts: newProducts };
            const newPacks = packs.map((p: any, i: number) => (i === packIndex ? newPack : p));
            const newTracking = { ...tracking, packages: newPacks };
            setTrackingData(trackingData.map((t) => (t.trackingCode === trackingCode ? newTracking : t)));
          }
        }
      }
    }
  };
  const handleSaveProduct = (trackingCode: string, packIndex: number, productIndex: number) => {
    const tracking = trackingData.find((t) => t.trackingCode === trackingCode);
    if (tracking) {
      const packs = tracking.packages;
      if (packs && packs.length > 0) {
        const pack = packs[packIndex];
        if (pack) {
          const products = pack.packageProducts;
          if (products && products.length > 0) {
            const product = products[productIndex];
            if (
              product.name.trim() === '' ||
              product.nameCustom.trim() === '' ||
              product.qty <= 0 ||
              product.weight <= 0 ||
              product.price <= 0
            ) {
              showToast('Bạn chưa nhập đủ dữ liệu', 'success');
            } else {
              if (completedProducts.includes(productIndex)) {
                setCompleletProducts(completedProducts.filter((c) => c !== productIndex));
              } else {
                const newPack = { ...pack, weight: pack.weight + product.weight };
                const newPacks = packs.map((p: any, i: number) => (i === packIndex ? newPack : p));
                const newTracking = { ...tracking, packages: newPacks };
                setTrackingData(trackingData.map((t) => (t.trackingCode === trackingCode ? newTracking : t)));
                setCompleletProducts([...completedProducts, productIndex]);
              }
            }
          }
        }
      }
    }
  };
  //------------------------------ Step 3: check lại dữ liệu , Lưu và tạo đơn-----------------------------
  const [paymentMethod, setPaymentMethod] = useState("COD");

  const rows2 = trackingData.map((item, i) => {
    const ids = item.services;
    let texts = '';
    ids.forEach((id, i) => {
      const text = services.find((s: any) => s.id === id).name;
      if (i < ids.length - 1) {
        texts = texts + text + ', ';
      } else {
        texts = texts + text;
      }
    });
    const packs = item.packages;
    let weight = 0;
    packs.forEach((p) => {
      weight = weight + p.weight;
    });
    return [i + 1, item.trackingCode, `${weight}Kg`, texts];
  });

  const notify2 = () => showToast('Huỷ tạo đơn thành công', 'success');
  const handleCancel2 = () => {
    notify2();
  };
  const notifyRequest = () => showToast('Tạo đơn hàng thành công', 'success');
  const handleRequest = () => {
    notifyRequest();
    
    const orderTransportAddRequest = trackingData.map((tracking) => ({
      packages: tracking.packages.map((pack) => ({
        packageProducts: pack.packageProducts.map((product) => ({
          name: product.name,
          weight: product.weight,
          qty: product.qty,
          price: product.price,
          nameCustom: product.nameCustom,
          priceStandard: product.priceStandard,
          priceWeight: product.priceWeight,
        })),
        productAdd: {
          weight: 0,
          qty: 0,
          price: 0,
        },
        tracking: pack.tracking,
        note: pack.note,
        isEdit: false,
        weight: pack.weight,
        weightQuote: pack.weight,
        length: pack.length,
        height: pack.height,
        width: pack.width,
      })),
      shippingRouteCode: activeCountry,
      shippingRouteId: 4,
      currency: 'GBP',
      warehouse: 'WUK',
      addressId: 6546,
      customerName: 'IT TEST 1 - KHONG MUA HANG',
      customerAddress: '100 Hoàng Quốc Việt',
      customerDistrict: 'Cầu Giấy',
      customerPhone: '0375967251',
      customerProvince: 'Hà Nội',
      customerWard: 'Nghĩa Đô',
      tracking: tracking.trackingCode,
      surcharge: 0,
      priceExpected: 0,
      orderServices: ['SVC2306220001', 'SV02'],
      totalAmount: 500000,
    }));
console.log('GALIO', orderTransportAddRequest);

    const payload = {
      orderTransportAddRequest,
      paymentMethod: paymentMethod,
    };

    dispatch(shippingOrdersAction.fetchCreate(payload));
  };

  //------------------ Steppest: bước cuối xuất trạng thái tạo yêu cầu thành công, thất bại--------------------------
  return (
    <div className='Polaris-Custom'>
      <Page
        //@ts-ignore
        title={<TitleBreadcrumbs breadcrumbs={[{ title: 'Tạo yêu cầu vận chuyển', url: '' }]} />}
        primaryAction={
          selected === 1 ? (
            <div className='Icon_Import' onClick={() => handleSelectPageChange(0)}>
              <div>
                <IconBack />
              </div>
              <div className='Create_Order_Font'>Quay lại</div>
            </div>
          ) : null || selected === 2 ? (
            <div className='Icon_Import' onClick={() => handleSelectPageChange(1)}>
              <div>
                <IconBack />
              </div>
              <div className='Create_Order_Font'>Quay lại</div>
            </div>
          ) : null
        }
      >
        <Layout>
          <Layout.Section>
            <LegacyCard>
              <LegacyCard.Section>
                {selected === 0 && (
                  <div>
                    <div style={{ position: 'relative' }}>
                      {/* chọn kho hàng */}
                      <div className='Select_Warehouse'>
                        <div className='Header'>Chọn kho nhận hàng</div>

                        <div className='Region'>
                          {shippingOrdersState.all_route.map((route: any, index: number) => {
                            const { label, icon } = getRouteInfo(route.code);
                            return (
                              <div
                                key={index}
                                style={{
                                  backgroundColor:
                                    activeCountry === route.code || hoveredCountry === route.code
                                      ? '#EFF1F4'
                                      : 'transparent',
                                }}
                                className='Style_Region'
                                onMouseEnter={() => handleMouseEnterCountry(route.code)}
                                onMouseLeave={handleMouseLeaveCountry}
                                onClick={() => handleClickCountry(route.code)}
                              >
                                {icon}
                                {label}
                              </div>
                            );
                          })}
                        </div>

                        {/* Sổ địa chỉ */}
                        <div className='Address_Book'>
                          {shippingOrdersState.route.map((item: any, index: number) => (
                            <div>
                              <div
                                key={index}
                                style={{
                                  backgroundColor:
                                    activeAddress === item.address || hoveredAddress === item.address
                                      ? '#DFE3E9'
                                      : 'transparent',
                                }}
                                className='Style_Address_Book'
                                onMouseEnter={() => handleMouseEnterAddress(item.address)}
                                onMouseLeave={handleMouseLeaveAddress}
                                onClick={() => handleClickAddress(item.address, item.provinceName)}
                              >
                                <div style={{ display: 'flex', justifyContent: 'space-between', gap: '20px' }}>
                                  <div className='Address'>
                                    Address: <div>{item.address}</div>
                                  </div>
                                  <div style={{ display: 'flex', alignItems: 'flex-start' }}>
                                    <div
                                      className='Style_Button_Expand'
                                      onClick={() => handleClickExpandAddress(item.address)}
                                    >
                                      {expandedAddress === item.address ? 'Thu gọn' : 'Chi tiết'} <IconArrowDetail />
                                    </div>
                                  </div>
                                </div>
                                <div className='Post_Code'>
                                  PostCode: <div>{item.postalCode}</div>
                                </div>
                                <div className='Tel'>
                                  Tel: <div>{item.phoneNumber}</div>
                                </div>
                                {/* mở rộng chi tiết */}
                                {expandedAddress === item.address ? (
                                  <div className='ExpandedDetails'>
                                    <div style={{ display: 'flex', gap: '24px' }}>
                                      Prefecture: <div>{item.provinceName}</div>
                                    </div>
                                    <div style={{ display: 'flex', gap: '46px' }}>
                                      District: <div>{item.districtName}</div>
                                    </div>
                                    <div style={{ display: 'flex', gap: '60px' }}>
                                      Ward: <div>{item.wardName}</div>
                                    </div>
                                    <div>{item.accountOther}</div>
                                    <div>{item.accountTransport}</div>
                                  </div>
                                ) : null}
                              </div>
                            </div>
                          ))}
                        </div>
                      </div>
                      {/* Địa chỉ nhận hàng */}
                      <div className='Delivery_Address'>
                        <div className='Header'>
                          <div className='Font_Header'>Địa chỉ nhận hàng</div>
                          <div
                            style={{ color: '#0050A6', cursor: 'pointer' }}
                            onClick={() => {
                              toggleModalDeliveryAddress();
                            }}
                          >
                            Sổ địa chỉ <IconArrowDetail />
                          </div>
                        </div>
                        <Modal
                          open={activeDeliveyAddress}
                          large
                          onClose={() => {
                            toggleModalDeliveryAddress();
                          }}
                          title='Chọn địa chỉ nhận hàng'
                          primaryAction={{
                            content: 'Lưu địa chỉ được chọn',
                            onAction: handleSaveAddress,
                          }}
                          secondaryActions={[{
                            content: 'Thêm địa chỉ',
                            onAction: handleAddAddress,
                          }]}
                        >
                          {/* Modal chọn sổ địa chỉ */}
                          <Modal.Section>
                            <div className='Style_Modal_Choose_Address'>
                              {shippingOrdersState.address.map((add: any, index: number) => (
                                <div
                                  key={index}
                                  className='Item_Choose_Address'
                                  style={{
                                    backgroundColor: selectedAddress === add.id ? '#DFE3E9' : 'transparent',
                                    cursor: 'pointer',
                                  }}
                                  onClick={() => setSelectedAddress(add.id)}
                                >
                                  <div style={{ display: 'flex', gap: '22px' }}>
                                    Người nhận: <div>{add.name}</div>
                                  </div>
                                  <div style={{ display: 'flex', gap: '52px' }}>
                                    <div style={{whiteSpace: 'nowrap', display: 'flex'}}>Địa chỉ: </div> <div>{add.fullAddress}</div>
                                  </div>
                                  <div style={{ display: 'flex', gap: '12px' }}>
                                    Số điện thoại: <div>{add.phone}</div>
                                  </div>
                                </div>
                              ))}
                            </div>
                          </Modal.Section>
                        </Modal>
                        <div className='Content_Delivery_Address'>
                          {selectedAddress &&
                            (() => {
                              const selectedAdd = shippingOrdersState.address.find(
                                (add: any) => add.id === selectedAddress,
                              );
                              return selectedAdd ? (
                                <>
                                  <div style={{ display: 'flex', gap: '22px' }}>
                                    Người nhận: <div>{selectedAdd.name}</div>
                                  </div>
                                  <div style={{ display: 'flex', gap: '52px' }}>
                                  <div style={{whiteSpace: 'nowrap', display: 'flex'}}>Địa chỉ: </div> <div>{selectedAdd.fullAddress}</div>
                                  </div>
                                  <div style={{ display: 'flex', gap: '12px' }}>
                                    Số điện thoại: <div>{selectedAdd.phone}</div>
                                  </div>
                                </>
                              ) : null;
                            })()}
                        </div>
                      </div>
                    </div>
                    {/* Active */}
                    <div style={{ position: 'absolute', zIndex: '1' }}>
                      <div className='Style_Active_Form_Button'>
                        <div style={{ color: '#85C0FF', cursor: 'pointer' }} onClick={handleReset}>
                          Reset
                        </div>
                        <div style={{ display: 'flex', gap: '28px', alignItems: 'center' }}>
                          <div style={{ color: '#FFFFFF', cursor: 'pointer' }} onClick={handleCancel}>
                            <Link url='/don-hang-van-chuyen' removeUnderline monochrome>
                              Hủy
                            </Link>
                          </div>
                          <div className='Active_Button' onClick={() => handleSelectPageChange(1)}>
                            <Button>Tiếp tục</Button>
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>
                )}
                {selected === 1 && (
                  <div>
                    <div className='Shipping_Information'>
                      <div className='Header'>
                        <div className='Font'>Thông tin hàng hoá vận chuyển</div>
                        <div style={{ color: '#0050A6', cursor: 'pointer', whiteSpace: 'nowrap' }}>Tải file mẫu</div>
                      </div>

                      <div className='Enter_Tracking_Code'>
                        <div className='Label_Tracking_Code'>
                          <div>Nhập mã tracking</div>
                          <div style={{ flexGrow: '1' }}>
                            <input
                              style={{ outline: 'none', borderRadius: '4px' }}
                              type='text'
                              className='Input_Tracking'
                              placeholder='Nhập mã tracking...'
                              value={trackingCodeInput}
                              onChange={(e) => setTrackingCodeInput(e.target.value)}
                              // onKeyPress={handleKeyPress}
                            />
                          </div>
                        </div>
                        <div style={{ display: 'flex', alignItems: 'center', gap: '20px' }}>
                          <div className='Button_OK'>
                            <Button onClick={handleTrackingCodeSubmit}>OK</Button>
                          </div>
                          <div className='Button_Import'>
                            <IconImportExcel />
                            Import Excel
                          </div>
                        </div>
                      </div>

                      {trackingData.length > 0 && (
                       <div style={{overflow: 'auto'}}>
                         <div className='Style_Data_Table_Create_Order'>
                          <div className='Style_Heading_Group'>
                            <div className='Style_Heading' style={{ width: '10%' }}>
                              STT
                            </div>
                            <div className='Style_Heading' style={{ width: '20%' }}>
                              Mã tracking
                            </div>
                            <div className='Style_Heading' style={{ width: '15%' }}>
                              Total
                            </div>
                            <div className='Style_Heading' style={{ width: '20%' }}>
                              Dịch vụ cộng thêm
                            </div>
                            <div className='Style_Heading' style={{ width: '25%' }}>
                              Ghi chú
                            </div>
                            <div className='Style_Heading' style={{ width: '10%' }}>
                              Action
                            </div>
                          </div>
                          {trackingData.map((item, index) => {
                            const packs = item.packages;
                            let weightToShow: number = 0;
                            if (packs && packs.length > 0) {
                              packs.forEach((p) => (weightToShow = weightToShow + p.weight));
                            }
                            return (
                              <React.Fragment key={item.trackingCode}>
                                <div className='Style_Row'>
                                  <div className='Style_Cell' style={{ width: '10%' }}>
                                    {index + 1}
                                  </div>
                                  <div className='Style_Cell' style={{ width: '20%' }}>
                                    <input className='Input_Tracking_Code' value={item.trackingCode} readOnly />
                                  </div>
                                  <div className='Style_Cell' style={{ width: '15%' }}>
                                    <div
                                      className='Style_Total'
                                      style={{
                                        fontWeight: '700',
                                        backgroundColor: '#EFF1F4',
                                        padding: '12px 16px',
                                        display: 'inline-flex',
                                      }}
                                    >
                                      {item.packages.length} Packages | {weightToShow} kg
                                    </div>
                                  </div>
                                  <div className='Style_Cell' style={{ width: '20%' }}>
                                    <div
                                      className='Style_Additional_Services'
                                      style={{
                                        border: '1px solid #D1D5DB',
                                        borderRadius: '4px',
                                        display: 'flex',
                                        gap: '20px',
                                        padding: '12px',
                                        justifyContent: 'space-between',
                                        alignItems: 'center',
                                        maxWidth: '400px',
                                        verticalAlign: 'center',
                                      }}
                                    >
                                      {item.services.length > 0 ? (
                                        <div style={{ display: 'flex', gap: '8px', flexWrap: 'wrap' }}>
                                          {services
                                            .filter((service: any) => item.services.includes(service.id))
                                            .map((service: any, index: number) => (
                                              <div key={index} className='Style_Service'>
                                                {service.name}
                                              </div>
                                            ))}
                                        </div>
                                      ) : (
                                        <div>Chọn dịch vụ</div>
                                      )}
                                      <div className='Style_Popover_Button'>
                                        <Popover
                                          active={activePopover === item.trackingCode}
                                          activator={
                                            <div className='Style_Button_Popover'>
                                              <Button
                                                icon={IconArrowDropExpand}
                                                onClick={() => handleTogglePopover(item.trackingCode)}
                                              />
                                            </div>
                                          }
                                          onClose={() => setActivePopover(null)}
                                          preferredAlignment='right'
                                          preferredPosition='below'
                                        >
                                          <div className='Popover_Content'>
                                            <div style={{ display: 'flex', flexDirection: 'column', gap: '8px' }}>
                                              {services.map((service: any) => (
                                                <Checkbox
                                                  key={service.id}
                                                  label={service.name}
                                                  checked={item.services.includes(service.id)}
                                                  onChange={() => handleCheckboxChange(service.id, item.trackingCode)}
                                                />
                                              ))}
                                            </div>
                                            <div
                                              style={{
                                                display: 'flex',
                                                justifyContent: 'flex-start',
                                                marginTop: '12px',
                                              }}
                                            >
                                              <Button onClick={handleApplySelection}>OK</Button>
                                            </div>
                                          </div>
                                        </Popover>
                                      </div>
                                    </div>
                                  </div>
                                  {/* Ghi chú */}
                                  <div className='Style_Cell' style={{ width: '25%' }}>
                                    <input className='Input_Tracking_Code' placeholder='Nhập ghi chú...'></input>
                                  </div>
                                  <div className='Style_Cell' style={{ width: '10%' }}>
                                    <div style={{ display: 'flex', gap: '16px', justifyContent: 'center' }}>
                                      <div
                                        className='Style_Icon_Edit_Delete'
                                        onClick={() => handleEdit(item.trackingCode)}
                                      >
                                        <IconEdit />
                                      </div>
                                      <div className='Style_Icon_Edit_Delete' onClick={() => handleDelete(index)}>
                                        <IconDelete />
                                      </div>
                                    </div>
                                  </div>
                                </div>

                                {expandedItem === item.trackingCode && (
                                  <div
                                    style={{
                                      margin: '16px 0',
                                      border: '1px dashed #D1D5DB',
                                      width: '100%',
                                    }}
                                  >
                                    <div
                                      style={{
                                        display: 'flex',
                                        padding: '16px 20px',
                                        justifyContent: 'space-between',
                                        backgroundColor: '#0B3558',
                                        color: '#FFFFFF',
                                      }}
                                    >
                                      <div style={{ display: 'flex', gap: '16px' }}>
                                        Tracking No. <div>{item.trackingCode}</div>
                                      </div>
                                      <div>
                                        {item.packages.length} pkg | {weightToShow} kg
                                      </div>
                                    </div>

                                    {item.packages.map((pkg, index) => (
                                      <div key={index} className='Package_Item'>
                                        <div
                                          style={{
                                            display: 'flex',
                                            borderBottom: '1px dashed #D1D5DB',
                                            justifyContent: 'space-between',
                                            borderTop: '1px dashed #D1D5DB',
                                          }}
                                        >
                                          <div style={{ display: 'flex' }}>
                                            <div
                                              style={{
                                                borderRight: '1px dashed #D1D5DB',
                                                padding: '20px',
                                                borderLeft: 'unset',
                                                display: 'flex',
                                                alignItems: 'center',
                                              }}
                                            >
                                              <div
                                                className='Icon_Arrow_Expand'
                                                onClick={() => handleTogglePackageDetails(index)}
                                              >
                                                {expandedItemPackage === index ? <IconArrowUp /> : <IconArrowDown />}
                                              </div>
                                            </div>
                                            <div
                                              style={{
                                                padding: '20px',
                                                display: 'flex',
                                                alignItems: 'center',
                                                fontWeight: '700',
                                              }}
                                            >
                                              Package #{index + 1}
                                            </div>
                                          </div>
                                          <div style={{ padding: '20px' }}>
                                            {index === item.packages.length - 1 ? (
                                              <Button onClick={() => handleAddPackage(item.trackingCode)}>
                                                Thêm Package
                                              </Button>
                                            ) : (
                                              <Button onClick={() => handleRemovePackage(item.trackingCode, index)}>
                                                Xóa kiện hàng
                                              </Button>
                                            )}
                                          </div>
                                        </div>

                                        {expandedItemPackage === index && (
                                          <table className='Table_Package_Detail'>
                                            <tbody>
                                              <tr>
                                                <td style={{ width: '60px', borderLeft: 'unset' }}></td>
                                                <td>#</td>
                                                <td>Tên sản phẩm</td>
                                                <td>Loại sản phẩm</td>
                                                <td>Số lượng</td>
                                                <td>Trọng lượng (kg)</td>
                                                <td>Giá trị</td>
                                                <td> </td>
                                              </tr>

                                              {pkg.packageProducts.map((p: any, i: number) => {
                                                return (
                                                  <tr key={i}>
                                                    <td ></td>
                                                    <td>{i + 1}</td>
                                                    <td
                                                      style={{
                                                        display: 'flex',
                                                        alignItems: 'center',
                                                        justifyContent: 'center',
                                                      }}
                                                    >
                                                      {expandedItem === item.trackingCode &&
                                                      expandedItemPackage === index &&
                                                      completedProducts.includes(i) ? (
                                                        <p>{p.name}</p>
                                                      ) : (
                                                        <input
                                                          type='text'
                                                          value={p.name}
                                                          onChange={(e) =>
                                                            setNameForProduct(
                                                              e.target.value,
                                                              i,
                                                              index,
                                                              item.trackingCode,
                                                            )
                                                          }
                                                          className='Style_Input'
                                                        />
                                                      )}
                                                    </td>
                                                    <td>
                                                      {expandedItem === item.trackingCode &&
                                                      expandedItemPackage === index &&
                                                      completedProducts.includes(i) ? (
                                                        <p>{p.nameCustom}</p>
                                                      ) : (
                                                        <select
                                                          value={p.nameCustom}
                                                          onChange={(e) =>
                                                            setTypeForProduct(
                                                              e.target.value,
                                                              i,
                                                              index,
                                                              item.trackingCode,
                                                            )
                                                          }
                                                          style={{ maxWidth: '200px' }}
                                                        >
                                                          <option style={{ maxWidth: '100px' }}>
                                                            Chọn danh mục sản phẩm
                                                          </option>
                                                          {packages?.map((p: any) => (
                                                            <option style={{ maxWidth: '100px' }}>{p.name}</option>
                                                          ))}
                                                        </select>
                                                      )}
                                                    </td>
                                                    <td>
                                                      {expandedItem === item.trackingCode &&
                                                      expandedItemPackage === index &&
                                                      completedProducts.includes(i) ? (
                                                        <p>{`SL: ${p.qty}`}</p>
                                                      ) : (
                                                        <input
                                                          value={p.qty}
                                                          onChange={(e) =>
                                                            setAmountForProduct(
                                                              e.target.value,
                                                              i,
                                                              index,
                                                              item.trackingCode,
                                                            )
                                                          }
                                                          type='number'
                                                          className='Style_Input'
                                                        />
                                                      )}
                                                    </td>
                                                    <td>
                                                      {expandedItem === item.trackingCode &&
                                                      expandedItemPackage === index &&
                                                      completedProducts.includes(i) ? (
                                                        <p>{`TL: ${p.weight}`}</p>
                                                      ) : (
                                                        <input
                                                          type='number'
                                                          value={p.weight}
                                                          onChange={(e) =>
                                                            setWeightForProduct(
                                                              e.target.value,
                                                              i,
                                                              index,
                                                              item.trackingCode,
                                                            )
                                                          }
                                                          className='Style_Input'
                                                        />
                                                      )}
                                                    </td>
                                                    <td>
                                                      <div
                                                        style={{
                                                          display: 'flex',
                                                          alignItems: 'center',
                                                          justifyContent: 'center',
                                                        }}
                                                      >
                                                        {expandedItem === item.trackingCode &&
                                                        expandedItemPackage === index &&
                                                        completedProducts.includes(i) ? (
                                                          <p>{`${p.price}${moneyIcon()}`}</p>
                                                        ) : (
                                                          <input
                                                            type='number'
                                                            value={p.price}
                                                            onChange={(e) =>
                                                              setPriceForProduct(
                                                                e.target.value,
                                                                i,
                                                                index,
                                                                item.trackingCode,
                                                              )
                                                            }
                                                            className='Style_Input'
                                                            style={{ width: '80px' }}
                                                          />
                                                        )}
                                                      </div>
                                                    </td>
                                                    <td>
                                                      <div
                                                        style={{
                                                          display: 'flex',
                                                          gap: '8px',
                                                          alignItems: 'center',
                                                          justifyContent: 'center',
                                                        }}
                                                      >
                                                        <div
                                                          className='Style_Icon_Edit_Delete'
                                                          onClick={() =>
                                                            handleDeleteProduct(i, index, item.trackingCode)
                                                          }
                                                        >
                                                          <IconDelete />
                                                        </div>
                                                        <div
                                                          className='Style_Icon_Edit_Delete'
                                                          onClick={() => {
                                                            handleAddProduct(index, item.trackingCode);
                                                            handleSaveProduct(item.trackingCode, index, i);
                                                          }}
                                                        >
                                                          <IconAddProduct />
                                                        </div>
                                                      </div>
                                                    </td>
                                                  </tr>
                                                );
                                              })}
                                            </tbody>
                                          </table>
                                        )}
                                      </div>
                                    ))}
                                  </div>
                                )}
                              </React.Fragment>
                            );
                          })}
                        </div>
                       </div>
                      )}
                    </div>

                    <div style={{ position: 'absolute' }}>
                      <div className='Create_Input_Tracking_Code'>
                        <div style={{ color: '#85C0FF', whiteSpace: 'nowrap' }}>{trackingData.length} Tracking</div>
                        <div style={{ display: 'flex', gap: '20px', alignItems: 'center' }}>
                          <div style={{ color: '#FFFFFF', cursor: 'pointer' }} onClick={handleSave}>
                            Lưu
                          </div>
                          <div
                            className='Active_Button'
                            onClick={() => {
                              let packs: Array<any> = [];
                              let products: Array<any> = [];
                              trackingData.forEach((t) => {
                                const packages = t.packages;
                                if (packages.length > 0) {
                                  packs = packs.concat(packages);
                                }
                              });
                              if (packs.length > 0) {
                                packs.forEach((p) => {
                                  const productsFind = p.packageProducts;
                                  if (productsFind.length > 0) {
                                    products = products.concat(productsFind);
                                  }
                                });
                                if (products.length > 0) {
                                  let isDone = true;
                                  products.forEach((product) => {
                                    if (
                                      product.name.trim() === '' ||
                                      product.nameCustom.trim() === '' ||
                                      product.qty <= 0 ||
                                      product.weight <= 0 ||
                                      product.price <= 0
                                    ) {
                                      isDone = false;
                                    }
                                  });
                                  if (isDone) {
                                    handleSelectPageChange(2);
                                  } else {
                                    showToast('Hãy nhập đủ thông tin tất cả sản phẩm', 'warning');
                                  }
                                } else {
                                  showToast('Không có sản phẩm nào được chọn', 'warning');
                                }
                              } else {
                               showToast('Không có kiện hàng nào', 'warning')
                              }
                            }}
                          >
                            <Button>Tiếp tục</Button>
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>
                )}

                {selected === 2 && (
                  <div>
                    <FormLayout>
                      <FormLayout.Group>
                        <table className='Info_Table_Shipping_Orders'>
                          <thead>
                            <tr>
                              <th colSpan={2}>Thông tin vận chuyển</th>
                            </tr>
                          </thead>
                          <tbody>
                            <tr>
                              <td style={{ width: '30%' }}>Tuyến vận chuyển</td>
                              <td style={{ width: '70%' }}>{activeCountry}</td>
                            </tr>
                            <tr>
                              <td>Kho nhận hàng</td>
                              <td>{provinceName}</td>
                            </tr>
                          </tbody>
                        </table>

                        <table className='Info_Table_Shipping_Orders'>
                          <thead>
                            <tr>
                              <th colSpan={2}>Thông tin giao hàng</th>
                            </tr>
                          </thead>
                          <tbody>
                            {selectedAddress &&
                              (() => {
                                const selectedAdd = shippingOrdersState.address.find(
                                  (add: any) => add.id === selectedAddress,
                                );
                                return selectedAdd ? (
                                  <>
                                    <tr>
                                      <td style={{ width: '30%' }}>Người nhận</td>
                                      <td style={{ width: '70%' }}>
                                        {selectedAdd.name} - {selectedAdd.phone}
                                      </td>
                                    </tr>
                                    <tr>
                                      <td>Địa chỉ</td>
                                      <td>{selectedAdd.fullAddress}</td>
                                    </tr>
                                  </>
                                ) : null;
                              })()}
                          </tbody>
                        </table>
                      </FormLayout.Group>
                    </FormLayout>
                    {/* danh sách tracking */}
                    <div className='Data_Table_Verify_Request'>
                      <DataTable
                        columnContentTypes={['text', 'text', 'text', 'text', 'text']}
                        headings={['Danh sách tracking', '', '', '', '']}
                        rows={rows2}
                      />
                    </div>
                    <div>
                      <div className='Style_Payment_Method'>
                        <div className='Style_Item_Payment' style={ paymentMethod == "COD" ? {backgroundColor: "#A91116"} : {}} onClick={() => setPaymentMethod("COD")}>COD - Thanh toán khi nhận hàng</div>
                        <div className='Style_Item_Payment' style={ paymentMethod == "WALLET" ? {backgroundColor: "#A91116"} : {}} onClick={() => setPaymentMethod("WALLET")}>Thanh toán bằng ví</div>
                        <div className='Style_Item_Payment' style={ paymentMethod == "BANK" ? {backgroundColor: "#A91116"} : {}} onClick={() => setPaymentMethod("BANK")}>Chuyển khoản ngân hàng</div>
                      </div>
                    </div>
                    {/* Active */}
                    <div style={{ position: 'absolute' }}>
                      <div className='Verify_Request'>
                        <div style={{ color: '#85C0FF' }}> Tracking</div>
                        <div style={{ display: 'flex', gap: '28px', alignItems: 'center' }}>
                          <div style={{ color: '#FFFFFF', cursor: 'pointer' }} onClick={handleCancel2}>
                            <Link url='/don-hang-van-chuyen' removeUnderline monochrome>
                              Hủy
                            </Link>
                          </div>
                          <div
                            className='Active_Button'
                            onClick={() => {
                              handleSelectPageChange(3);
                              handleRequest();
                            }}
                          >
                            <Button>Gửi yêu cầu</Button>
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>
                )}
                {selected === 3 && (
                  <div className='Verify_Reuquest_Successed'>
                    {/* trạng thái thành công */}
                    <div className='Icon_Successed'>
                      <div>
                        <IconSuccessed />
                      </div>
                      <div className='Title_Verify_Request'>
                        <div className='Font_Title'>Quý khách đã tạo yêu cầu thành công</div>
                        <div>(11:25 - Thứ 6, ngày 12/08/2022)</div>
                      </div>
                    </div>

                    {/* Danh sách tracking */}
                    <div style={{ position: 'relative', marginTop: '68px' }}>
                      <div className='Data_Table_Verify_Request'>
                        <DataTable
                          columnContentTypes={['text', 'text', 'text', 'text', 'text']}
                          headings={['Danh sách tracking', '', '', '', '']}
                          rows={rows2}
                        />
                      </div>

                      <div className='Icon_Print_Information'>
                        <IconPrintSuccessed /> In Thông tin
                      </div>
                    </div>

                    {/* Quản lý & tạo yêu cầu */}
                    <div
                      style={{
                        display: 'flex',
                        justifyContent: 'center',
                        alignItems: 'center',
                        gap: '20px',
                        marginTop: '48px',
                        flexWrap: 'wrap',
                      }}
                    >
                      <div className='Button_Order_Management'>
                        <Button url='/don-hang-van-chuyen' monochrome removeUnderline>
                          Quản lý đơn hàng
                        </Button>
                      </div>
                      <div className='Button_Create_Request' onClick={() => handleSelectPageChange(0)}>
                        <Button>Tạo yêu cầu đơn mới</Button>
                      </div>
                    </div>
                  </div>
                )}
              </LegacyCard.Section>
            </LegacyCard>
          </Layout.Section>
        </Layout>
      </Page>
    </div>
  );
};

export default CreateShippingOrders;

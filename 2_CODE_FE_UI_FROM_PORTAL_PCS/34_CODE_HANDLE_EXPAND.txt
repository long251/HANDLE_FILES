 // Handle Expand
  const [expandedServiceIndexes, setExpandedServiceIndexes] = useState<number[]>([]);
  const [selectedServices, setSelectedServices] = useState<{ [key: number]: string[] }>({});

  const toggleExpandService = (index: number) => {
    if (expandedServiceIndexes.includes(index)) {
      setExpandedServiceIndexes(expandedServiceIndexes.filter((item) => item !== index));
    } else {
      setExpandedServiceIndexes([...expandedServiceIndexes, index]);
    }
  };

  const handleServiceChange = (index: number, selected: string[]) => {
    setSelectedServices((prevSelectedServices) => ({
      ...prevSelectedServices,
      [index]: selected,
    }));
  };

  const handleOkClick = (index: number) => {
    console.log('Selected services:', selectedServices[index]);
    setExpandedServiceIndexes(expandedServiceIndexes.filter((item) => item !== index));
  };

  const rows = fakeDataTrackingCode.map((item, index) => {
    const isExpanded = expandedServiceIndexes.includes(index);
    const servicesToShow = selectedServices[index] || [];


    return [
      index + 1,
      <input type='text' defaultValue={item.trackingCode} className='Input_Tracking_Code' />,
      <div style={{ display: 'flex', alignItems: 'center' }}>
        <input
          type='text'
          defaultValue={item.weight}
          style={{
            borderRadius: '4px 0 0 4px',
          }}
          className='Input_Tracking_Code'
        />
        <div className='Unit_Input_Tracking_Code'>kg</div>
      </div>,

<div key={`services-${index}`} className='Service_Select_Tag'>
<div className='Wrapper_Select_Tag'>
  {servicesToShow.map((service, idx) => (
    <div key={idx} className='SelectTag_Item'>
      {service}
    </div>
  ))}
</div>
<Popover
  active={isExpanded}
  activator={
    <div style={{ display: 'flex', alignItems: 'center', cursor: 'pointer' }} onClick={() => toggleExpandService(index)}>
      More options
    </div>
  }
  onClose={() => setExpandedServiceIndexes(expandedServiceIndexes.filter((item) => item !== index))}
>
  <Popover.Pane>
    <div style={{ padding: '16px' }}>
      {item.service.map((service, idx) => (
        <div key={idx} style={{ marginBottom: '8px' }}>
          <Checkbox
            label={service}
            checked={servicesToShow.includes(service)}
            onChange={(checked) => {
              const updatedServices = checked
                ? [...servicesToShow, service]
                : servicesToShow.filter((s) => s !== service);
              handleServiceChange(index, updatedServices);
            }}
          />
        </div>
      ))}
      <div style={{ display: 'flex', justifyContent: 'flex-end', marginTop: '16px' }}>
        <Button onClick={() => handleOkClick(index)}>OK</Button>
      </div>
    </div>
  </Popover.Pane>
</Popover>
</div>,

      <input type='text' defaultValue={item.note} className='Input_Note' />,
      <div style={{ display: 'flex', gap: '16px', justifyContent: 'center' }}>
        <div
          className='Style_Icon_Edit_Delete'
          onClick={() => {
            handleEdit(item);
            toggleModalE();
          }}
        >
          <IconEdit />
        </div>
        <div className='Style_Icon_Edit_Delete' onClick={() => handleDelete(item)}>
          <IconDelete />
        </div>
      </div>,
    ];
  });
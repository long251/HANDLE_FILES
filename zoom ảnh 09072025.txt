import { useState, useRef, useEffect } from "react";
import { createPortal } from "react-dom";

type Props = {
  url: string;
  alt: string;
};

export default function ImagePreview({ url, alt }: Props) {
  const [open, setOpen] = useState(false);
  const [scale, setScale] = useState(1);
  const [rotation, setRotation] = useState(0);

  const imgRef = useRef<HTMLImageElement>(null);
  const dragging = useRef(false);
  const dragStart = useRef({ x: 0, y: 0 });
  const wasDragging = useRef(false);

  const openModal = () => setOpen(true);
  const closeModal = () => {
    setOpen(false);
    setScale(1);
    setRotation(0);
    dragging.current = false;
  };

  const handleWheel = (e: React.WheelEvent) => {
    e.preventDefault();
    const delta = e.deltaY > 0 ? -0.1 : 0.1;
    setScale((prev) => Math.min(Math.max(prev + delta, 1), 5));
  };

  useEffect(() => {
    const handleKey = (e: KeyboardEvent) => {
      if (e.key === "Escape") closeModal();
    };

    if (open) {
      document.body.style.overflow = "hidden";
      window.addEventListener("keydown", handleKey);
    }

    return () => {
      document.body.style.overflow = "";
      window.removeEventListener("keydown", handleKey);
    };
  }, [open]);

  return (
    <>
      <img
        src={url}
        alt={alt}
        className="w-full h-[500px] object-contain rounded-lg cursor-zoom-in"
        onClick={openModal}
      />

      {open &&
        createPortal(
          <div
            className="fixed inset-0 z-[9999] bg-black/30 flex items-center justify-center"
            onClick={() => {
              if (wasDragging.current) {
                wasDragging.current = false;
                return;
              }
              closeModal();
            }}
          >
            <div
              className="relative w-full h-full flex items-center justify-center overflow-hidden select-none"
              onWheel={handleWheel}
            >
              <img
                onClick={(e) => e.stopPropagation()}
                ref={imgRef}
                src={url}
                alt={alt}
                draggable={false}
                onMouseDown={(e) => {
                  dragging.current = true;
                  wasDragging.current = false;
                  dragStart.current = { x: e.clientX, y: e.clientY };
                  imgRef.current!.style.transition = "none";
                  e.stopPropagation();
                }}
                onMouseMove={(e) => {
                  if (!dragging.current || !imgRef.current || scale <= 1)
                    return;
                  const dx = e.clientX - dragStart.current.x;
                  const dy = e.clientY - dragStart.current.y;
                  imgRef.current.style.transform = `translate(calc(-50% + ${dx}px), calc(-50% + ${dy}px)) scale(${scale}) rotate(${rotation}deg)`;
                  wasDragging.current = true;
                  e.stopPropagation();
                }}
                onMouseUp={(e) => {
                  dragging.current = false;
                  if (imgRef.current) {
                    imgRef.current.style.transition = "transform 0.2s ease-out";
                    imgRef.current.style.transform = `translate(-50%, -50%) scale(${scale}) rotate(${rotation}deg)`;
                  }
                  e.stopPropagation();
                }}
                onMouseLeave={(e) => {
                  dragging.current = false;
                  if (imgRef.current) {
                    imgRef.current.style.transition = "transform 0.2s ease-out";
                    imgRef.current.style.transform = `translate(-50%, -50%) scale(${scale}) rotate(${rotation}deg)`;
                  }
                  e.stopPropagation();
                }}
                style={{
                  position: "absolute",
                  top: "50%",
                  left: "50%",
                  height: "100vh",
                  width: "auto",
                  maxWidth: "100%",
                  transform: `translate(-50%, -50%) scale(${scale}) rotate(${rotation}deg)`,
                  transformOrigin: "center",
                  transition: "transform 0.2s ease-out",
                  cursor: scale > 1 ? "grab" : "default",
                }}
              />
              <div
                className="fixed top-4 right-4 z-[10000] flex gap-2"
                onClick={(e) => e.stopPropagation()}
              >
                <button
                  onClick={(e) => {
                    e.stopPropagation();
                    setScale((s) => Math.min(s + 0.2, 5));
                  }}
                  className="bg-white/80 px-2 py-1 rounded hover:bg-white"
                >
                  üîç+
                </button>
                <button
                  onClick={(e) => {
                    e.stopPropagation();
                    setScale((s) => Math.max(s - 0.2, 1));
                  }}
                  className="bg-white/80 px-2 py-1 rounded hover:bg-white"
                >
                  üîç‚àí
                </button>
                <button
                  onClick={(e) => {
                    e.stopPropagation();
                    setRotation((r) => r - 90);
                  }}
                  className="bg-white/80 px-2 py-1 rounded hover:bg-white"
                >
                  ‚ü≤
                </button>
                <button
                  onClick={(e) => {
                    e.stopPropagation();
                    setRotation((r) => r + 90);
                  }}
                  className="bg-white/80 px-2 py-1 rounded hover:bg-white"
                >
                  ‚ü≥
                </button>
                <button
                  onClick={(e) => {
                    e.stopPropagation();
                    closeModal();
                  }}
                  className="bg-red-500 text-white px-2 py-1 rounded hover:bg-red-600"
                >
                  ‚úï
                </button>
              </div>
            </div>
          </div>,
          document.body
        )}
    </>
  );
}

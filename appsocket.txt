import React, { useEffect, useState } from 'react';
import { io } from 'socket.io-client';

const SOCKET_SERVER_URL = 'http://localhost:3001'; // Đảm bảo URL của backend WebSocket là chính xác

const App = () => {
  const [messages, setMessages] = useState([]);
  const [messageInput, setMessageInput] = useState('');
  const [userId, setUserId] = useState('');
  const [connectionStatus, setConnectionStatus] = useState('Disconnected');
  const socket = React.useRef(null);

  useEffect(() => {
    // Khởi tạo kết nối socket
    socket.current = io(SOCKET_SERVER_URL, {
      transports: ['websocket'],
      reconnectionAttempts: 3,
    });

    // Lắng nghe sự kiện 'connect' để kiểm tra kết nối thành công
    socket.current.on('connect', () => {
      setConnectionStatus('Connected');
      console.log('Connected to WebSocket server!');
    });

    // Lắng nghe sự kiện 'new_message' từ server
    socket.current.on('new_message', (data) => {
      setMessages((prevMessages) => [...prevMessages, data]);
      console.log('Message from server:', data);  // Log tin nhắn từ server
    });

    // Lắng nghe sự kiện 'disconnect' để biết khi nào mất kết nối
    socket.current.on('disconnect', () => {
      setConnectionStatus('Disconnected');
      console.log('Disconnected from WebSocket server');
    });

    // Clean up on component unmount
    return () => {
      socket.current.disconnect();
    };
  }, []);

  const handleSendMessage = () => {
    if (messageInput.trim() && socket.current) {
      socket.current.emit('message', messageInput); // Gửi tin nhắn tới server
      setMessageInput('');
    }
  };

  const handleSetUserId = () => {
    if (userId.trim() && socket.current) {
      socket.current.emit('user_id', { user_id: userId });
    }
  };

  return (
    <div style={{ padding: '20px' }}>
      <h1>Socket.IO React Client</h1>

      <div>
        <label htmlFor="userId">Set User ID:</label>
        <input
          type="text"
          id="userId"
          value={userId}
          onChange={(e) => setUserId(e.target.value)}
        />
        <button onClick={handleSetUserId}>Set</button>
      </div>

      <div>
        <label htmlFor="messageInput">Message:</label>
        <input
          type="text"
          id="messageInput"
          value={messageInput}
          onChange={(e) => setMessageInput(e.target.value)}
        />
        <button onClick={handleSendMessage}>Send</button>
      </div>

      <h2>Connection Status: {connectionStatus}</h2>

      <h2>Messages</h2>
      <ul>
        {messages.map((msg, index) => (
          <li key={index}>{JSON.stringify(msg)}</li>
        ))}
      </ul>
    </div>
  );
};

export default App;

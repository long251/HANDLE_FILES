logic
-----
const parseSentTime = (sentTime: string) => {
    // Kiểm tra và xử lý chuỗi ngày giờ
    const [timePart, datePart] = sentTime.split(' '); // Tách giờ và ngày
    const [day, month, year] = datePart.split('/'); // Tách ngày, tháng, năm
    return new Date(`${year}-${month}-${day}T${timePart}`); // Chuyển về định dạng chuẩn
  };
=========================================================
return
------
        {activeChat ? (
          <>
            <div className='Content'>
              <div className='Header_Mess_ChatPage'>
                <div
                  style={{
                    display: 'flex',
                    gap: '12px',
                  }}>
                  <ChatAvatar
                    src={activeChatMetadata.avatar}
                    name={activeChatMetadata.name}
                  />
                  <div
                    style={{
                      display: 'flex',
                      justifyContent: 'space-between',
                      flexDirection: 'column',
                    }}>
                    <div style={{ fontWeight: '700', fontSize: '16px' }}>
                      {activeChatMetadata.name}
                    </div>
                    <div
                      style={{
                        display: 'flex',
                        gap: '20px',
                      }}>
                      {activeChatMetadata.staffName ? (
                        <div className='Tag_Zalo'>
                          <Tag1Zalo />{' '}
                          <div style={{ marginTop: '2px' }}>
                            CSKH: {activeChatMetadata.staffName}
                          </div>
                        </div>
                      ) : null}
                      {activeChatMetadata.shipquocteCustomerCode ? (
                        <div className='Tag_Zalo'>
                          <Tag2Zalo />{' '}
                          <div style={{ marginTop: '2px' }}>
                            {activeChatMetadata.shipquocteCustomerCode}
                          </div>
                        </div>
                      ) : null}
                    </div>
                  </div>
                </div>

                <div style={{ fontStyle: 'italic', fontSize: '12px' }}>
                  Cập nhật lần cuối lúc{' '}
                  {formatDateTime(activeChatMetadata.sent_time)}
                </div>
              </div>
              <div className='Messages' id='messageScrollDiv'>
                <InfiniteScroll
                  className={'MessageScroll'}
                  scrollThreshold={0.8}
                  inverse={true}
                  dataLength={messages.length}
                  next={loadMoreMessage}
                  hasMore={chatState.zalo_chat_has_next_page}
                  loader={
                    <Skeleton
                      paragraph={{ rows: 2 }}
                      loading={messages.length >= 10}
                    />
                  }
                  scrollableTarget='messageScrollDiv'>
                  <List
                    loading={chatState.zalo_chat_loading}
                    dataSource={[...messages].reverse()}
                    renderItem={(item: any, index: number) => {
                      const prevMessage = messages[index - 1];

                      // Chuyển đổi sent_time sang đối tượng Date
                      const itemDate = parseSentTime(item.sent_time);
                      const prevDate = prevMessage
                        ? parseSentTime(prevMessage.sent_time)
                        : null;

                      // Kiểm tra và log itemDate
                      console.log('itemDate:', itemDate);

                      const currentDay = itemDate.toLocaleDateString();
                      const prevDay = prevDate
                        ? prevDate.toLocaleDateString()
                        : null;

                      const currentTime = itemDate.toLocaleTimeString([], {
                        hour: '2-digit',
                        minute: '2-digit',
                        second: '2-digit',
                      });

                      const shouldShowDate =
                        !prevMessage || currentDay !== prevDay;

                      const formattedDate =
                        currentDay === new Date().toLocaleDateString()
                          ? 'Hôm nay'
                          : currentDay ===
                              new Date(
                                Date.now() - 86400000,
                              ).toLocaleDateString()
                            ? 'Hôm qua'
                            : itemDate.toLocaleDateString('vi-VN', {
                                day: '2-digit',
                                month: '2-digit',
                                year: 'numeric',
                              });

                      let text = '';
                      if (item.type == 'text') {
                        text = item.message;
                      }

                      let images = [];
                      if (item.type == 'sticker' || item.type == 'photo') {
                        images.push(item.url);
                      }

                      let links = [];
                      if (item.type == 'link') {
                        links = item.links;
                      }

                      let files = [];
                      if (item.type == 'nosupport' && item.local_files) {
                        for (let i = 0; i < item.local_files.length; i++) {
                          files.push({
                            name: `Tệp: ${item.local_files[i].file_name}`,
                            file_url: item.local_files[i].file_url,
                          });
                        }
                      }

                      return (
                        <>
                          {shouldShowDate && (
                            <div className='DateDivider'>{formattedDate}</div>
                          )}
                          <List.Item
                            className={`ListMessageItem ${item.from_id == pageOaId ? 'ListMessageItem--Right' : ''}`}
                            id={`Message-${item.message_id}`}
                            key={item.message_id}>
                            <List.Item.Meta
                              className={'ListMessageItem__Content'}
                              avatar={
                                <ChatAvatar
                                  src={item.from_avatar}
                                  name={item.from_display_name}
                                  size={'small'}
                                />
                              }
                              title={<span>{item.from_display_name}</span>}
                              description={
                                <div className={'MessageContentWrapper'}>
                                  <div className={'MessageContent'}>
                                    <span className={'MessageAttachment'}>
                                      {files.map((atm: any, index: number) => {
                                        return (
                                          <a
                                            key={index}
                                            href={atm.file_url}
                                            target={'_blank'}>
                                            {atm.name}
                                          </a>
                                        );
                                      })}
                                    </span>
                                    <span className={'MessageLink'}>
                                      {links.map((link: any, idx: number) => {
                                        if (link.url == 'https://zaloapp.com') {
                                          let descriptionJson = JSON.parse(
                                            link.description,
                                          );
                                          return (
                                            <div className={'ZaloContactCard'}>
                                              <img
                                                className={'ContactAvatar'}
                                                src={link.thumb}
                                                alt={link.title}
                                              />
                                              <img
                                                onClick={() =>
                                                  dispatch(
                                                    modalAction.openModal({
                                                      title:
                                                        descriptionJson[
                                                          'phone'
                                                        ],
                                                      type: 'picture',
                                                      data: {
                                                        src: descriptionJson[
                                                          'qrCodeUrl'
                                                        ],
                                                        alt: '',
                                                      },
                                                    }),
                                                  )
                                                }
                                                className={'ContactQr'}
                                                src={
                                                  descriptionJson['qrCodeUrl']
                                                }
                                                alt=''
                                              />
                                              <div className={'ContactPhone'}>
                                                {descriptionJson['phone']}
                                              </div>
                                            </div>
                                          );
                                        }
                                        return (
                                          <div className={'ZaloLinkThumb'}>
                                            {link.thumb ? (
                                              <img
                                                onClick={() =>
                                                  dispatch(
                                                    modalAction.openModal({
                                                      title: link.title,
                                                      type: 'picture',
                                                      data: {
                                                        src: link.thumb,
                                                        alt: '',
                                                      },
                                                    }),
                                                  )
                                                }
                                                className={'ContactQr'}
                                                src={link.thumb}
                                                alt=''
                                              />
                                            ) : null}
                                            <a
                                              key={idx}
                                              href={link.url}
                                              target={'_blank'}>
                                              {link.title}
                                            </a>
                                          </div>
                                        );
                                      })}
                                    </span>
                                    <span className={'MessageGallery'}>
                                      {images.map((src) => (
                                        <img
                                          onClick={() => {
                                            dispatch(
                                              modalAction.openModal({
                                                title: '',
                                                type: 'picture',
                                                data: {
                                                  src: src,
                                                  alt: '',
                                                },
                                              }),
                                            );
                                          }}
                                          src={src}
                                          alt={src}
                                        />
                                      ))}
                                    </span>
                                    <span
                                      className={'MessageText'}
                                      dangerouslySetInnerHTML={{
                                        __html: transformTextWithLinks(text),
                                      }}></span>
                                    <div className={'MessageTime'}>
                                      {item.sent_time}
                                    </div>
                                  </div>
                                </div>
                              }
                            />
                          </List.Item>
                        </>
                      );
                    }}
                  />
                </InfiniteScroll>
              </div>
              <div className={'ChatReply'}>
                <Input.TextArea
                  disabled={loadingSend}
                  value={text}
                  onChange={(e) => setText(e.target.value)}
                  placeholder='Nhập nội dung tin nhắn...'
                  autoSize={{ minRows: 1, maxRows: 4 }}
                  onPressEnter={(e) => {
                    if (!e.shiftKey && e.code == 'Enter') {
                      e.preventDefault();
                      handleSendMessage();
                    }
                  }}
                />

                <Upload
                  accept={'image/*'}
                  multiple
                  beforeUpload={() => false}
                  onChange={handleAttachmentChange}
                  fileList={attachments.map((file) => ({
                    uid: file.name,
                    name: file.name,
                    status: 'done',
                    originFileObj: file,
                  }))}
                  showUploadList={false} // Hide default list
                >
                  <Tooltip title='Attach Image'>
                    <Button icon={<PictureIcon />} type='text' />
                  </Tooltip>
                </Upload>
                <Upload
                  accept={'.pdf,.doc,.docx'}
                  disabled={loadingSend}
                  multiple
                  beforeUpload={() => false}
                  onChange={handleAttachmentChange}
                  fileList={attachments.map((file) => ({
                    uid: file.name,
                    name: file.name,
                    status: 'done',
                    originFileObj: file,
                  }))}
                  showUploadList={false}>
                  <Tooltip title='Attach File'>
                    <Button icon={<FileIcon />} type='text' />
                  </Tooltip>
                </Upload>
                <div className='Button_Chat_Submit'>
                  <Button
                    loading={loadingSend}
                    className={'ChatSubmit'}
                    type='primary'
                    icon={<SendIcon />}
                    onClick={handleSendMessage}
                  />
                </div>
              </div>
              <div className={'ChatAttachment'}>
                {attachments.map((item, index: number) => {
                  return (
                    <div className={'ChatAttachmentItem'} key={index}>
                      <div className='ChatAttachmentItem--Name'>
                        {item.name}
                      </div>
                      <div className='ChatAttachmentItem--Action'>
                        <Button
                          disabled={loadingSend}
                          size={'small'}
                          onClick={() => {
                            let tmp = [...attachments];
                            tmp.splice(index, 1);
                            setAttachments(tmp);
                          }}
                          variant={'text'}
                          color={'danger'}
                          icon={<TrashIcon />}
                        />
                      </div>
                    </div>
                  );
                })}
              </div>
            </div>
            {/* {messages.length ? (
              <div className={'Action'}>
                <Tooltip placement={'left'} title={'Gán mã khách hàng'}>
                  <Button
                    onClick={() => setOpenModalCustomerCode(true)}
                    icon={<TagIcon />}
                    type={'primary'}></Button>
                </Tooltip>
                <Tooltip placement={'left'} title={'Chuyển CSKH khác'}>
                  <Button
                    onClick={() => setOpenModalStaff(true)}
                    icon={<ChatIcon />}
                    type={'primary'}></Button>
                </Tooltip>
              </div>
            ) : null} */}
          </>
        ) : null}
Redux Saga
----------

- y√™u c·∫ßu: 
	- c√°ch ho·∫°t ƒë·ªông c·ªßa Redux -> [xong]
	- bi·∫øt v·ªÅ JS/ES6 Generators -> 
 1.Generator?
	- Generator l√† Obj ƒë∆∞·ª£c tr·∫£ v·ªÅ t·ª´ generator function
	- Generator ko th·ªÉ t·∫°o tr·ª±c ti·∫øp
	Vd:
	- function* generateId(){
		yield 1;
		
		console.log('Continue to run');
		yield 2;

		console.log('Resume');
		return 3; }
	const newId = generatedId(); (0)
	newId.next(); //{value: 1, done: false} (1)
	newId.next(); //{value: 2, done: false} (2)
	newId.next(); //{value: 3, done: true}  (3)


*Nh·∫≠n x√©t:
- c√≥ 1 s·ªë ƒëi·ªÉm kh√°c: function*, yield...
- (0) -> h√†m newId s·∫Ω g·ªçi h√†m generateId v√†o (1) v√† th·ª±c hi·ªán gi√° tr·ªã 1 v√† done: ch∆∞a xong
- (2) -> ti·∫øp t·ª•c v√†o gi√° tr·ªã =2 b·ªè qua yield 1; v√† done: ch∆∞a xong
- (3) -> ti·∫øp t·ª•c v√†o gi√° tr·ªã =3 v√† return -> done: true d·ª´ng v√† tr·∫£ ra k·∫øt qu·∫£
- next ti·∫øp th√¨ h√†m s·∫Ω value = undefined nh∆∞ng done: xong

*ƒê·∫∑c ƒëi·ªÉm generator function:
- h√†m c√≥ th·ªÉ d·ª´ng gi·ªØa ch·ª´ng v√† ti·∫øp t·ª•c sau
- m·ªói l·∫ßn g·ªçi, h√†m s·∫Ω ƒëc th·ª±c thi cho ƒë·∫øn khi g·∫∑p yield, return
c√≥ 3 h√†m:
- next() -> ti·∫øp t·ª•c th·ª±c thi cho ƒë·∫øn khi g·∫∑p yield, return
- return() -> d·ª´ng generator v√† return k·∫øt qu·∫£
- throw() -> d·ª´ng generator v√† tr·∫£ gi√° tr·ªã l·ªói {value: undefined, done: true}
------------------------------------------------------------------------------------
*L√Ω thuy·∫øt Redux saga:
- c√°ch th·ª©c ho·∫°t ƒë·ªông
- setup trong d·ª± √°n th·ª±c t·∫ø
-----------------------
Gi·ªõi thi·ªáu v·ªÅ Redux saga:
----------------------------------------------------------------------
C√°c kh√°i ni·ªám c·∫ßn bi·∫øt trong Redux Saga üî•
- Effect ~ JS obj ch·ª©a th√¥ng tin ƒë·ªÉ cho saga middleware bi·∫øt ƒë·ªÉ l√†m chuy·ªán g√¨
	- Vd: call(myfunc, a1, a2) -> myfunc(a1, a2) th·ª±c thi myfunc v·ªõi gi√° tr·ªã a1, a2
- Task -> ch∆∞∆°ng tr√¨nh ch·∫°y //
- blocking/non-blocking call -> ƒë·ª£i l1 -> l2/ko ƒë·ª£i l1 non -> l2
	- redux-saga.js.org/docs/api/#blocking-non-blocking
	-> b·∫£ng check l√† blocking hay nonBlocking
- takeEvery -> non
- take	-> block
- fork	-> non
- watcher/worker -> 
- Middleware API -> t·∫°o middleware
- Saga l√† g√¨?
	- ƒëi qua t·∫•t c·∫£ Generator obj -> x·ª≠ l√Ω t·∫•y c·∫£ yield
- Effect creators:
	- l√† 1 h√†m nh·∫≠n tham s·ªë g√¨ ƒë√≥ tr·∫£ v·ªÅ 1 JS obj
	- tu·ª≥ v√†o Effect m√† middleware th·ª±c thi
	- k·∫øt h·ª£p try/catch
---------------------------------
- S·ª≠ d·ª•ng Redux Toolkit lu√¥n
- ~ Redux c≈© nh∆∞ng cung c·∫•p th√™m API sd d·ªÖ d√†ng h∆°n
- npm install @reduxjs/toolkit
----------------------------------
*Setup d·ª± √°n:
- t·∫°o d·ª± √°n (b3)
- th√™m v√†o tsconfig.json <- "baseUrl" :"./src" (l·∫•y ƒë∆∞·ªùng d·∫´n tuy·ªát ƒë·ªëi)
- th√™m prettier.io/playground -> s·ª≠a: print-width: 100; common: single-quote -> copy config JSON (n√∫t ·ªü d∆∞·ªõi)
- ·ªü VS code t·∫°o file .prettierrc -> paste config b√™n tr√™n v√†o
- t·∫°o c√°c folder l∆∞u tr·ªØ: components, constants, hooks, utils, api
- b√™n trong app c√≥ hooks, store
------------------------------------
*th√™m:
- npm install redux-saga
- g·∫Øn middleware: v√†o: https://redux-toolkit.js.org/api/getDefaultMiddleware
-> copy t·ª´ middlewatr <- Customizing
-   middleware: (getDefaultMiddleware) =>
  getDefaultMiddleware({
    thunk: true,
    serializableCheck: false,
    immutableCheck: false,
  }),
- xo√° c√°c thunk b√™n trong v√† th√™m concat
- import createSagaMiddleware from 'redux-saga'
- const sagaMiddlware = createSagaMiddleware()
export const store = configureStore({
  reducer: {
    counter: counterReducer,
  },
  
  // devTools: true, false th√¨ ko sd devTools
  //th√™m ƒëo·∫°n m√£ code middleware v√†o!
  // middleware: (getDefaultMiddleware) =>
  // getDefaultMiddleware({
  //   thunk: true,
  //   serializableCheck: false,
  //   immutableCheck: false,
  // }),
  middleware: (getDefaultMiddleware)=>
    getDefaultMiddleware().concat(sagaMiddlware)
->> s·ª≠a l·∫°i store.ts th√†nh ntn
-------------------------------------
Nh·ªØng effect creators ph·ªï bi·∫øn n√™n bi·∫øt
- Effect ƒë∆°n gi·∫£n l√† 1 obj ƒë·ªÉ saga middleware l√†m g√¨
- Effect Creator: l√† 1 h√†m tr·∫£ v·ªÅ 1 Effect; ko th·ª±c thi ch·ªâ c√≥ saga mid th·ª±c thi
- takeEvery, takeLastest ... -> Effect Creators
- put dispatch 1 action t·ª´ saga
--------------------------------------
*ph√¢n bi·ªát: takeEvery v√† take Latest:
- 
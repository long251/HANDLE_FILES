import React, { useEffect, useState } from "react";
import { useLoaderData, useMatches } from "react-router";
import Link from "~/components/Link";
import { __t, getTranslation } from "~/utils/translate";
import { CounterDataDifference } from "./component/countDataDifference";
import {
  dataLogoEcommercePlatform,
  dataLogoLogisticsPartner,
} from "./component/dataLogo";
import { seoMeta } from "~/utils/seo";
import type { Route } from "../+types/home";
import axios from "axios";

export const contactMetaSEO: any = {
  de: {
    title: "",
    description: "",
    breadcrumb: {
      home: "Home",
      contact: "Contact",
    },
  },
  en: {
    title: "",
    description: "",
    breadcrumb: {
      home: "Home",
      contact: "Contact",
    },
  },
  fr: {
    title: "",
    description: "",
    breadcrumb: {
      home: "Home",
      contact: "Contact",
    },
  },
  ja: {
    title: "",
    description: "",
    breadcrumb: {
      home: "Home",
      contact: "Contact",
    },
  },
  ko: {
    title: "",
    description: "",
    breadcrumb: {
      home: "Home",
      contact: "Contact",
    },
  },
  vi: {
    title: "",
    description: "",
    breadcrumb: {
      home: "Trang chủ",
      contact: "Tin tức",
    },
  },
  "zh-CN": {
    title: "",
    description: "",
    breadcrumb: {
      home: "Home",
      contact: "Contact",
    },
  },
  "zh-TW": {
    title: "",
    description: "",
    breadcrumb: {
      home: "Home",
      contact: "Contact",
    },
  },
};
export function meta({ params, matches }: any) {
  const rootMatch = matches.find((match: any) => match.id === "root");
  // @ts-ignore
  const ENV = rootMatch?.data?.ENV;
  let origin = ENV.APP_URL;
  let lang = params.lang;
  let url = origin + `/${lang}/contact`;

  let defaultLang = "en";
  let metaTitle =
    contactMetaSEO[lang] != undefined
      ? contactMetaSEO[lang]["title"]
      : contactMetaSEO[defaultLang]["title"];
  let metaDescription =
    contactMetaSEO[lang] != undefined
      ? contactMetaSEO[lang]["description"]
      : contactMetaSEO[defaultLang]["description"];

  return seoMeta(origin, url, metaTitle, metaDescription);
}
export const loader = async ({ params, request }: Route.LoaderArgs) => {
  let lang = params.lang;

  let defaultLang = "en";
  let schemaName =
    contactMetaSEO[lang] != undefined
      ? contactMetaSEO[lang]["title"]
      : contactMetaSEO[defaultLang]["title"];
  let schemaDescription =
    contactMetaSEO[lang] != undefined
      ? contactMetaSEO[lang]["description"]
      : contactMetaSEO[defaultLang]["description"];
  let schemaBreadcrumbHome =
    contactMetaSEO[lang] != undefined
      ? contactMetaSEO[lang]["breadcrumb"]["home"]
      : contactMetaSEO[defaultLang]["breadcrumb"]["home"];
  let schemaBreadcrumbContact =
    contactMetaSEO[lang] != undefined
      ? contactMetaSEO[lang]["breadcrumb"]["contact"]
      : contactMetaSEO[defaultLang]["breadcrumb"]["contact"];

  const jsonLdData = {
    "@context": "https://schema.org",
    "@type": "ContactPage",
    "@id": `https://pcs-logistics.com/${lang}/contact`,
    url: `https://pcs-logistics.com/${lang}/contact`,
    name: schemaName,
    isPartOf: { "@id": "#website" },
    description: schemaDescription,
    breadcrumb: {
      "@type": "BreadcrumbList",
      itemListElement: [
        {
          "@type": "ListItem",
          position: 1,
          name: schemaBreadcrumbHome,
          item: `https://pcs-logistics.com/${lang}`,
        },
        {
          "@type": "ListItem",
          position: 2,
          name: schemaBreadcrumbContact,
          item: `https://pcs-logistics.com/${lang}/contact`,
        },
      ],
    },
  };
  return {
    jsonLdData: jsonLdData,
    apiUrl: process.env.API_URL,
  };
};
const FulfillmentSolutions = () => {
  //API
  const { jsonLdData, apiUrl } = useLoaderData();

  const [openMessage, setOpenMessage] = useState({
    icon: <div />,
    title: "",
    description: "",
  });
  const [loadingSubmit, setLoadingSubmit] = useState(false);
  const handleSubmitFormBusinessSale = async () => {
    if (loadingSubmit) {
      return;
    }
    let elName: any = document.querySelector("#name_business_sale_priority");
    let elService: any = document.querySelector(
      "#service_business_sale_priority"
    );
    let elPhone: any = document.querySelector("#phone_business_sale_priority");
    let elEmail: any = document.querySelector("#email_business_sale_priority");
    let elCompany: any = document.querySelector(
      "#company_business_sale_priority"
    );
    let elNote: any = document.querySelector("#note_business_sale_priority");

    let name = elName?.value;
    let service = elService?.value;
    let phone = elPhone?.value;
    let email = elEmail?.value;
    let company = elCompany?.value;
    let note = elNote?.value;
    if (!name || !email) {
      setOpenMessage({
        icon: (
          <div className="mx-auto flex size-12 shrink-0 items-center justify-center rounded-full bg-red-100 sm:mx-0 sm:size-10">
            <svg
              className="size-6 text-red-600"
              fill="none"
              viewBox="0 0 24 24"
              strokeWidth="1.5"
              stroke="currentColor"
              aria-hidden="true"
              data-slot="icon"
            >
              <path
                strokeLinecap="round"
                strokeLinejoin="round"
                d="M12 9v3.75m-9.303 3.376c-.866 1.5.217 3.374 1.948 3.374h14.71c1.73 0 2.813-1.874 1.948-3.374L13.949 3.378c-.866-1.5-3.032-1.5-3.898 0L2.697 16.126ZM12 15.75h.007v.008H12v-.008Z"
              />
            </svg>
          </div>
        ),
        title: __t("contact_us.title_1", translations),
        description: __t("contact_us.description_1", translations),
      });
      return;
    }
    setLoadingSubmit(true);
    try {
      let payload = {
        form_type: "business_sale",
        name: name,
        service: "",
        phone: phone,
        company: company,
        email: email,
        note: note,
      };
      let response = await axios.post(`${apiUrl}/pcs-global/contact`, payload, {
        headers: {
          Accept: "application/json",
          "Content-Type": "application/json",
        },
      });

      if (response.data.status) {
        setOpenMessage({
          icon: (
            <div className="mx-auto flex size-12 shrink-0 items-center justify-center rounded-full bg-[#dcfce7] sm:mx-0 sm:size-10">
              <svg
                xmlns="http://www.w3.org/2000/svg"
                fill="none"
                viewBox="0 0 24 24"
                strokeWidth="1.5"
                stroke="currentColor"
                aria-hidden="true"
                data-slot="icon"
                className="text-[#00a63e] w-[20px]"
              >
                <path
                  strokeLinecap="round"
                  strokeLinejoin="round"
                  d="m4.5 12.75 6 6 9-13.5"
                ></path>
              </svg>
            </div>
          ),
          title: __t("contact_us.title_2", translations),
          description: __t("contact_us.description_2", translations),
        });
        elName.value = "";
        elPhone.value = "";
        elCompany.value = "";
        elEmail.value = "";
        elNote.value = "";
      } else {
        setOpenMessage({
          icon: (
            <div className="mx-auto flex size-12 shrink-0 items-center justify-center rounded-full bg-red-100 sm:mx-0 sm:size-10">
              <svg
                className="size-6 text-red-600"
                fill="none"
                viewBox="0 0 24 24"
                strokeWidth="1.5"
                stroke="currentColor"
                aria-hidden="true"
                data-slot="icon"
              >
                <path
                  strokeLinecap="round"
                  strokeLinejoin="round"
                  d="M12 9v3.75m-9.303 3.376c-.866 1.5.217 3.374 1.948 3.374h14.71c1.73 0 2.813-1.874 1.948-3.374L13.949 3.378c-.866-1.5-3.032-1.5-3.898 0L2.697 16.126ZM12 15.75h.007v.008H12v-.008Z"
                />
              </svg>
            </div>
          ),
          title: __t("contact_us.title_3", translations),
          description: __t("contact_us.description_3", translations),
        });
      }
    } catch (e) {
      console.log(e);
      setOpenMessage({
        icon: (
          <div className="mx-auto flex size-12 shrink-0 items-center justify-center rounded-full bg-red-100 sm:mx-0 sm:size-10">
            <svg
              className="size-6 text-red-600"
              fill="none"
              viewBox="0 0 24 24"
              strokeWidth="1.5"
              stroke="currentColor"
              aria-hidden="true"
              data-slot="icon"
            >
              <path
                strokeLinecap="round"
                strokeLinejoin="round"
                d="M12 9v3.75m-9.303 3.376c-.866 1.5.217 3.374 1.948 3.374h14.71c1.73 0 2.813-1.874 1.948-3.374L13.949 3.378c-.866-1.5-3.032-1.5-3.898 0L2.697 16.126ZM12 15.75h.007v.008H12v-.008Z"
              />
            </svg>
          </div>
        ),
        title: __t("contact_us.title_3", translations),
        description: __t("contact_us.description_3", translations),
      });
    }
    setLoadingSubmit(false);
  };
  const handleSubmitFormIndividualSale = async () => {
    if (loadingSubmit) {
      return;
    }
    let elName: any = document.querySelector("#name_individual_sale");
    let elService: any = document.querySelector("#service_individual_sale");
    let elPhone: any = document.querySelector("#phone_individual_sale");
    let elEmail: any = document.querySelector("#email_individual_sale");
    let elCompany: any = document.querySelector("#company_individual_sale");
    let elNote: any = document.querySelector("#note_individual_sale");

    let name = elName?.value;
    let service = elService?.value;
    let phone = elPhone?.value;
    let email = elEmail?.value;
    let company = elCompany?.value;
    let note = elNote?.value;
    if (!name || !email) {
      setOpenMessage({
        icon: (
          <div className="mx-auto flex size-12 shrink-0 items-center justify-center rounded-full bg-red-100 sm:mx-0 sm:size-10">
            <svg
              className="size-6 text-red-600"
              fill="none"
              viewBox="0 0 24 24"
              strokeWidth="1.5"
              stroke="currentColor"
              aria-hidden="true"
              data-slot="icon"
            >
              <path
                strokeLinecap="round"
                strokeLinejoin="round"
                d="M12 9v3.75m-9.303 3.376c-.866 1.5.217 3.374 1.948 3.374h14.71c1.73 0 2.813-1.874 1.948-3.374L13.949 3.378c-.866-1.5-3.032-1.5-3.898 0L2.697 16.126ZM12 15.75h.007v.008H12v-.008Z"
              />
            </svg>
          </div>
        ),
        title: __t("contact_us.title_1", translations),
        description: __t("contact_us.description_1", translations),
      });
      return;
    }
    setLoadingSubmit(true);
    try {
      let payload = {
        form_type: "individual_sale",
        name: name,
        service: "",
        phone: phone,
        email: email,
        note: note,
      };
      let response = await axios.post(`${apiUrl}/pcs-global/contact`, payload, {
        headers: {
          Accept: "application/json",
          "Content-Type": "application/json",
        },
      });
      if (response.data.status) {
        setOpenMessage({
          icon: (
            <div className="mx-auto flex size-12 shrink-0 items-center justify-center rounded-full bg-[#dcfce7] sm:mx-0 sm:size-10">
              <svg
                xmlns="http://www.w3.org/2000/svg"
                fill="none"
                viewBox="0 0 24 24"
                strokeWidth="1.5"
                stroke="currentColor"
                aria-hidden="true"
                data-slot="icon"
                className="text-[#00a63e] w-[20px]"
              >
                <path
                  strokeLinecap="round"
                  strokeLinejoin="round"
                  d="m4.5 12.75 6 6 9-13.5"
                ></path>
              </svg>
            </div>
          ),
          title: __t("contact_us.title_2", translations),
          description: __t("contact_us.description_2", translations),
        });
        elName.value = "";
        elPhone.value = "";
        elEmail.value = "";
        elNote.value = "";
      } else {
        setOpenMessage({
          icon: (
            <div className="mx-auto flex size-12 shrink-0 items-center justify-center rounded-full bg-red-100 sm:mx-0 sm:size-10">
              <svg
                className="size-6 text-red-600"
                fill="none"
                viewBox="0 0 24 24"
                strokeWidth="1.5"
                stroke="currentColor"
                aria-hidden="true"
                data-slot="icon"
              >
                <path
                  strokeLinecap="round"
                  strokeLinejoin="round"
                  d="M12 9v3.75m-9.303 3.376c-.866 1.5.217 3.374 1.948 3.374h14.71c1.73 0 2.813-1.874 1.948-3.374L13.949 3.378c-.866-1.5-3.032-1.5-3.898 0L2.697 16.126ZM12 15.75h.007v.008H12v-.008Z"
                />
              </svg>
            </div>
          ),
          title: __t("contact_us.title_3", translations),
          description: __t("contact_us.description_3", translations),
        });
      }
    } catch (e) {
      console.log(e);
      setOpenMessage({
        icon: (
          <div className="mx-auto flex size-12 shrink-0 items-center justify-center rounded-full bg-red-100 sm:mx-0 sm:size-10">
            <svg
              className="size-6 text-red-600"
              fill="none"
              viewBox="0 0 24 24"
              strokeWidth="1.5"
              stroke="currentColor"
              aria-hidden="true"
              data-slot="icon"
            >
              <path
                strokeLinecap="round"
                strokeLinejoin="round"
                d="M12 9v3.75m-9.303 3.376c-.866 1.5.217 3.374 1.948 3.374h14.71c1.73 0 2.813-1.874 1.948-3.374L13.949 3.378c-.866-1.5-3.032-1.5-3.898 0L2.697 16.126ZM12 15.75h.007v.008H12v-.008Z"
              />
            </svg>
          </div>
        ),
        title: __t("contact_us.title_3", translations),
        description: __t("contact_us.description_3", translations),
      });
    }
    setLoadingSubmit(false);
  };
  //lang
  const matches = useMatches();
  const translations = getTranslation(matches);
  //ảnh tổng
  const imgWrapper = [
    {
      image: "/images/example/img_fulfillment_wrapper_1.png",
      title: "solutions.fulfillment-solutions.banner",
      note: "solutions.fulfillment-solutions.banner_content",
      link: "/contact",
      mini: "/images/example/img_fulfillment_wrapper_1_mini.png",
    },
    {
      image: "/images/example/img_fulfillment_wrapper_2.png",
      title: "solutions.fulfillment-solutions.banner",
      note: "solutions.fulfillment-solutions.banner_content",
      link: "/contact",
      mini: "/images/example/img_fulfillment_wrapper_2_mini.png",
    },
    {
      image: "/images/example/img_fulfillment_wrapper_3.png",
      title: "solutions.fulfillment-solutions.banner",
      note: "solutions.fulfillment-solutions.banner_content",
      link: "/contact",
      mini: "/images/example/img_fulfillment_wrapper_3_mini.png",
    },
    {
      image: "/images/example/img_fulfillment_wrapper_4.png",
      title: "solutions.fulfillment-solutions.banner",
      note: "solutions.fulfillment-solutions.banner_content",
      link: "/contact",
      mini: "/images/example/img_fulfillment_wrapper_4_mini.png",
    },
    {
      image: "/images/example/img_fulfillment_wrapper_5.png",
      title: "solutions.fulfillment-solutions.banner",
      note: "solutions.fulfillment-solutions.banner_content",
      link: "/contact",
      mini: "/images/example/img_fulfillment_wrapper_5_mini.png",
    },
  ];
  const [selectedIndex, setSelectedIndex] = useState(1);
  // fulfillment solutions
  const internationalFulfillment = [
    {
      image: "/images/example/img_fulfillment_solutions_1_1.png",
    },
    {
      image: "/images/example/img_fulfillment_solutions_1_2.png",
    },
    {
      image: "/images/example/img_fulfillment_solutions_1_3.png",
    },
  ];
  const [currentIndex, setCurrentIndex] = useState(0);
  const nextSlide = () => {
    setCurrentIndex((prevIndex) =>
      prevIndex === internationalFulfillment.length - 1 ? 0 : prevIndex + 1
    );
  };
  const prevSlide = () => {
    setCurrentIndex((prevIndex) =>
      prevIndex === 0 ? internationalFulfillment.length - 1 : prevIndex - 1
    );
  };
  useEffect(() => {
    const interval = setInterval(() => {
      nextSlide();
    }, 3000);
    return () => clearInterval(interval);
  }, []);
  const dataInternationalFulfillment = [
    {
      title: "solutions.fulfillment-solutions.solution_1",
      content: "solutions.fulfillment-solutions.solution_1_content",
      list: [
        "solutions.fulfillment-solutions.solution_1_list1",
        "solutions.fulfillment-solutions.solution_1_list2",
        "solutions.fulfillment-solutions.solution_1_list3",
        "solutions.fulfillment-solutions.solution_1_list4",
      ],
    },
  ];
  const warehouseFulfillment = [
    {
      image: "/images/example/img_fulfillment_solutions_2_1.png",
    },
    {
      image: "/images/example/img_fulfillment_solutions_2_2.png",
    },
    {
      image: "/images/example/img_fulfillment_solutions_2_3.png",
    },
  ];
  const [currentIndex2, setCurrentIndex2] = useState(0);
  const nextSlide2 = () => {
    setCurrentIndex2((prevIndex) =>
      prevIndex === warehouseFulfillment.length - 1 ? 0 : prevIndex + 1
    );
  };
  const prevSlide2 = () => {
    setCurrentIndex2((prevIndex) =>
      prevIndex === 0 ? warehouseFulfillment.length - 1 : prevIndex - 1
    );
  };
  useEffect(() => {
    const interval = setInterval(() => {
      nextSlide2();
    }, 3000);
    return () => clearInterval(interval);
  }, []);
  const dataWarehouseFulfillment = [
    {
      title: "solutions.fulfillment-solutions.solution_2",
      content: "solutions.fulfillment-solutions.solution_2_content",
      list: [
        "solutions.fulfillment-solutions.solution_2_list1",
        "solutions.fulfillment-solutions.solution_2_list2",
        "solutions.fulfillment-solutions.solution_2_list3",
        "solutions.fulfillment-solutions.solution_2_list4",
      ],
    },
  ];
  const valueFulfillment = [
    {
      image: "/images/example/img_fulfillment_solutions_3_1.png",
    },
    {
      image: "/images/example/img_fulfillment_solutions_3_2.png",
    },
    {
      image: "/images/example/img_fulfillment_solutions_3_3.png",
    },
  ];
  const [currentIndex3, setCurrentIndex3] = useState(0);
  const nextSlide3 = () => {
    setCurrentIndex3((prevIndex) =>
      prevIndex === valueFulfillment.length - 1 ? 0 : prevIndex + 1
    );
  };
  const prevSlide3 = () => {
    setCurrentIndex3((prevIndex) =>
      prevIndex === 0 ? valueFulfillment.length - 1 : prevIndex - 1
    );
  };
  useEffect(() => {
    const interval = setInterval(() => {
      nextSlide3();
    }, 3000);
    return () => clearInterval(interval);
  }, []);
  const dataValueFulfillment = [
    {
      title: "solutions.fulfillment-solutions.solution_3",
      content: "solutions.fulfillment-solutions.solution_3_content",
      list: [
        "solutions.fulfillment-solutions.solution_3_list1",
        "solutions.fulfillment-solutions.solution_3_list2",
        "solutions.fulfillment-solutions.solution_3_list3",
        "solutions.fulfillment-solutions.solution_3_list4",
      ],
    },
  ];
  const [isMobile, setIsMobile] = useState(false);

  useEffect(() => {
    const checkScreenSize = () => {
      setIsMobile(window.innerWidth <= 1024);
    };

    checkScreenSize();
    window.addEventListener("resize", checkScreenSize);

    return () => {
      window.removeEventListener("resize", checkScreenSize);
    };
  }, []);
  // data video spectial
  const dataSpecial = [
    {
      icon: (
        <svg
          width="56"
          height="56"
          viewBox="0 0 56 56"
          fill="none"
          xmlns="http://www.w3.org/2000/svg"
        >
          <path
            d="M27.9978 11.6632C18.9916 11.6632 11.6616 18.9938 11.6616 27.9994C11.6616 37.005 18.9922 44.3356 27.9978 44.3356C37.0035 44.3356 44.3341 37.005 44.3341 27.9994C44.3341 18.9938 37.0035 11.6632 27.9978 11.6632ZM27.9978 42.9444C19.7607 42.9444 13.0535 36.2419 13.0535 28C13.0535 19.7581 19.7607 13.0556 27.9978 13.0556C36.235 13.0556 42.9422 19.7629 42.9422 28C42.9422 36.2371 36.235 42.9444 27.9978 42.9444ZM53.4339 22.3006H48.9039C48.3813 22.3006 47.9571 21.9936 47.7931 21.4968C47.4697 20.5079 47.0666 19.5353 46.5932 18.605C46.3588 18.1363 46.4362 17.6207 46.8088 17.2481L50.0123 14.0446C50.4974 13.5595 50.7622 12.9173 50.7622 12.2331C50.7622 11.5488 50.4974 10.9019 50.0123 10.4215L45.5738 5.98299C45.0887 5.49789 44.4466 5.23307 43.7623 5.23307C43.078 5.23307 42.4311 5.49789 41.9508 5.98299L38.7472 9.18652C38.3746 9.55913 37.859 9.63647 37.3904 9.40213C36.46 8.92874 35.4874 8.52568 34.4985 8.20226C34.0017 8.04056 33.6947 7.61404 33.6947 7.09142L33.697 2.56377C33.697 1.14828 32.544 0.00234335 31.1356 0.00234335L24.8597 0C23.4442 0 22.2983 1.15302 22.2983 2.56142V7.09141C22.2983 7.61401 21.9913 8.03817 21.4945 8.20225C20.5055 8.52565 19.533 8.92871 18.6026 9.40212C18.1339 9.63647 17.6184 9.55914 17.2457 9.18652L14.0422 5.98298C13.5571 5.49788 12.915 5.23307 12.2307 5.23307C11.5464 5.23307 10.8996 5.49788 10.4192 5.98298L5.98064 10.4215C5.49554 10.9066 5.23072 11.5488 5.23072 12.233C5.23072 12.9173 5.49554 13.5642 5.98064 14.0446L9.18418 17.2481C9.55679 17.6207 9.63413 18.1363 9.39978 18.605C8.9264 19.5353 8.52334 20.5079 8.19991 21.4968C8.03821 21.9936 7.61169 22.3006 7.08907 22.3006H2.56142C1.14594 22.3006 0 23.4536 0 24.862V31.138C0 32.5534 1.15301 33.6994 2.56142 33.6994H7.09141C7.61401 33.6994 8.03817 34.0064 8.20225 34.5032C8.52565 35.4921 8.92871 36.4647 9.40212 37.395C9.63647 37.8637 9.55914 38.3793 9.18652 38.7519L5.98298 41.9554C5.49788 42.4406 5.23307 43.0827 5.23307 43.767C5.23307 44.4512 5.49788 45.0981 5.98298 45.5785L10.4215 50.017C10.9066 50.5021 11.5488 50.7669 12.233 50.7669C12.9173 50.7669 13.5642 50.5021 14.0445 50.017L17.2481 46.8135C17.6207 46.4409 18.1363 46.3635 18.605 46.5979C19.5353 47.0713 20.5126 47.4743 21.4968 47.7977C21.9936 47.9594 22.3006 48.386 22.3006 48.9086V53.4386C22.3006 54.8541 23.4536 56 24.862 56H31.138C32.5534 56 33.6994 54.847 33.6994 53.4386V48.9086C33.6994 48.386 34.0064 47.9618 34.5032 47.7977C35.4921 47.4743 36.4647 47.0713 37.395 46.5979C37.8637 46.3635 38.3793 46.4409 38.7519 46.8135L41.9554 50.017C42.4405 50.5021 43.0827 50.7669 43.7669 50.7669C44.4512 50.7669 45.0981 50.5021 45.5785 50.017L50.017 45.5785C50.5021 45.0934 50.7669 44.4512 50.7669 43.767C50.7669 43.0827 50.5021 42.4358 50.017 41.9554L46.8135 38.7519C46.4409 38.3793 46.3635 37.8637 46.5979 37.395C47.0713 36.4647 47.4743 35.4874 47.7977 34.5032C47.9594 34.0064 48.386 33.6994 48.9086 33.6994H53.4386C54.8541 33.6994 56 32.5464 56 31.138L55.9977 24.862C55.9977 23.4466 54.8517 22.3006 53.4339 22.3006ZM54.6056 31.1377C54.6056 31.7798 54.083 32.3071 53.4362 32.3071H48.9062C47.779 32.3071 46.8252 32.996 46.4713 34.0717C46.1643 34.9951 45.7941 35.902 45.3488 36.7714C44.8379 37.7791 45.0254 38.9438 45.8222 39.7406L49.0257 42.9441C49.2484 43.1668 49.3679 43.4597 49.3679 43.7714C49.3679 44.0831 49.2484 44.3784 49.0257 44.5986L44.5872 49.0372C44.3645 49.2598 44.0716 49.3794 43.7599 49.3794C43.4482 49.3794 43.153 49.2598 42.9327 49.0372L39.7291 45.8337C38.9324 45.0369 37.7676 44.8494 36.7599 45.3603C35.8905 45.7985 34.9836 46.1758 34.0602 46.4828C32.9916 46.8367 32.2956 47.7905 32.2956 48.9177V53.4477C32.2956 54.0898 31.773 54.6171 31.1262 54.6171L24.8599 54.6194C24.2178 54.6194 23.6905 54.0969 23.6905 53.4501V48.9201C23.6905 47.7928 23.0015 46.839 21.9258 46.4852C21.0025 46.1782 20.0955 45.8079 19.2261 45.3626C18.8488 45.1705 18.4527 45.0814 18.0567 45.0814C17.3958 45.0814 16.7537 45.3392 16.2569 45.8383L13.0534 49.0419C12.8308 49.2645 12.5378 49.384 12.2261 49.384C11.9144 49.384 11.6192 49.2645 11.3989 49.0419L6.96032 44.6033C6.73769 44.3807 6.61817 44.0877 6.61817 43.7761C6.61817 43.4644 6.73769 43.1691 6.96032 42.9488L10.1639 39.7453C10.9606 38.9485 11.1481 37.7838 10.6372 36.7761C10.199 35.9067 9.82169 34.9997 9.5147 34.0764C9.16084 33.0078 8.20702 32.3117 7.07981 32.3117L2.56158 32.307C1.91946 32.307 1.39218 31.7845 1.39218 31.1377L1.38984 24.8617C1.38984 24.2196 1.91244 23.6923 2.55923 23.6923H7.08922C8.21644 23.6923 9.17027 23.0034 9.52412 21.9277C9.83111 21.0043 10.2014 20.0974 10.6467 19.228C11.1575 18.2203 10.9701 17.0556 10.1733 16.2588L6.96974 13.0553C6.74711 12.8326 6.62759 12.5397 6.62759 12.228C6.62759 11.9163 6.74711 11.621 6.96974 11.4008L11.4083 6.96219C11.6309 6.73956 11.9239 6.62004 12.2355 6.62004C12.5472 6.62004 12.8425 6.73956 13.0628 6.96219L16.2663 10.1657C17.0631 10.9625 18.2278 11.15 19.2355 10.6391C20.105 10.2009 21.0119 9.82356 21.9352 9.51657C23.0038 9.16271 23.6999 8.20889 23.6999 7.08168L23.7022 2.56344C23.7022 1.92133 24.2248 1.39405 24.8716 1.39405H31.1475C31.7897 1.39405 32.3169 1.91665 32.3169 2.56344V7.09343C32.3169 8.22065 33.0059 9.17449 34.0816 9.52833C35.0049 9.83533 35.9119 10.2056 36.7813 10.6509C37.789 11.1617 38.9537 10.9743 39.7505 10.1775L42.954 6.97395C43.1767 6.75132 43.4696 6.6318 43.7813 6.6318C44.093 6.6318 44.3882 6.75132 44.6085 6.97395L49.0471 11.4125C49.2697 11.6351 49.3892 11.9234 49.3892 12.2398C49.3892 12.5585 49.2697 12.8467 49.0471 13.067L45.8436 16.2705C45.0468 17.0673 44.8593 18.232 45.3702 19.2397C45.8084 20.1092 46.1857 21.0161 46.4927 21.9395C46.8466 23.0081 47.8004 23.7041 48.9276 23.7041H53.4576C54.0997 23.7041 54.627 24.2267 54.627 24.8735L54.6293 31.1374L54.6056 31.1377ZM24.4403 36.7409C24.3208 36.987 24.0747 37.13 23.8169 37.13C23.7138 37.13 23.606 37.1065 23.5052 37.0573C20.0439 35.3348 17.8902 31.8688 17.8902 27.9971C17.8902 27.5706 17.9207 27.144 17.9745 26.7199L17.0512 27.4393C16.7442 27.6737 16.3083 27.6198 16.074 27.3198C15.8396 27.0128 15.8935 26.5769 16.1935 26.3426L18.6284 24.4467C18.7854 24.3271 18.9893 24.2733 19.1861 24.3084C19.383 24.3436 19.5517 24.4654 19.6548 24.6388L21.2203 27.2659C21.4171 27.5963 21.3093 28.0228 20.9813 28.2197C20.8664 28.2853 20.7469 28.3158 20.6274 28.3158C20.3883 28.3158 20.1587 28.1962 20.0275 27.9736L19.3595 26.8604C19.3127 27.2377 19.2822 27.6174 19.2822 27.9993C19.2822 31.3295 21.1359 34.3221 24.1239 35.8057C24.4707 35.9791 24.6137 36.3988 24.4403 36.7409ZM20.0134 21.8038C21.8015 19.5071 24.4239 18.1151 27.29 17.9159L26.5331 17.3159C26.2331 17.0769 26.1792 16.6387 26.4183 16.3387C26.6573 16.0387 27.0955 15.9848 27.3955 16.2239L29.7952 18.1268C29.9523 18.2534 30.0483 18.4385 30.0601 18.6377C30.0718 18.8345 29.9944 19.0337 29.8491 19.172L27.6416 21.3374C27.5033 21.4686 27.3299 21.5343 27.1565 21.5343C26.976 21.5343 26.7956 21.4616 26.6596 21.3233C26.3901 21.0468 26.3948 20.6086 26.6667 20.3391L27.7353 19.2892C25.1246 19.3665 22.7202 20.5852 21.1126 22.6545C20.9743 22.8279 20.7705 22.924 20.5595 22.924C20.4095 22.924 20.2596 22.8771 20.133 22.781C19.833 22.5467 19.7791 22.1084 20.0134 21.8038ZM37.7277 30.735C36.563 34.8924 32.8392 37.8454 28.5667 38.0842L29.4901 38.9958C29.7666 39.2653 29.7666 39.7106 29.4971 39.98C29.3588 40.1183 29.1784 40.191 29.0003 40.191C28.8269 40.191 28.6464 40.1253 28.5152 39.9941L26.3076 37.8287C26.1646 37.6904 26.092 37.4936 26.0967 37.2944C26.1084 37.0975 26.2045 36.9101 26.3615 36.7835L28.7612 34.8806C29.0612 34.6415 29.4995 34.6954 29.7385 34.9954C29.9775 35.2954 29.9236 35.7336 29.6236 35.9726L28.7354 36.6804C32.3163 36.3734 35.4001 33.8612 36.3846 30.3625C36.4877 29.9899 36.8767 29.7743 37.2423 29.8821C37.6149 29.9805 37.8355 30.3647 37.7277 30.735ZM39.3354 24.3397C39.6658 24.5365 39.7736 24.9631 39.5744 25.2935L38.0019 27.9205C37.8988 28.0939 37.7254 28.2088 37.5332 28.2509C37.491 28.258 37.4488 28.2627 37.4067 28.2627C37.2496 28.2627 37.0997 28.2088 36.9755 28.1127L34.5406 26.2097C34.2336 25.9707 34.1867 25.5325 34.421 25.2325C34.6601 24.9255 35.0983 24.8786 35.3983 25.113L36.4599 25.9402C35.8716 23.5335 34.2523 21.4337 32.0213 20.2643C31.6791 20.0839 31.5479 19.6644 31.7284 19.3222C31.9088 18.9801 32.3283 18.8489 32.6704 19.0293C35.2389 20.3721 37.1043 22.7789 37.805 25.544L38.3862 24.5714C38.5807 24.2504 39.0073 24.1428 39.3354 24.3397ZM31.9742 28.0002C31.9742 25.8044 30.1931 24.0233 27.9972 24.0233C25.8014 24.0233 24.0203 25.8044 24.0203 28.0002C24.0203 30.1961 25.8014 31.9772 27.9972 31.9772C30.1931 31.9772 31.9742 30.1961 31.9742 28.0002ZM25.4121 28.0002C25.4121 26.5777 26.5698 25.4154 27.9969 25.4154C29.4195 25.4154 30.5818 26.5731 30.5818 28.0002C30.5818 29.4274 29.4241 30.5851 27.9969 30.5851C26.5744 30.5851 25.4121 29.4228 25.4121 28.0002Z"
            fill="#ED543E"
          />
        </svg>
      ),
      title: "solutions.fulfillment-solutions.service_1_title",
      content:
        "solutions.fulfillment-solutions.service_1_content",
    },
    {
      icon: (
        <svg
          width="56"
          height="56"
          viewBox="0 0 56 56"
          fill="none"
          xmlns="http://www.w3.org/2000/svg"
        >
          <path
            d="M3.05344 15.0306C3.05344 22.6427 9.11948 28.8356 16.5758 28.8356C24.0321 28.8356 30.0982 22.6427 30.0982 15.0306C30.0982 7.41842 24.0321 1.22559 16.5758 1.22559C9.11948 1.22559 3.05344 7.41842 3.05344 15.0306ZM16.5758 3.0068C23.0699 3.0068 28.3533 8.40059 28.3533 15.0305C28.3533 21.6603 23.0699 27.0541 16.5758 27.0541C10.0817 27.0541 4.7983 21.6604 4.7983 15.0306C4.7983 8.4007 10.0817 3.0068 16.5758 3.0068Z"
            fill="#ED543E"
          />
          <path
            d="M14.3948 22.1555H15.7033V23.4914C15.7033 23.9833 16.0939 24.382 16.5757 24.382C17.0575 24.382 17.4481 23.9833 17.4481 23.4914V22.1555H18.7566C20.1998 22.1555 21.3739 20.9568 21.3739 19.4836V17.257C21.3739 15.538 20.0041 14.1397 18.3204 14.1397H14.8308C14.1093 14.1397 13.5223 13.5404 13.5223 12.8038V10.5772C13.5223 10.0861 13.9136 9.68656 14.3947 9.68656H18.7567C19.2378 9.68656 19.6291 10.0862 19.6291 10.5772V11.4678C19.6291 11.9596 20.0197 12.3584 20.5015 12.3584C20.9833 12.3584 21.3739 11.9596 21.3739 11.4678V10.5772C21.3739 9.10391 20.1998 7.90523 18.7566 7.90523H17.4481V6.56932C17.4481 6.07745 17.0575 5.67871 16.5757 5.67871C16.0939 5.67871 15.7033 6.07745 15.7033 6.56932V7.90523H14.3948C12.9516 7.90523 11.7775 9.10391 11.7775 10.5772V12.8038C11.7775 14.5227 13.1473 15.921 14.8309 15.921H18.3206C19.0421 15.921 19.6291 16.5203 19.6291 17.257V19.4836C19.6291 19.9747 19.2378 20.3742 18.7567 20.3742H14.3947C13.9136 20.3742 13.5223 19.9746 13.5223 19.4836V18.593C13.5223 18.1011 13.1317 17.7024 12.6499 17.7024C12.1681 17.7024 11.7775 18.1011 11.7775 18.593V19.4836C11.7775 20.9568 12.9517 22.1555 14.3948 22.1555Z"
            fill="#ED543E"
          />
          <path
            d="M52.6643 0.506152C52.1379 -0.263751 51.5641 -0.0389771 50.4098 0.412468C49.6298 0.717638 48.8496 1.0227 48.0695 1.32787C46.5759 1.91208 45.0824 2.49629 43.5888 3.0805C43.4468 3.13599 43.3048 3.1916 43.1628 3.24709C42.7129 3.42318 42.4878 3.93817 42.6602 4.39743C42.8326 4.85691 43.3371 5.08649 43.787 4.91062L50.4559 2.30211C48.4664 7.50272 44.0241 15.1189 36.9788 21.868C27.1294 31.3032 14.6314 36.6001 0.836174 37.1859C0.354705 37.2064 -0.0192482 37.6214 0.000767434 38.1128C0.0203456 38.5917 0.406767 38.9664 0.87183 38.9664C0.88408 38.9664 0.89633 38.9662 0.908689 38.9657C8.63199 38.6376 15.9357 36.9088 22.617 33.827C28.2831 31.2136 33.5167 27.627 38.1728 23.1667C45.2489 16.3883 49.7919 8.72016 51.9315 3.33106L54.3127 9.67598C54.4457 10.0306 54.7765 10.2482 55.1275 10.2482C55.2313 10.2482 55.3368 10.2293 55.4395 10.1891C55.8893 10.013 56.1144 9.49799 55.942 9.03873C55.4549 7.74067 54.9678 6.44272 54.4807 5.14466C54.013 3.8983 53.5646 2.48635 53.0281 1.20783C52.9049 0.91472 52.7858 0.683916 52.6643 0.506152Z"
            fill="#ED543E"
          />
          <path
            d="M52.7808 18.5928H45.8014C44.3582 18.5928 43.1842 19.7915 43.1842 21.2647V54.2186H41.0032V34.179C41.0032 32.7057 39.8291 31.507 38.3859 31.507H31.4066C29.9634 31.507 28.7894 32.7057 28.7894 34.179V54.2184H26.6083V40.8589C26.6083 39.3856 25.4343 38.1869 23.9911 38.1869H17.0117C15.5685 38.1869 14.3945 39.3856 14.3945 40.8589V54.2186H12.2135V43.5308C12.2135 42.0576 11.0394 40.8589 9.59623 40.8589H2.61723C1.17403 40.8589 0 42.0576 0 43.5308V55.1092C0 55.601 0.390578 55.9998 0.872375 55.9998H54.5256C55.0074 55.9998 55.398 55.601 55.398 55.1092V21.2647C55.398 19.7915 54.224 18.5928 52.7808 18.5928ZM44.9292 21.2647C44.9292 20.7736 45.3205 20.3741 45.8015 20.3741H52.7809C53.2619 20.3741 53.6533 20.7737 53.6533 21.2647V54.2186H44.9292V21.2647ZM30.5343 34.179C30.5343 33.6879 30.9257 33.2884 31.4067 33.2884H38.386C38.8671 33.2884 39.2584 33.688 39.2584 34.179V54.2184H30.5343V34.179ZM16.1396 40.8589C16.1396 40.3678 16.5309 39.9683 17.012 39.9683H23.9913C24.4723 39.9683 24.8637 40.3679 24.8637 40.8589V54.2186H16.1396V40.8589ZM2.61723 42.6402H9.59656C10.0776 42.6402 10.4689 43.0398 10.4689 43.5308V54.2186H1.74486V43.5308C1.74486 43.0397 2.1362 42.6402 2.61723 42.6402Z"
            fill="#ED543E"
          />
        </svg>
      ),
      title: "solutions.fulfillment-solutions.service_2_title",
      content:
        "solutions.fulfillment-solutions.service_2_content",
    },
    {
      icon: (
        <svg
          width="56"
          height="56"
          viewBox="0 0 56 56"
          fill="none"
          xmlns="http://www.w3.org/2000/svg"
        >
          <path
            d="M53.3217 38.9565H46.9285C47.1177 38.5896 47.2348 38.1797 47.2348 37.7391V26.0522C47.2348 24.5751 46.0336 23.3739 44.5565 23.3739H42.3652V8.52174C42.3652 5.97096 40.2899 3.89565 37.7391 3.89565H25.7506C25.3997 1.69052 23.4851 0 21.1826 0C18.8801 0 16.9655 1.69052 16.6146 3.89565H4.62609C2.07531 3.89565 0 5.97096 0 8.52174V51.3739C0 53.9247 2.07531 56 4.62609 56H35.7913C36.5607 56 37.2502 55.6695 37.7391 55.1483C38.228 55.6695 38.9176 56 39.687 56H53.3217C54.7988 56 56 54.7988 56 53.3217V41.6348C56 40.1577 54.7988 38.9565 53.3217 38.9565ZM44.313 40.4174H48.6957V44.5565C48.6957 44.6906 48.5863 44.8 48.4522 44.8H44.5565C44.4224 44.8 44.313 44.6906 44.313 44.5565V40.4174ZM45.7739 26.0522V37.7391C45.7739 38.4106 45.228 38.9565 44.5565 38.9565H30.9217C30.2502 38.9565 29.7043 38.4106 29.7043 37.7391V26.0522C29.7043 25.3807 30.2502 24.8348 30.9217 24.8348H34.087V28.9739C34.087 29.9135 34.8517 30.6783 35.7913 30.6783H39.687C40.6266 30.6783 41.3913 29.9135 41.3913 28.9739V24.8348H44.5565C45.228 24.8348 45.7739 25.3807 45.7739 26.0522ZM19.5923 40.9043H10.4696C10.0663 40.9043 9.73913 41.2315 9.73913 41.6348C9.73913 42.0381 10.0663 42.3652 10.4696 42.3652H19.4783V50.6435H5.35652V9.25217H11.801C12.1213 10.3728 13.1432 11.2 14.3652 11.2H28C29.2222 11.2 30.244 10.3728 30.5642 9.25217H37.0087V23.3739H10.4696C10.0663 23.3739 9.73913 23.701 9.73913 24.1043C9.73913 24.5076 10.0663 24.8348 10.4696 24.8348H28.5498C28.3605 25.2018 28.2435 25.6116 28.2435 26.0522V29.2174H10.4696C10.0663 29.2174 9.73913 29.5445 9.73913 29.9478C9.73913 30.3511 10.0663 30.6783 10.4696 30.6783H28.2435V35.0609H10.4696C10.0663 35.0609 9.73913 35.388 9.73913 35.7913C9.73913 36.1946 10.0663 36.5217 10.4696 36.5217H28.2435V37.7391C28.2435 38.1797 28.3605 38.5896 28.5498 38.9565H22.1565C20.9344 38.9565 19.9125 39.7838 19.5923 40.9043ZM35.5478 24.8348H39.9304V28.9739C39.9304 29.108 39.8211 29.2174 39.687 29.2174H35.7913C35.6572 29.2174 35.5478 29.108 35.5478 28.9739V24.8348ZM26.7826 40.4174H31.1652V44.5565C31.1652 44.6906 31.0558 44.8 30.9217 44.8H27.0261C26.892 44.8 26.7826 44.6906 26.7826 44.5565V40.4174ZM40.9043 8.52174V23.3739H38.4696V8.52174C38.4696 8.11844 38.1424 7.7913 37.7391 7.7913H30.6783V5.35652H37.7391C39.4844 5.35652 40.9043 6.77649 40.9043 8.52174ZM17.287 5.35652C17.6903 5.35652 18.0174 5.02938 18.0174 4.62609C18.0174 2.88083 19.4374 1.46087 21.1826 1.46087C22.9279 1.46087 24.3478 2.88083 24.3478 4.62609C24.3478 5.02938 24.675 5.35652 25.0783 5.35652H29.2174V8.52174C29.2174 9.19325 28.6715 9.73913 28 9.73913H14.3652C13.6937 9.73913 13.1478 9.19325 13.1478 8.52174V5.35652H17.287ZM1.46087 51.3739V8.52174C1.46087 6.77649 2.88083 5.35652 4.62609 5.35652H11.687V7.7913H4.62609C4.22279 7.7913 3.89565 8.11844 3.89565 8.52174V51.3739C3.89565 51.7772 4.22279 52.1043 4.62609 52.1043H19.4783V53.3217C19.4783 53.7623 19.5953 54.1722 19.7846 54.5391H4.62609C2.88083 54.5391 1.46087 53.1192 1.46087 51.3739ZM35.7913 54.5391H22.1565C21.485 54.5391 20.9391 53.9933 20.9391 53.3217V41.6348C20.9391 40.9633 21.485 40.4174 22.1565 40.4174H25.3217V44.5565C25.3217 45.4962 26.0865 46.2609 27.0261 46.2609H30.9217C31.8614 46.2609 32.6261 45.4962 32.6261 44.5565V40.4174H35.7913C36.4628 40.4174 37.0087 40.9633 37.0087 41.6348V53.3217C37.0087 53.9933 36.4628 54.5391 35.7913 54.5391ZM54.5391 53.3217C54.5391 53.9933 53.9933 54.5391 53.3217 54.5391H39.687C39.0154 54.5391 38.4696 53.9933 38.4696 53.3217V41.6348C38.4696 40.9633 39.0154 40.4174 39.687 40.4174H42.8522V44.5565C42.8522 45.4962 43.6169 46.2609 44.5565 46.2609H48.4522C49.3918 46.2609 50.1565 45.4962 50.1565 44.5565V40.4174H53.3217C53.9933 40.4174 54.5391 40.9633 54.5391 41.6348V53.3217ZM9.73913 18.2609C9.73913 17.8576 10.0663 17.5304 10.4696 17.5304H31.8957C32.299 17.5304 32.6261 17.8576 32.6261 18.2609C32.6261 18.6642 32.299 18.9913 31.8957 18.9913H10.4696C10.0663 18.9913 9.73913 18.6642 9.73913 18.2609Z"
            fill="#ED543E"
          />
        </svg>
      ),

      title: "solutions.fulfillment-solutions.service_3_title",
      content:
        "solutions.fulfillment-solutions.service_3_content",
    },
    {
      icon: (
        <svg
          width="54"
          height="56"
          viewBox="0 0 54 56"
          fill="none"
          xmlns="http://www.w3.org/2000/svg"
        >
          <path
            fill-rule="evenodd"
            clip-rule="evenodd"
            d="M44.3487 9.47988V4.90003L49.011 9.47988H44.3487ZM52.8157 10.713L43.0929 1.16273C42.3424 0.401852 41.4068 0 40.3868 0H15.935C15.6958 0 15.4666 0.0928543 15.2977 0.259306C15.1284 0.425204 15.0337 0.650423 15.0337 0.885159V5.41698C15.0337 5.90626 15.437 6.3028 15.9352 6.3028C16.4333 6.3028 16.8363 5.90638 16.8363 5.41698V1.77098H40.3869C40.924 1.77098 41.3869 1.97584 41.8022 2.3985C41.8058 2.40226 41.8095 2.40591 41.8133 2.40967L41.8851 2.47962C42.3114 2.91401 42.5461 3.48331 42.5461 4.0826V10.3657C42.5461 10.8544 42.9497 11.251 43.4475 11.251H49.8438C50.4542 11.251 51.0335 11.4815 51.4758 11.9008L51.5469 11.9702C51.5505 11.974 51.5545 11.9778 51.5581 11.9814C51.9882 12.3896 52.1972 12.8442 52.1972 13.3715V46.6098H49.6244C49.1266 46.6098 48.7229 47.0056 48.7229 47.4949C48.7229 47.9842 49.1265 48.3802 49.6244 48.3802H53.0988C53.5963 48.3802 54 47.9832 54 47.4949V13.3714C54 12.3692 53.5909 11.4499 52.8161 10.713H52.8157Z"
            fill="#ED543E"
          />
          <path
            fill-rule="evenodd"
            clip-rule="evenodd"
            d="M37.8312 17.1V12.5201L42.4935 17.1H37.8312ZM36.5754 8.78284C35.8249 8.02197 34.8893 7.62012 33.8694 7.62012H9.41733C9.17836 7.62012 8.94897 7.71352 8.78008 7.87942C8.61096 8.04532 8.51609 8.27054 8.51609 8.50528L8.51587 38.0153C8.51587 38.5046 8.91945 38.9012 9.41733 38.9012C9.91522 38.9012 10.3187 38.5047 10.3187 38.0153V9.39066H33.8694C34.4063 9.39066 34.8693 9.59662 35.2845 10.0187C35.2881 10.0225 35.292 10.0261 35.2956 10.0299L35.3671 10.1004C35.7933 10.5342 36.0286 11.103 36.0286 11.7023V17.9854C36.0286 18.4747 36.432 18.8712 36.9297 18.8712H43.3262C43.936 18.8712 44.5149 19.1017 44.9569 19.5201L45.029 19.591C45.0326 19.5948 45.0365 19.5984 45.0403 19.6016C45.4704 20.0092 45.6795 20.4639 45.6795 20.9917V54.2294H10.3187V50.5962C10.3187 50.1069 9.9151 49.7105 9.41733 49.7105C8.91956 49.7105 8.51587 50.1069 8.51587 50.5962V55.1147C8.51587 55.3494 8.61096 55.5752 8.78008 55.7411C8.94897 55.907 9.17836 55.9999 9.41733 55.9999H46.5808C47.0786 55.9999 47.4821 55.6039 47.4821 55.1146V20.9916C47.4821 19.9894 47.0727 19.0706 46.2984 18.3338L36.5754 8.78284Z"
            fill="#ED543E"
          />
          <path
            fill-rule="evenodd"
            clip-rule="evenodd"
            d="M13.3166 43.4774C13.1993 43.908 12.9202 44.2666 12.5313 44.4879L4.34119 49.1329C3.5329 49.5907 2.49578 49.3175 2.02911 48.5241C1.56244 47.7306 1.84028 46.7109 2.64856 46.2531L10.8387 41.6081C11.0969 41.4619 11.3845 41.3867 11.6768 41.3867C11.825 41.3867 11.9745 41.4054 12.1222 41.4453C12.5608 41.5605 12.926 41.8338 13.1507 42.2169C13.3753 42.5984 13.4344 43.0467 13.3166 43.4773V43.4774ZM16.0677 41.3046L14.9857 41.9192C14.9138 41.7165 14.8228 41.5206 14.7118 41.3312C14.6007 41.1423 14.4726 40.9662 14.3307 40.8045L15.411 40.1914C15.612 40.5746 15.8313 40.9454 16.0677 41.3046ZM27.517 22.4628C21.0016 22.4628 15.701 27.6696 15.701 34.069C15.701 40.4684 21.0018 45.6752 27.517 45.6752C34.0321 45.6752 39.3329 40.4695 39.3329 34.069C39.3329 27.6685 34.0323 22.4628 27.517 22.4628ZM15.058 43.9358C15.0594 43.9299 15.0604 43.9256 15.0619 43.9203L17.1513 42.7347C19.6512 45.6156 23.3703 47.4463 27.5168 47.4463C35.0262 47.4463 41.1354 41.4456 41.1354 34.0691C41.1354 26.6927 35.0262 20.6919 27.5168 20.6919C20.0075 20.6919 13.8983 26.6932 13.8983 34.0691C13.8983 35.6427 14.1772 37.1538 14.6877 38.5572L12.6039 39.7391C12.5988 39.738 12.5936 39.7353 12.5886 39.7343C11.6846 39.4969 10.7431 39.6175 9.93723 40.0742L1.74687 44.7191C0.0779105 45.6657 -0.496025 47.7692 0.46752 49.4094C1.11424 50.5097 2.29152 51.125 3.50045 51.125C4.0932 51.125 4.69328 50.9777 5.2422 50.6656L13.4323 46.0216C14.2385 45.5638 14.8158 44.8232 15.0579 43.9358H15.058Z"
            fill="#ED543E"
          />
          <path
            fill-rule="evenodd"
            clip-rule="evenodd"
            d="M19.1841 34.0689C21.2171 31.6208 24.2846 30.1769 27.517 30.1769C30.7494 30.1769 33.8169 31.6208 35.8498 34.0689C33.8169 36.5171 30.7494 37.9615 27.517 37.9615C24.2846 37.9615 21.2171 36.5171 19.1841 34.0689ZM37.7169 34.5848C37.942 34.2769 37.942 33.8607 37.7169 33.5534C35.3626 30.3305 31.5496 28.4058 27.5171 28.4058C23.4846 28.4058 19.6715 30.3305 17.3172 33.5534C17.0919 33.8607 17.0919 34.2769 17.3172 34.5848C19.6713 37.8077 23.4845 39.7319 27.5171 39.7319C31.5498 39.7319 35.3626 37.8077 37.7169 34.5848Z"
            fill="#ED543E"
          />
          <path
            fill-rule="evenodd"
            clip-rule="evenodd"
            d="M26.0543 34.0693C26.0543 33.2768 26.7104 32.6328 27.517 32.6328C28.3236 32.6328 28.9794 33.2768 28.9794 34.0693C28.9794 34.8617 28.3233 35.5057 27.517 35.5057C26.7106 35.5057 26.0543 34.8617 26.0543 34.0693ZM30.7822 34.0693C30.7822 32.3009 29.3174 30.8623 27.517 30.8623C25.7165 30.8623 24.2517 32.3008 24.2517 34.0693C24.2517 35.8377 25.7165 37.2767 27.517 37.2767C29.3174 37.2767 30.7822 35.838 30.7822 34.0693Z"
            fill="#ED543E"
          />
          <path
            fill-rule="evenodd"
            clip-rule="evenodd"
            d="M14.0056 49.8929C14.0056 50.3822 14.4093 50.7787 14.9071 50.7787H41.0912C41.589 50.7787 41.9927 50.3822 41.9927 49.8929C41.9927 49.4036 41.5891 49.0076 41.0912 49.0076H14.9071C14.4093 49.0076 14.0056 49.4041 14.0056 49.8929ZM14.9071 19.131H30.4122C30.91 19.131 31.3137 18.7346 31.3137 18.2458C31.3137 17.7569 30.9101 17.36 30.4122 17.36H14.9071C14.4093 17.36 14.0056 17.7565 14.0056 18.2458C14.0056 18.735 14.4093 19.131 14.9071 19.131ZM14.9071 14.7657H30.4122C30.91 14.7657 31.3137 14.3697 31.3137 13.8804C31.3137 13.3911 30.9101 12.9951 30.4122 12.9951H14.9071C14.4093 12.9951 14.0056 13.3915 14.0056 13.8804C14.0056 14.3692 14.4093 14.7657 14.9071 14.7657Z"
            fill="#ED543E"
          />
        </svg>
      ),

      title: "solutions.fulfillment-solutions.service_4_title",
      content:
        "solutions.fulfillment-solutions.service_4_content",
    },
    {
      icon: (
        <svg
          width="58"
          height="56"
          viewBox="0 0 58 56"
          fill="none"
          xmlns="http://www.w3.org/2000/svg"
        >
          <path
            d="M27.6293 15.4341L11.9491 20.6819L29.0351 28.4693L46.1212 20.9016L33.3635 16.5087V14.1364L49.5479 19.7064C50.0452 19.909 50.3465 20.362 50.3023 20.8663C50.3057 20.8902 50.3057 20.9187 50.3057 20.946V41.4897L53.9986 43.6309L53.277 41.4442C52.8692 40.1647 55.6208 38.9853 56.177 40.9991L57.9385 46.2286C58.1696 47.1086 57.7358 47.886 56.8635 48.1365L51.4374 49.2498C49.6634 49.7097 48.7017 47.0619 50.6705 46.3652L52.6574 46.0078L39.4693 38.3581C38.8203 37.9802 38.5971 37.1446 38.972 36.4912C39.347 35.8378 40.1796 35.6147 40.8287 35.9915L48.0639 40.1886V22.4942L30.1464 30.4284V53.0473L45.2376 45.3396L47.5462 46.6783L29.6072 55.8385C29.4275 55.947 29.2213 56.0029 29.0117 55.9999C28.8022 55.9969 28.5976 55.9351 28.4211 55.8214L10.703 46.5337L12.9924 45.2064L27.908 53.0257V30.4182L9.92817 22.2266V40.192L17.1713 35.9915C17.8204 35.6147 18.653 35.8378 19.028 36.4912C19.4029 37.1446 19.1798 37.9802 18.5307 38.3581L5.34259 46.0078L7.32953 46.3652C9.29833 47.0619 8.33659 49.7097 6.56262 49.2498L1.13651 48.1365C0.264249 47.886 -0.169613 47.1086 0.0614782 46.2286L1.82298 40.9991C2.37919 38.9853 5.13076 40.1647 4.72295 41.4442L4.00136 43.6309L7.69429 41.4897L7.69089 20.5373C7.69089 19.9249 8.10663 19.6494 8.6515 19.4229L27.6293 13.0744L27.6282 5.21524L26.1034 6.93641C25.2051 7.93019 22.8126 6.12591 24.2706 4.63468L27.8989 0.487697C28.5412 -0.154328 29.4282 -0.164573 30.0796 0.469484L33.751 4.63468C35.0344 5.94833 33.2344 8.10891 31.6496 6.74403L30.348 5.19475L30.3492 20.4964C30.348 21.2499 29.7397 21.8612 28.9887 21.8624C28.2376 21.8624 27.6293 21.2499 27.6293 20.4964V15.4341Z"
            fill="#ED543E"
          />
        </svg>
      ),

      title: "solutions.fulfillment-solutions.service_5_title",
      content:
        "solutions.fulfillment-solutions.service_5_content",
    },
  ];
  //data number
  const dataNumber = [
    {
      icon: (
        <svg
          width="82"
          height="82"
          viewBox="0 0 82 82"
          fill="none"
          xmlns="http://www.w3.org/2000/svg"
        >
          <path
            fill-rule="evenodd"
            clip-rule="evenodd"
            d="M80.9991 48.9694C80.9991 49.6605 80.4367 50.2203 79.75 50.2203C79.0555 50.2203 78.501 49.6613 78.501 48.9694V17.1987H56.1668V24.2371C56.1668 25.2759 55.8678 26.2469 55.3315 27.0709C54.8039 27.8915 54.039 28.553 53.0802 28.9764C52.131 29.4014 51.1192 29.5292 50.1613 29.3762C49.1938 29.2224 48.2707 28.7903 47.4971 28.0949L40.9996 22.2448L34.5012 28.0949C33.7275 28.7903 32.8131 29.2224 31.8457 29.3762C30.8782 29.5292 29.876 29.4006 28.9172 28.9764C27.968 28.553 27.2022 27.8915 26.6668 27.0709C26.1304 26.2469 25.8401 25.2759 25.8401 24.2371V17.1987H3.506V72.5177C3.506 74.1641 4.17444 75.6601 5.25577 76.7432C6.34579 77.8272 7.84088 78.5 9.48547 78.5H49.3529C50.0474 78.5 50.602 79.0589 50.602 79.7491C50.602 80.4393 50.0483 81 49.3529 81H9.48547C7.14636 81 5.02716 80.0464 3.48862 78.5113C1.95877 76.9753 1 74.8543 1 72.5177V9.48227C1 7.14482 1.95877 5.02469 3.48862 3.4887C5.02716 1.95271 7.14636 1 9.48547 1H72.5232C74.8528 1 76.972 1.95271 78.5114 3.4887C80.0499 5.02469 81 7.14482 81 9.48227L80.9991 48.9694ZM78.5018 14.6978V9.4814C78.5018 7.83414 77.8247 6.33988 76.7434 5.25504C75.662 4.17107 74.1669 3.49913 72.5232 3.49913H56.1677V14.6978H78.5018ZM25.8401 14.6978V3.5H9.48547C7.84175 3.5 6.34666 4.17194 5.25577 5.25591C4.17444 6.33988 3.506 7.83501 3.506 9.48227V14.6987L25.8401 14.6978ZM67.9945 58.3983L61.3553 65.0351L58.0931 61.7719C57.6098 61.2843 56.8179 61.2843 56.3259 61.7719C55.8426 62.2604 55.8426 63.0515 56.3259 63.54L60.4765 67.6864C60.9598 68.1749 61.7517 68.1749 62.2437 67.6864L69.7617 60.1664C70.245 59.6779 70.245 58.8868 69.7617 58.3992C69.2688 57.9106 68.4778 57.9098 67.9945 58.3983ZM63.0442 47.5864C58.7798 47.5864 54.9108 49.3162 52.1145 52.1135C49.3181 54.9108 47.5858 58.7747 47.5858 63.0428C47.5858 67.3109 49.3181 71.1756 52.1145 73.972C54.9108 76.7693 58.7798 78.5 63.0442 78.5C67.3087 78.5 71.1777 76.7693 73.974 73.972C76.7703 71.1756 78.5018 67.3109 78.5018 63.0428C78.5018 58.7747 76.7694 54.9108 73.974 52.1135C71.1777 49.3162 67.3087 47.5864 63.0442 47.5864ZM50.3473 50.3454C47.1025 53.5947 45.0893 58.0845 45.0893 63.0419C45.0893 67.9993 47.1033 72.4899 50.3473 75.7383C53.6009 78.9885 58.0852 80.9983 63.0442 80.9983C68.0032 80.9983 72.4885 78.9885 75.7411 75.7383C78.9947 72.489 80.9991 68.0002 80.9991 63.0419C80.9991 58.0836 78.9938 53.5947 75.7411 50.3454C72.4876 47.0961 68.0032 45.0864 63.0442 45.0864C58.0852 45.0864 53.6009 47.0961 50.3473 50.3454ZM11.7637 67.0944H27.0901C27.7759 67.0944 28.3383 66.5337 28.3383 65.8435C28.3383 65.1533 27.7759 64.5944 27.0901 64.5944H11.7637C11.0779 64.5944 10.5146 65.1542 10.5146 65.8435C10.5146 66.5329 11.077 67.0944 11.7637 67.0944ZM53.6617 3.5H28.3374V24.2363C28.3374 24.79 28.4869 25.2959 28.759 25.7123C29.0311 26.133 29.4274 26.4755 29.9377 26.6998C30.4384 26.9232 30.9573 26.9918 31.4502 26.9136C31.9508 26.8354 32.4263 26.6076 32.8305 26.2382L40.1642 19.6431C40.6301 19.2137 41.3507 19.2032 41.8349 19.637L49.1686 26.2382C49.5815 26.6076 50.057 26.8354 50.549 26.9136C51.041 26.9918 51.5686 26.9232 52.0701 26.6998C52.5717 26.4755 52.9759 26.1321 53.248 25.7123C53.5209 25.2959 53.6617 24.79 53.6617 24.2363V3.5Z"
            fill="white"
            stroke="white"
          />
        </svg>
      ),
      number: "99.9",
      unit: "%",
      content: "Xử lý đơn hàng chính xác",
    },
    {
      icon: (
        <svg
          width="74"
          height="80"
          viewBox="0 0 74 80"
          fill="none"
          xmlns="http://www.w3.org/2000/svg"
        >
          <path
            fill-rule="evenodd"
            clip-rule="evenodd"
            d="M37.1585 57.831C31.5375 57.831 27 53.4873 27 48.1295C27 47.4196 27.5757 46.8619 28.3206 46.8619C29.0656 46.8619 29.6412 47.4196 29.6412 48.1295C29.6412 52.0675 33.0274 55.3126 37.1585 55.3126C41.2897 55.3126 44.6759 52.0844 44.6759 48.1295C44.6759 42.6872 41.205 41.8928 36.8368 40.9464C32.4517 39.9154 27.0169 38.7323 27.0169 31.3294C27.0169 25.9716 31.5544 21.6279 37.1755 21.6279C42.7965 21.6279 47.334 25.9716 47.334 31.3294C47.334 32.0393 46.7584 32.597 46.0134 32.597C45.2684 32.597 44.6928 32.0393 44.6928 31.3294C44.6928 27.3913 41.3066 24.1463 37.1755 24.1463C33.0443 24.1463 29.6581 27.3744 29.6581 31.3294C29.6581 36.7717 33.129 37.5661 37.4972 38.5125C41.8653 39.5266 47.3171 40.7097 47.3171 48.1295C47.3171 53.4873 42.7796 57.831 37.1585 57.831Z"
            fill="white"
            stroke="white"
            stroke-miterlimit="10"
          />
          <path
            fill-rule="evenodd"
            clip-rule="evenodd"
            d="M37.1585 23.4198C36.4136 23.4198 35.8379 22.862 35.8379 22.1522V17.2676C35.8379 16.5577 36.4136 16 37.1585 16C37.9035 16 38.4791 16.5577 38.4791 17.2676V22.0845C38.4791 22.7944 37.9035 23.4198 37.1585 23.4198Z"
            fill="white"
            stroke="white"
            stroke-miterlimit="10"
          />
          <path
            fill-rule="evenodd"
            clip-rule="evenodd"
            d="M37.1585 63.9998C36.4136 63.9998 35.8379 63.4421 35.8379 62.7322V57.8477C35.8379 57.1378 36.4136 56.5801 37.1585 56.5801C37.9035 56.5801 38.4791 57.1378 38.4791 57.8477V62.6646C38.4791 63.3745 37.9035 63.9998 37.1585 63.9998Z"
            fill="white"
            stroke="white"
            stroke-miterlimit="10"
          />
          <path
            d="M23.688 10.192C27.8 8.456 32.168 7.568 36.672 7.568C55.064 7.568 70.032 22.536 70.032 40.928C70.032 45.968 68.936 50.808 66.776 55.32C66.384 56.144 66.728 57.136 67.552 57.528C67.784 57.64 68.024 57.688 68.264 57.688C68.88 57.688 69.472 57.344 69.76 56.744C72.136 51.784 73.344 46.464 73.344 40.92C73.344 20.712 56.888 4.256 36.672 4.256C31.72 4.256 26.92 5.224 22.4 7.136C21.56 7.496 21.16 8.464 21.52 9.304C21.872 10.152 22.848 10.552 23.688 10.192ZM44.112 73.456C41.688 74.008 39.184 74.288 36.672 74.288C18.28 74.288 3.312 59.32 3.312 40.928C3.312 36.848 4.04 32.872 5.472 29.096C5.8 28.24 5.368 27.288 4.512 26.96C3.656 26.632 2.704 27.064 2.376 27.92C0.8 32.072 0 36.448 0 40.928C0 61.152 16.456 77.6 36.672 77.6C39.432 77.6 42.184 77.296 44.848 76.688C45.736 76.488 46.296 75.6 46.096 74.704C45.896 73.808 45.008 73.248 44.112 73.456ZM13.488 27.952L23.104 18.336C23.752 17.688 23.752 16.64 23.104 15.992C22.456 15.344 21.408 15.344 20.76 15.992L15.144 21.608V1.656C15.144 0.744 14.4 0 13.488 0C12.576 0 11.832 0.744 11.832 1.656V21.616L6.216 16C5.568 15.352 4.52 15.352 3.872 16C3.224 16.648 3.224 17.696 3.872 18.344L13.488 27.952ZM67.128 68.04L61.512 73.656V53.704C61.512 52.792 60.768 52.048 59.856 52.048C58.944 52.048 58.2 52.792 58.2 53.704V73.664L52.584 68.048C51.936 67.4 50.888 67.4 50.24 68.048C49.592 68.696 49.592 69.744 50.24 70.392L59.856 80L69.472 70.384C70.12 69.736 70.12 68.688 69.472 68.04C68.824 67.4 67.776 67.4 67.128 68.04Z"
            fill="white"
          />
        </svg>
      ),
      number: "50",
      unit: "%",
      content: "Giảm chi phí logistics",
    },
    {
      icon: (
        <svg
          width="80"
          height="82"
          viewBox="0 0 80 82"
          fill="none"
          xmlns="http://www.w3.org/2000/svg"
        >
          <path
            fill-rule="evenodd"
            clip-rule="evenodd"
            d="M5.00851 49.2096H17.6873C18.109 49.2096 18.5168 49.377 18.813 49.6769C18.8409 49.7083 18.8687 49.7397 18.8931 49.771C19.1441 50.0605 19.28 50.4266 19.28 50.8068V75.1129C19.2765 75.9917 18.5655 76.6996 17.6873 76.703H5.00845C4.58676 76.6996 4.18597 76.5322 3.88975 76.2323L3.88278 76.2253V76.2288C3.58654 75.9289 3.41926 75.5279 3.41926 75.1094V50.8006C3.42274 50.3786 3.59003 49.9741 3.88974 49.6777L3.89671 49.6707V49.6742C4.19295 49.3778 4.59373 49.2104 5.01194 49.2104L5.00851 49.2096ZM2.02113 80.9997C1.75278 81.0066 1.49488 80.9055 1.29972 80.7207C1.10804 80.5324 1 80.2778 1 80.0093C1 79.7408 1.10803 79.4827 1.29972 79.2979C1.49488 79.1096 1.75278 79.0085 2.02113 79.0189H77.9789C78.2472 79.0085 78.5051 79.1096 78.7003 79.2979C78.892 79.4827 79 79.7408 79 80.0093C79 80.2778 78.892 80.5324 78.7003 80.7207C78.5051 80.9055 78.2472 81.0066 77.9789 80.9997H2.02113ZM61.3334 3.96989L65.986 3.34568L49.3379 20.7261C49.3309 20.74 49.3169 20.747 49.303 20.7505C49.2891 20.754 49.2751 20.7505 49.2612 20.7435L31.5085 13.3646C30.7174 13.0334 29.8043 13.2321 29.2258 13.8633L10.622 33.9317C10.4338 34.12 10.3327 34.3781 10.3362 34.6466C10.3432 34.9151 10.4582 35.1697 10.6534 35.351C10.8485 35.5323 11.1099 35.6265 11.3783 35.616C11.6431 35.6021 11.8941 35.48 12.0718 35.2778L30.672 15.2058C30.679 15.1953 30.6929 15.1884 30.7069 15.1814C30.7208 15.1814 30.7348 15.1814 30.7487 15.1884L48.5013 22.5742C49.2785 22.9055 50.1811 22.7172 50.7632 22.1034L67.5193 4.60162L67.2579 9.45231C67.2335 9.72083 67.3206 9.98586 67.4984 10.1881C67.6726 10.3904 67.9235 10.5089 68.1919 10.5229C68.4602 10.5368 68.7216 10.4427 68.9168 10.2579C69.112 10.0765 69.227 9.82195 69.2305 9.55344L69.6382 2.04198C69.6522 1.74906 69.5371 1.46311 69.3211 1.26085C69.105 1.06208 68.8122 0.967931 68.5195 1.00977L61.0718 2.01409C60.5386 2.09429 60.1657 2.58598 60.2389 3.12303C60.3121 3.65657 60.7967 4.03611 61.3334 3.96989ZM62.3128 16.5939H74.9916C75.4133 16.5939 75.821 16.7613 76.1172 17.0612C76.1451 17.0926 76.173 17.1239 76.1974 17.1553C76.4448 17.4448 76.5842 17.8109 76.5842 18.1911V75.1128C76.5808 75.9916 75.8698 76.6995 74.9915 76.703H62.3127C61.891 76.6995 61.4902 76.5321 61.194 76.2322L61.187 76.2252V76.2287C60.8908 75.9323 60.72 75.5278 60.7165 75.1093V18.1875C60.72 17.7656 60.8873 17.3646 61.187 17.0682L61.194 17.0612C61.4902 16.7648 61.891 16.5974 62.3127 16.5974L62.3128 16.5939ZM74.6008 18.5781V74.7224H62.7027V18.5781H74.6008ZM43.2103 36.5406H55.8891C56.3108 36.5371 56.7185 36.708 57.0147 37.0079C57.0461 37.0393 57.0705 37.0707 57.0984 37.1021C57.3458 37.3915 57.4817 37.7576 57.4817 38.1378V75.1126C57.4782 75.9913 56.7673 76.6992 55.889 76.7027H43.2102C42.7885 76.7027 42.3807 76.5318 42.0845 76.2319C41.7813 75.9355 41.614 75.5275 41.614 75.1056V38.1308C41.6175 37.7088 41.7848 37.3078 42.0845 37.0114L42.0915 37.0044C42.3877 36.708 42.7886 36.5406 43.2103 36.5406ZM55.4983 38.5249L43.6001 38.5214V74.7222H55.4983V38.5214V38.5249ZM24.1077 28.5969H36.7865C37.2082 28.5969 37.616 28.7643 37.9122 29.0642C37.9436 29.0956 37.9715 29.127 37.9958 29.1583C38.2433 29.4478 38.3792 29.8139 38.3792 30.1941V75.1123C38.3757 75.9911 37.6648 76.6989 36.7865 76.7024H24.1077C23.686 76.7024 23.2782 76.5316 22.982 76.2317C22.6788 75.9352 22.5115 75.5272 22.5115 75.1053V30.1871C22.5115 29.7651 22.6823 29.3606 22.982 29.0642L22.989 29.0572L22.9855 29.0607C23.2852 28.7643 23.686 28.5969 24.1042 28.5934L24.1077 28.5969ZM36.3958 30.5777V74.7219H24.4976V30.5777H36.3958ZM17.2941 51.1906H5.39599V74.7219H17.2941V51.1906Z"
            fill="white"
            stroke="white"
          />
        </svg>
      ),

      number: "3",
      unit: "lần",
      content: "Doanh số tăng trưởng",
    },
  ];
  // data logo
  const [activeTab, setActiveTab] = useState("ecommerce");
  const currentLogos =
    activeTab === "ecommerce"
      ? dataLogoEcommercePlatform
      : dataLogoLogisticsPartner;
  //data step
  const dataStep = [
    {
      number: (
        <svg
          width="80"
          height="80"
          viewBox="0 0 80 80"
          fill="none"
          xmlns="http://www.w3.org/2000/svg"
        >
          <path
            d="M40 80C62.0914 80 80 62.0914 80 40C80 17.9086 62.0914 0 40 0C17.9086 0 0 17.9086 0 40C0 62.0914 17.9086 80 40 80Z"
            fill="#F36F5B"
          />
          <path
            d="M31.16 56.6C29.12 56.6 27.32 56.1667 25.76 55.3C24.2 54.42 22.98 53.2 22.1 51.64C21.2333 50.08 20.8 48.28 20.8 46.24V36.96C20.8 34.92 21.2333 33.12 22.1 31.56C22.98 30 24.2 28.7867 25.76 27.92C27.32 27.04 29.12 26.6 31.16 26.6C33.2 26.6 34.9933 27.04 36.54 27.92C38.1 28.7867 39.32 30 40.2 31.56C41.08 33.12 41.52 34.92 41.52 36.96V46.24C41.52 48.28 41.08 50.08 40.2 51.64C39.32 53.2 38.1 54.42 36.54 55.3C34.9933 56.1667 33.2 56.6 31.16 56.6ZM31.16 52.02C32.1733 52.02 33.0933 51.78 33.92 51.3C34.7467 50.8067 35.4 50.1533 35.88 49.34C36.36 48.5133 36.6 47.5933 36.6 46.58V36.6C36.6 35.5733 36.36 34.6533 35.88 33.84C35.4 33.0133 34.7467 32.36 33.92 31.88C33.0933 31.3867 32.1733 31.14 31.16 31.14C30.1467 31.14 29.2267 31.3867 28.4 31.88C27.5733 32.36 26.92 33.0133 26.44 33.84C25.96 34.6533 25.72 35.5733 25.72 36.6V46.58C25.72 47.5933 25.96 48.5133 26.44 49.34C26.92 50.1533 27.5733 50.8067 28.4 51.3C29.2267 51.78 30.1467 52.02 31.16 52.02ZM52.1281 56V32.46L46.7281 35.76V30.44L52.1281 27.2H57.0481V56H52.1281Z"
            fill="white"
          />
        </svg>
      ),
      image: "/images/example/img_fulfillment_solutions_step_1.png",
      alt: "step 1",
      content: "solutions.fulfillment-solutions.procedure_step_1",
    },
    {
      number: (
        <svg
          width="80"
          height="80"
          viewBox="0 0 80 80"
          fill="none"
          xmlns="http://www.w3.org/2000/svg"
        >
          <path
            d="M40 80C62.0914 80 80 62.0914 80 40C80 17.9086 62.0914 0 40 0C17.9086 0 0 17.9086 0 40C0 62.0914 17.9086 80 40 80Z"
            fill="#F36F5B"
          />
          <path
            d="M31.16 56.6C29.12 56.6 27.32 56.1667 25.76 55.3C24.2 54.42 22.98 53.2 22.1 51.64C21.2333 50.08 20.8 48.28 20.8 46.24V36.96C20.8 34.92 21.2333 33.12 22.1 31.56C22.98 30 24.2 28.7867 25.76 27.92C27.32 27.04 29.12 26.6 31.16 26.6C33.2 26.6 34.9933 27.04 36.54 27.92C38.1 28.7867 39.32 30 40.2 31.56C41.08 33.12 41.52 34.92 41.52 36.96V46.24C41.52 48.28 41.08 50.08 40.2 51.64C39.32 53.2 38.1 54.42 36.54 55.3C34.9933 56.1667 33.2 56.6 31.16 56.6ZM31.16 52.02C32.1733 52.02 33.0933 51.78 33.92 51.3C34.7467 50.8067 35.4 50.1533 35.88 49.34C36.36 48.5133 36.6 47.5933 36.6 46.58V36.6C36.6 35.5733 36.36 34.6533 35.88 33.84C35.4 33.0133 34.7467 32.36 33.92 31.88C33.0933 31.3867 32.1733 31.14 31.16 31.14C30.1467 31.14 29.2267 31.3867 28.4 31.88C27.5733 32.36 26.92 33.0133 26.44 33.84C25.96 34.6533 25.72 35.5733 25.72 36.6V46.58C25.72 47.5933 25.96 48.5133 26.44 49.34C26.92 50.1533 27.5733 50.8067 28.4 51.3C29.2267 51.78 30.1467 52.02 31.16 52.02ZM46.3281 55.96V51.76L58.6481 40.78C59.6081 39.9267 60.2748 39.12 60.6481 38.36C61.0215 37.6 61.2081 36.8667 61.2081 36.16C61.2081 35.2 61.0015 34.3467 60.5881 33.6C60.1748 32.84 59.6015 32.24 58.8681 31.8C58.1481 31.36 57.3148 31.14 56.3681 31.14C55.3681 31.14 54.4815 31.3733 53.7081 31.84C52.9481 32.2933 52.3548 32.9 51.9281 33.66C51.5015 34.42 51.3015 35.24 51.3281 36.12H46.3681C46.3681 34.2 46.7948 32.5267 47.6481 31.1C48.5148 29.6733 49.7015 28.5667 51.2081 27.78C52.7281 26.9933 54.4815 26.6 56.4681 26.6C58.3081 26.6 59.9615 27.0133 61.4281 27.84C62.8948 28.6533 64.0481 29.7867 64.8881 31.24C65.7281 32.68 66.1481 34.34 66.1481 36.22C66.1481 37.5933 65.9615 38.7467 65.5881 39.68C65.2148 40.6133 64.6548 41.4733 63.9081 42.26C63.1748 43.0467 62.2615 43.92 61.1681 44.88L52.4281 52.62L51.9881 51.42H66.1481V55.96H46.3281Z"
            fill="white"
          />
        </svg>
      ),

      image: "/images/example/img_fulfillment_solutions_step_2.png",
      alt: "step 2",
      content: "solutions.fulfillment-solutions.procedure_step_2",
    },
    {
      number: (
        <svg
          width="80"
          height="80"
          viewBox="0 0 80 80"
          fill="none"
          xmlns="http://www.w3.org/2000/svg"
        >
          <path
            d="M40 80C62.0914 80 80 62.0914 80 40C80 17.9086 62.0914 0 40 0C17.9086 0 0 17.9086 0 40C0 62.0914 17.9086 80 40 80Z"
            fill="#F36F5B"
          />
          <path
            d="M31.16 56.6C29.12 56.6 27.32 56.1667 25.76 55.3C24.2 54.42 22.98 53.2 22.1 51.64C21.2333 50.08 20.8 48.28 20.8 46.24V36.96C20.8 34.92 21.2333 33.12 22.1 31.56C22.98 30 24.2 28.7867 25.76 27.92C27.32 27.04 29.12 26.6 31.16 26.6C33.2 26.6 34.9933 27.04 36.54 27.92C38.1 28.7867 39.32 30 40.2 31.56C41.08 33.12 41.52 34.92 41.52 36.96V46.24C41.52 48.28 41.08 50.08 40.2 51.64C39.32 53.2 38.1 54.42 36.54 55.3C34.9933 56.1667 33.2 56.6 31.16 56.6ZM31.16 52.02C32.1733 52.02 33.0933 51.78 33.92 51.3C34.7467 50.8067 35.4 50.1533 35.88 49.34C36.36 48.5133 36.6 47.5933 36.6 46.58V36.6C36.6 35.5733 36.36 34.6533 35.88 33.84C35.4 33.0133 34.7467 32.36 33.92 31.88C33.0933 31.3867 32.1733 31.14 31.16 31.14C30.1467 31.14 29.2267 31.3867 28.4 31.88C27.5733 32.36 26.92 33.0133 26.44 33.84C25.96 34.6533 25.72 35.5733 25.72 36.6V46.58C25.72 47.5933 25.96 48.5133 26.44 49.34C26.92 50.1533 27.5733 50.8067 28.4 51.3C29.2267 51.78 30.1467 52.02 31.16 52.02ZM55.3681 56.54C53.9281 56.54 52.5681 56.26 51.2881 55.7C50.0081 55.14 48.8948 54.3467 47.9481 53.32C47.0148 52.2933 46.3415 51.08 45.9281 49.68L50.5881 48.42C50.9215 49.5667 51.5281 50.4533 52.4081 51.08C53.3015 51.6933 54.2815 51.9933 55.3481 51.98C56.2948 51.98 57.1415 51.76 57.8881 51.32C58.6348 50.88 59.2215 50.2867 59.6481 49.54C60.0748 48.78 60.2881 47.9333 60.2881 47C60.2881 45.5733 59.8281 44.38 58.9081 43.42C57.9881 42.46 56.8015 41.98 55.3481 41.98C54.9081 41.98 54.4748 42.04 54.0481 42.16C53.6348 42.28 53.2348 42.4467 52.8481 42.66L50.6481 38.86L60.3281 30.58L60.7481 31.74H47.0481V27.2H64.7081V31.76L56.9281 39.24L56.8881 37.82C58.6348 37.94 60.1215 38.4267 61.3481 39.28C62.5881 40.1333 63.5348 41.2333 64.1881 42.58C64.8548 43.9267 65.1881 45.4 65.1881 47C65.1881 48.8133 64.7415 50.44 63.8481 51.88C62.9681 53.32 61.7815 54.46 60.2881 55.3C58.8081 56.1267 57.1681 56.54 55.3681 56.54Z"
            fill="white"
          />
        </svg>
      ),

      image: "/images/example/img_fulfillment_solutions_step_3.png",
      alt: "step 3",
      content: "solutions.fulfillment-solutions.procedure_step_3",
    },
    {
      number: (
        <svg
          width="81"
          height="80"
          viewBox="0 0 81 80"
          fill="none"
          xmlns="http://www.w3.org/2000/svg"
        >
          <path
            d="M40.9231 80C63.0145 80 80.9231 62.0914 80.9231 40C80.9231 17.9086 63.0145 0 40.9231 0C18.8317 0 0.923096 17.9086 0.923096 40C0.923096 62.0914 18.8317 80 40.9231 80Z"
            fill="#F36F5B"
          />
          <path
            d="M32.0831 56.6C30.0431 56.6 28.2431 56.1667 26.6831 55.3C25.1231 54.42 23.9031 53.2 23.0231 51.64C22.1564 50.08 21.7231 48.28 21.7231 46.24V36.96C21.7231 34.92 22.1564 33.12 23.0231 31.56C23.9031 30 25.1231 28.7867 26.6831 27.92C28.2431 27.04 30.0431 26.6 32.0831 26.6C34.1231 26.6 35.9164 27.04 37.4631 27.92C39.0231 28.7867 40.2431 30 41.1231 31.56C42.0031 33.12 42.4431 34.92 42.4431 36.96V46.24C42.4431 48.28 42.0031 50.08 41.1231 51.64C40.2431 53.2 39.0231 54.42 37.4631 55.3C35.9164 56.1667 34.1231 56.6 32.0831 56.6ZM32.0831 52.02C33.0964 52.02 34.0164 51.78 34.8431 51.3C35.6698 50.8067 36.3231 50.1533 36.8031 49.34C37.2831 48.5133 37.5231 47.5933 37.5231 46.58V36.6C37.5231 35.5733 37.2831 34.6533 36.8031 33.84C36.3231 33.0133 35.6698 32.36 34.8431 31.88C34.0164 31.3867 33.0964 31.14 32.0831 31.14C31.0698 31.14 30.1498 31.3867 29.3231 31.88C28.4964 32.36 27.8431 33.0133 27.3631 33.84C26.8831 34.6533 26.6431 35.5733 26.6431 36.6V46.58C26.6431 47.5933 26.8831 48.5133 27.3631 49.34C27.8431 50.1533 28.4964 50.8067 29.3231 51.3C30.1498 51.78 31.0698 52.02 32.0831 52.02ZM60.0112 56V51.24H47.2512V46.74L56.4712 27.2H61.9712L52.7512 46.74H60.0112V39.24H64.8912V46.74H67.5912V51.24H64.8912V56H60.0112Z"
            fill="white"
          />
        </svg>
      ),
      image: "/images/example/img_fulfillment_solutions_step_4.png",
      alt: "step 4",
      content: "solutions.fulfillment-solutions.procedure_step_4",
    },
    {
      number: (
        <svg
          width="80"
          height="80"
          viewBox="0 0 80 80"
          fill="none"
          xmlns="http://www.w3.org/2000/svg"
        >
          <path
            d="M40 80C62.0914 80 80 62.0914 80 40C80 17.9086 62.0914 0 40 0C17.9086 0 0 17.9086 0 40C0 62.0914 17.9086 80 40 80Z"
            fill="#F36F5B"
          />
          <path
            d="M31.16 56.6C29.12 56.6 27.32 56.1667 25.76 55.3C24.2 54.42 22.98 53.2 22.1 51.64C21.2333 50.08 20.8 48.28 20.8 46.24V36.96C20.8 34.92 21.2333 33.12 22.1 31.56C22.98 30 24.2 28.7867 25.76 27.92C27.32 27.04 29.12 26.6 31.16 26.6C33.2 26.6 34.9933 27.04 36.54 27.92C38.1 28.7867 39.32 30 40.2 31.56C41.08 33.12 41.52 34.92 41.52 36.96V46.24C41.52 48.28 41.08 50.08 40.2 51.64C39.32 53.2 38.1 54.42 36.54 55.3C34.9933 56.1667 33.2 56.6 31.16 56.6ZM31.16 52.02C32.1733 52.02 33.0933 51.78 33.92 51.3C34.7467 50.8067 35.4 50.1533 35.88 49.34C36.36 48.5133 36.6 47.5933 36.6 46.58V36.6C36.6 35.5733 36.36 34.6533 35.88 33.84C35.4 33.0133 34.7467 32.36 33.92 31.88C33.0933 31.3867 32.1733 31.14 31.16 31.14C30.1467 31.14 29.2267 31.3867 28.4 31.88C27.5733 32.36 26.92 33.0133 26.44 33.84C25.96 34.6533 25.72 35.5733 25.72 36.6V46.58C25.72 47.5933 25.96 48.5133 26.44 49.34C26.92 50.1533 27.5733 50.8067 28.4 51.3C29.2267 51.78 30.1467 52.02 31.16 52.02ZM55.6681 56.6C54.2015 56.6 52.8348 56.3 51.5681 55.7C50.3015 55.0867 49.2081 54.2467 48.2881 53.18C47.3815 52.1133 46.7281 50.8733 46.3281 49.46L50.9681 48.22C51.1548 48.9933 51.4948 49.66 51.9881 50.22C52.4948 50.78 53.0815 51.2133 53.7481 51.52C54.4281 51.8267 55.1281 51.98 55.8481 51.98C56.7815 51.98 57.6348 51.7533 58.4081 51.3C59.1815 50.8467 59.7948 50.24 60.2481 49.48C60.7015 48.7067 60.9281 47.8533 60.9281 46.92C60.9281 45.9867 60.6948 45.14 60.2281 44.38C59.7748 43.6067 59.1615 43 58.3881 42.56C57.6148 42.1067 56.7681 41.88 55.8481 41.88C54.7415 41.88 53.8215 42.08 53.0881 42.48C52.3681 42.88 51.8148 43.3067 51.4281 43.76L47.3081 42.44L48.1881 27.2H63.8281V31.72H50.7681L52.5681 30.02L51.9281 40.62L51.0481 39.54C51.7948 38.86 52.6615 38.3533 53.6481 38.02C54.6348 37.6867 55.5881 37.52 56.5081 37.52C58.3081 37.52 59.9015 37.9333 61.2881 38.76C62.6881 39.5733 63.7815 40.6867 64.5681 42.1C65.3681 43.5133 65.7681 45.12 65.7681 46.92C65.7681 48.72 65.3015 50.3533 64.3681 51.82C63.4348 53.2733 62.2015 54.4333 60.6681 55.3C59.1481 56.1667 57.4815 56.6 55.6681 56.6Z"
            fill="white"
          />
        </svg>
      ),

      image: "/images/example/img_fulfillment_solutions_step_5.png",
      alt: "step 5",
      content: "solutions.fulfillment-solutions.procedure_step_5",
    },
    {
      number: (
        <svg
          width="80"
          height="80"
          viewBox="0 0 80 80"
          fill="none"
          xmlns="http://www.w3.org/2000/svg"
        >
          <path
            d="M40 80C62.0914 80 80 62.0914 80 40C80 17.9086 62.0914 0 40 0C17.9086 0 0 17.9086 0 40C0 62.0914 17.9086 80 40 80Z"
            fill="#F36F5B"
          />
          <path
            d="M31.16 56.6C29.12 56.6 27.32 56.1667 25.76 55.3C24.2 54.42 22.98 53.2 22.1 51.64C21.2333 50.08 20.8 48.28 20.8 46.24V36.96C20.8 34.92 21.2333 33.12 22.1 31.56C22.98 30 24.2 28.7867 25.76 27.92C27.32 27.04 29.12 26.6 31.16 26.6C33.2 26.6 34.9933 27.04 36.54 27.92C38.1 28.7867 39.32 30 40.2 31.56C41.08 33.12 41.52 34.92 41.52 36.96V46.24C41.52 48.28 41.08 50.08 40.2 51.64C39.32 53.2 38.1 54.42 36.54 55.3C34.9933 56.1667 33.2 56.6 31.16 56.6ZM31.16 52.02C32.1733 52.02 33.0933 51.78 33.92 51.3C34.7467 50.8067 35.4 50.1533 35.88 49.34C36.36 48.5133 36.6 47.5933 36.6 46.58V36.6C36.6 35.5733 36.36 34.6533 35.88 33.84C35.4 33.0133 34.7467 32.36 33.92 31.88C33.0933 31.3867 32.1733 31.14 31.16 31.14C30.1467 31.14 29.2267 31.3867 28.4 31.88C27.5733 32.36 26.92 33.0133 26.44 33.84C25.96 34.6533 25.72 35.5733 25.72 36.6V46.58C25.72 47.5933 25.96 48.5133 26.44 49.34C26.92 50.1533 27.5733 50.8067 28.4 51.3C29.2267 51.78 30.1467 52.02 31.16 52.02ZM57.0881 56.6C55.2081 56.6 53.5148 56.16 52.0081 55.28C50.5148 54.3867 49.3281 53.1533 48.4481 51.58C47.5681 50.0067 47.1281 48.2 47.1281 46.16V37.4C47.1281 35.2133 47.5615 33.3133 48.4281 31.7C49.3081 30.0867 50.5348 28.84 52.1081 27.96C53.6948 27.08 55.5348 26.64 57.6281 26.64C59.0815 26.64 60.4615 26.8867 61.7681 27.38C63.0748 27.86 64.2348 28.6333 65.2481 29.7L61.7681 33.08C61.2615 32.48 60.6415 32.0067 59.9081 31.66C59.1881 31.3133 58.4281 31.14 57.6281 31.14C56.5081 31.14 55.5281 31.4067 54.6881 31.94C53.8481 32.46 53.1948 33.1467 52.7281 34C52.2748 34.8533 52.0481 35.7667 52.0481 36.74V41.52L51.1681 40.56C51.9948 39.6 52.9881 38.8533 54.1481 38.32C55.3081 37.7733 56.5215 37.5 57.7881 37.5C59.6015 37.5 61.2015 37.9133 62.5881 38.74C63.9748 39.5533 65.0681 40.6733 65.8681 42.1C66.6681 43.5133 67.0681 45.1267 67.0681 46.94C67.0681 48.74 66.6081 50.3733 65.6881 51.84C64.7815 53.2933 63.5748 54.4533 62.0681 55.32C60.5615 56.1733 58.9015 56.6 57.0881 56.6ZM57.0881 51.98C58.0215 51.98 58.8748 51.76 59.6481 51.32C60.4215 50.8667 61.0348 50.26 61.4881 49.5C61.9548 48.7267 62.1881 47.8733 62.1881 46.94C62.1881 46.0067 61.9615 45.1533 61.5081 44.38C61.0548 43.6067 60.4415 42.9933 59.6681 42.54C58.9081 42.0733 58.0615 41.84 57.1281 41.84C56.1948 41.84 55.3415 42.0733 54.5681 42.54C53.7948 42.9933 53.1815 43.6067 52.7281 44.38C52.2748 45.1533 52.0481 46.0067 52.0481 46.94C52.0481 47.8467 52.2681 48.6867 52.7081 49.46C53.1615 50.22 53.7681 50.8333 54.5281 51.3C55.3015 51.7533 56.1548 51.98 57.0881 51.98Z"
            fill="white"
          />
        </svg>
      ),

      image: "/images/example/img_fulfillment_solutions_step_6.png",
      alt: "step 6",
      content: "solutions.fulfillment-solutions.procedure_step_6",
    },
  ];
  // is mobile 1500px
  const [isMobile1500, setIsMobile1500] = useState(false);

  useEffect(() => {
    if (typeof window !== "undefined") {
      setIsMobile1500(window.innerWidth <= 1500);

      const handleResize1500 = () => {
        setIsMobile1500(window.innerWidth <= 1500);
      };

      window.addEventListener("resize", handleResize1500);
      return () => window.removeEventListener("resize", handleResize1500);
    }
  }, []);
  // is mobile 768px
  const [isMobile768, setIsMobile768] = useState(false);

  useEffect(() => {
    if (typeof window !== "undefined") {
      setIsMobile768(window.innerWidth <= 768);

      const handleResize768 = () => {
        setIsMobile768(window.innerWidth <= 768);
      };

      window.addEventListener("resize", handleResize768);
      return () => window.removeEventListener("resize", handleResize768);
    }
  }, []);
  const historyCustomer = [
    {
      avatar: "/images/example/img_domestic-express_history_customer_ava_1.png",
      content:
        "solutions.fulfillment-solutions.experience_1_content",
      name:         "solutions.fulfillment-solutions.experience_1_name",
      company:         "solutions.fulfillment-solutions.experience_1_company",
    },
    {
      avatar: "/images/example/img_domestic-express_history_customer_ava_1.png",
      content:
        "solutions.fulfillment-solutions.experience_2_content",
      name:         "solutions.fulfillment-solutions.experience_2_name",
      company:         "solutions.fulfillment-solutions.experience_2_company",
    },
    {
      avatar: "/images/example/img_domestic-express_history_customer_ava_1.png",
      content:
      "solutions.fulfillment-solutions.experience_3_content",
    name:         "solutions.fulfillment-solutions.experience_3_name",
    company:         "solutions.fulfillment-solutions.experience_3_company",
    },
  ];
  const [currentIndexHistory, setCurrentIndexHistory] = useState(0);
  const nextSlideHistory = () => {
    setCurrentIndexHistory((prevIndex) =>
      prevIndex === historyCustomer.length - 1 ? 0 : prevIndex + 1
    );
  };
  const prevSlideHistory = () => {
    setCurrentIndexHistory((prevIndex) =>
      prevIndex === 0 ? historyCustomer.length - 1 : prevIndex - 1
    );
  };
  useEffect(() => {
    const interval = setInterval(() => {
      setCurrentIndexHistory((prevIndex) =>
        prevIndex === historyCustomer.length - 1 ? 0 : prevIndex + 1
      );
    }, 5000); // Chuyển slide sau mỗi 5 giây

    return () => clearInterval(interval);
  }, []);
  // is mobile 1024px
  const [isMobile1024, setIsMobile1024] = useState(false);

  useEffect(() => {
    if (typeof window !== "undefined") {
      setIsMobile1024(window.innerWidth <= 1024);

      const handleResize1024 = () => {
        setIsMobile1024(window.innerWidth <= 1024);
      };

      window.addEventListener("resize", handleResize1024);
      return () => window.removeEventListener("resize", handleResize1024);
    }
  }, []);
  //history customer
  const imgHistoryCustomer = [
    {
      image: "/images/example/img_fulfillment_solutions_trai_nghiem.png",
    },
    {
      image: "/images/example/img_domestic-express_history_customer_2.png",
    },
    {
      image: "/images/example/img_domestic-express_history_customer_3.png",
    },
  ];
  const [currentIndex4, setCurrentIndex4] = useState(0);
  const nextSlide4 = () => {
    setCurrentIndex4((prevIndex) =>
      prevIndex === imgHistoryCustomer.length - 1 ? 0 : prevIndex + 1
    );
  };
  const prevSlide4 = () => {
    setCurrentIndex4((prevIndex) =>
      prevIndex === 0 ? imgHistoryCustomer.length - 1 : prevIndex - 1
    );
  };
  useEffect(() => {
    const interval = setInterval(() => {
      nextSlide4();
    }, 3000);
    return () => clearInterval(interval);
  }, []);
  //select form
  const [selectedForm, setSelectedForm] = useState("business");
  const handleSelectForm = (form: any) => {
    setSelectedForm(form);
  };
  //auto
  useEffect(() => {
    const interval = setInterval(() => {
      setSelectedIndex((prevIndex) =>
        prevIndex === imgWrapper.length - 1 ? 0 : prevIndex + 1
      );
    }, 5000);

    return () => clearInterval(interval);
  }, [imgWrapper.length]);

  return (
    <>
      {/* img priority */}
      <div className="relative">
        <img
          className="w-full min-[1024px]:h-[800px] md:h-[600px] h-[500px] object-cover object-[70%] md:object-center "
          src={imgWrapper[selectedIndex].image}
          alt="fulfillment"
        />
        <div className="img-wrapper-fulfillment">
          <div className="bg-[#000000] text-white border-l-[12px] border-[#ED543E] md:px-[44px] px-[32px] md:py-[52px] py-[28px] slide-in">
            <div className="min-[1024px]:text-[48px] md:text-[32px] text-[24px] font-[800]">
              {/* {imgWrapper[selectedIndex].title} */}
              {__t(`${imgWrapper[selectedIndex].title}`, translations)}
            </div>
            <div className="md:text-[20px] text-[16px] font-[500] mt-[20px]">
              {__t(`${imgWrapper[selectedIndex].note}`, translations)}
            </div>
            <a
  href="#contact-form"
  title={__t("solutions.international-service.get_a_quote", translations)}
  onClick={(e) => {
    e.preventDefault(); // Ngăn chặn hành vi mặc định

    const formElement = document.getElementById("contact-form");
    if (formElement) {
      const yOffset = -100; // Thêm khoảng cách 100px
      const targetPosition = formElement.getBoundingClientRect().top + window.scrollY + yOffset;
      const startPosition = window.scrollY;
      const distance = targetPosition - startPosition;
      let startTime:any = null;

      function smoothScroll(currentTime:any) {
        if (!startTime) startTime = currentTime;
        const timeElapsed = currentTime - startTime;
        const duration = 800; // Thời gian cuộn (ms)
        const easeInOutQuad = (t:any) => (t < 0.5 ? 2 * t * t : 1 - Math.pow(-2 * t + 2, 2) / 2);

        const run = startPosition + distance * easeInOutQuad(timeElapsed / duration);
        window.scrollTo(0, run);

        if (timeElapsed < duration) requestAnimationFrame(smoothScroll);
      }

      requestAnimationFrame(smoothScroll);
    }
  }}
   className="md:mt-[48px] mt-[32px] px-[48px] py-[17px] bg-pcsMain rounded-[8px] font-bold text-[16px] hover-gradient inline-block text-center"
>
  {__t("solutions.international-service.get_a_quote", translations)}
</a>
          </div>
        </div>
        <div className="img-mini-fulfilment">
          <div className="img-mini-number ">
            <span className="text-white text-[40px]">
              {String(selectedIndex + 1).padStart(2, "0")}/
            </span>
            <span className="text-[20px] text-white">
              {" "}
              {String(imgWrapper.length).padStart(2, "0")}
            </span>
          </div>
          <div className="img-mini-item ">
            {imgWrapper.map((img, index) => {
              let isVisible =
                (selectedIndex === 0 &&
                  (index === 0 || index === 1 || index === 2)) ||
                (selectedIndex === imgWrapper.length - 1 &&
                  (index === imgWrapper.length - 3 ||
                    index === imgWrapper.length - 2 ||
                    index === imgWrapper.length - 1)) ||
                (index >= selectedIndex - 1 && index <= selectedIndex + 1);

              let size =
                index === selectedIndex
                  ? "md:w-[272px] w-[160px]  md:h-[200px] h-[120px] border-4 border-solid border-white border-t-[#FFFFFF] rounded-[28px]"
                  : "rounded-[28px] md:w-[240px] w-[120px] md:h-[148px] h-[80px]  opacity-70 border-4 border-solid border-white";
              let transform = isVisible ? "translate-x-0" : "hidden";
              return (
                <img
                  key={index}
                  src={img.mini}
                  className={`${size} transition-all duration-500 cursor-pointer rounded-lg ${transform}`}
                  onClick={() => setSelectedIndex(index)}
                  alt="Thumbnail"
                />
              );
            })}
          </div>
        </div>
      </div>
      {/* Giải pháp Fulfillment PCS */}
      <div className="px-paddingMobile md:px-paddingDesktop mt-[60px] md:mt-[96px]">
        <div className="text-pcsText font-light md:text-[64px] text-[48px] leading-[52px]  md:leading-normal">
          <span>
            {__t("solutions.fulfillment-solutions.solution", translations)}
          </span>{" "}
          <span className={"text-pcsMain font-semibold"}>
            {__t("solutions.fulfillment-solutions._fulfillment", translations)}
          </span>
        </div>
        <div
          className={
            "md:px-paddingDesktop px-[24px] mt-[24px] text-pcsText font-normal text-[16px] grid grid-cols-12"
          }
          style={{ lineHeight: "24px" }}
        >
          <div className={"md:col-span-6"} />
          <div className={"col-span-12 md:col-span-6 max-w-[708px]"}>
            <div className="flex flex-col gap-[4px] ">
              {__t(
                "solutions.fulfillment-solutions.solutions_fulfillment",
                translations
              )}
            </div>
          </div>
        </div>
      </div>
      {/* Giải pháp Fulfillment PCS (hình ảnh) */}
      <div className="solutions-fulfillment">
        {/* 1 */}
        <div className="grid-solutions-fulfillment">
          <div className="relative overflow-hidden rounded-[32px]">
            <div
              className="flex transition-transform duration-500 ease-in-out"
              //   style={{ transform: `translateX(-${currentIndex * 100}%)` }}
              style={{
                transform: isMobile
                  ? `translateX(-${currentIndex * 100}vw)`
                  : `translateX(-${currentIndex * 100}%)`,
                width: isMobile
                  ? `${internationalFulfillment.length * 100}vw`
                  : "100%",
              }}
            >
              {internationalFulfillment.map((item: any, index: number) => (
                <img
                  key={index}
                  src={item.image}
                  alt={`slide-${index}`}
                  className="md:h-[520px] h-[400px] object-cover"
                  style={{
                    width: isMobile ? "100vw" : "100%",
                    flex: "0 0 auto",
                  }}
                />
              ))}
            </div>
            <button
              onClick={prevSlide}
              className="absolute bottom-[20px] right-[80px]"
            >
              <svg
                width="48"
                height="48"
                viewBox="0 0 48 48"
                fill="none"
                xmlns="http://www.w3.org/2000/svg"
              >
                <circle cx="24" cy="24" r="24" fill="#ED543E" />
                <path
                  d="M20.6667 31L14 24M14 24L20.6667 17M14 24L34 24"
                  stroke="white"
                  stroke-width="2"
                  stroke-linecap="round"
                  stroke-linejoin="round"
                />
              </svg>
            </button>
            <button
              onClick={nextSlide}
              className="absolute bottom-[20px] right-[20px]"
            >
              <svg
                width="48"
                height="48"
                viewBox="0 0 48 48"
                fill="none"
                xmlns="http://www.w3.org/2000/svg"
              >
                <circle cx="24" cy="24" r="24" fill="#ED543E" />
                <path
                  d="M27.3333 31L34 24M34 24L27.3333 17M34 24L14 24"
                  stroke="white"
                  stroke-width="2"
                  stroke-linecap="round"
                  stroke-linejoin="round"
                />
              </svg>
            </button>
          </div>
          <div className="flex flex-col ">
            <div className="font-[700] text-[24px]">
              {/* {dataInternationalFulfillment[0].title} */}
              {__t(`${dataInternationalFulfillment[0].title}`, translations)}
            </div>
            <div className="min-[1024px]:mt-[32px] mt-[20px]">
            {__t(`${dataInternationalFulfillment[0].content}`, translations)}
            </div>
            <div className="mt-[32px] flex flex-col gap-[32px]">
              {dataInternationalFulfillment[0].list.map(
                (item: any, index: number) => (
                  <div
                    key={index}
                    className="flex flex-row gap-[12px] items-center"
                  >
                    <div>
                      <svg
                        width="24"
                        height="24"
                        viewBox="0 0 24 24"
                        fill="none"
                        xmlns="http://www.w3.org/2000/svg"
                      >
                        <path
                          fill-rule="evenodd"
                          clip-rule="evenodd"
                          d="M12 24C18.6274 24 24 18.6274 24 12C24 5.37258 18.6274 0 12 0C5.37258 0 0 5.37258 0 12C0 18.6274 5.37258 24 12 24ZM17.5104 8.95259C17.8156 8.56024 17.7449 7.99479 17.3526 7.68962C16.9602 7.38446 16.3948 7.45514 16.0896 7.8475L11.2812 14.0297C11.1743 14.1672 10.9731 14.185 10.8437 14.0685L7.80208 11.3311C7.43262 10.9986 6.86356 11.0285 6.53104 11.398C6.19853 11.7674 6.22848 12.3365 6.59794 12.669L9.63956 15.4065C10.5457 16.222 11.9536 16.0971 12.702 15.1348L17.5104 8.95259Z"
                          fill="#ED543E"
                        />
                      </svg>
                    </div>
                    <div>{__t(`${item}`, translations)}</div>
                  </div>
                )
              )}
            </div>
            <button className="font-[700] mt-[32px] px-[48px] py-[17px] w-[211px] text-white bg-[#ED543E] rounded-[8px] hover-gradient">
              Button Sample
            </button>
          </div>
        </div>
        {/* 2 */}
        <div className="grid-solutions-fulfillment_2">
          <div className="flex flex-col ">
            <div className="font-[700] text-[24px]">
              {/* {dataWarehouseFulfillment[0].title} */}
              {__t(`${dataWarehouseFulfillment[0].title}`, translations)}
            </div>
            <div className="min-[1024px]:mt-[32px] mt-[20px]">
            {__t(`${dataWarehouseFulfillment[0].content}`, translations)}
            </div>
            <div className="mt-[32px] flex flex-col gap-[32px]">
              {dataWarehouseFulfillment[0].list.map(
                (item: any, index: number) => (
                  <div
                    key={index}
                    className="flex flex-row gap-[12px] items-center"
                  >
                    <div>
                      <svg
                        width="24"
                        height="24"
                        viewBox="0 0 24 24"
                        fill="none"
                        xmlns="http://www.w3.org/2000/svg"
                      >
                        <path
                          fill-rule="evenodd"
                          clip-rule="evenodd"
                          d="M12 24C18.6274 24 24 18.6274 24 12C24 5.37258 18.6274 0 12 0C5.37258 0 0 5.37258 0 12C0 18.6274 5.37258 24 12 24ZM17.5104 8.95259C17.8156 8.56024 17.7449 7.99479 17.3526 7.68962C16.9602 7.38446 16.3948 7.45514 16.0896 7.8475L11.2812 14.0297C11.1743 14.1672 10.9731 14.185 10.8437 14.0685L7.80208 11.3311C7.43262 10.9986 6.86356 11.0285 6.53104 11.398C6.19853 11.7674 6.22848 12.3365 6.59794 12.669L9.63956 15.4065C10.5457 16.222 11.9536 16.0971 12.702 15.1348L17.5104 8.95259Z"
                          fill="#ED543E"
                        />
                      </svg>
                    </div>
                    <div>{__t(`${item}`, translations)}</div>
                  </div>
                )
              )}
            </div>
            <button className="font-[700] mt-[32px] px-[48px] py-[17px] w-[211px] text-white bg-[#ED543E] rounded-[8px] hover-gradient">
              Button Sample
            </button>
          </div>
          <div className="relative overflow-hidden rounded-[32px]">
            <div
              className="flex transition-transform duration-500 ease-in-out"
              //   style={{ transform: `translateX(-${currentIndex * 100}%)` }}
              style={{
                transform: isMobile
                  ? `translateX(-${currentIndex2 * 100}vw)`
                  : `translateX(-${currentIndex2 * 100}%)`,
                width: isMobile
                  ? `${warehouseFulfillment.length * 100}vw`
                  : "100%",
              }}
            >
              {warehouseFulfillment.map((item: any, index: number) => (
                <img
                  key={index}
                  src={item.image}
                  alt={`slide-${index}`}
                  className="md:h-[520px] h-[400px] object-cover"
                  style={{
                    width: isMobile ? "100vw" : "100%",
                    flex: "0 0 auto",
                  }}
                />
              ))}
            </div>
            <button
              onClick={prevSlide2}
              className="absolute bottom-[20px] min-[1024px]:left-[20px] right-[80px]"
            >
              <svg
                width="48"
                height="48"
                viewBox="0 0 48 48"
                fill="none"
                xmlns="http://www.w3.org/2000/svg"
              >
                <circle cx="24" cy="24" r="24" fill="#ED543E" />
                <path
                  d="M20.6667 31L14 24M14 24L20.6667 17M14 24L34 24"
                  stroke="white"
                  stroke-width="2"
                  stroke-linecap="round"
                  stroke-linejoin="round"
                />
              </svg>
            </button>
            <button
              onClick={nextSlide2}
              className="absolute bottom-[20px] min-[1024px]:left-[80px] right-[20px]"
            >
              <svg
                width="48"
                height="48"
                viewBox="0 0 48 48"
                fill="none"
                xmlns="http://www.w3.org/2000/svg"
              >
                <circle cx="24" cy="24" r="24" fill="#ED543E" />
                <path
                  d="M27.3333 31L34 24M34 24L27.3333 17M34 24L14 24"
                  stroke="white"
                  stroke-width="2"
                  stroke-linecap="round"
                  stroke-linejoin="round"
                />
              </svg>
            </button>
          </div>
        </div>
        {/* 3 */}
        <div className="grid-solutions-fulfillment">
          <div className="relative overflow-hidden rounded-[32px]">
            <div
              className="flex transition-transform duration-500 ease-in-out"
              //   style={{ transform: `translateX(-${currentIndex * 100}%)` }}
              style={{
                transform: isMobile
                  ? `translateX(-${currentIndex3 * 100}vw)`
                  : `translateX(-${currentIndex3 * 100}%)`,
                width: isMobile ? `${valueFulfillment.length * 100}vw` : "100%",
              }}
            >
              {valueFulfillment.map((item: any, index: number) => (
                <img
                  key={index}
                  src={item.image}
                  alt={`slide-${index}`}
                  className="md:h-[520px] h-[400px] object-cover"
                  style={{
                    width: isMobile ? "100vw" : "100%",
                    flex: "0 0 auto",
                  }}
                />
              ))}
            </div>
            <button
              onClick={prevSlide3}
              className="absolute bottom-[20px] right-[80px]"
            >
              <svg
                width="48"
                height="48"
                viewBox="0 0 48 48"
                fill="none"
                xmlns="http://www.w3.org/2000/svg"
              >
                <circle cx="24" cy="24" r="24" fill="#ED543E" />
                <path
                  d="M20.6667 31L14 24M14 24L20.6667 17M14 24L34 24"
                  stroke="white"
                  stroke-width="2"
                  stroke-linecap="round"
                  stroke-linejoin="round"
                />
              </svg>
            </button>
            <button
              onClick={nextSlide3}
              className="absolute bottom-[20px] right-[20px]"
            >
              <svg
                width="48"
                height="48"
                viewBox="0 0 48 48"
                fill="none"
                xmlns="http://www.w3.org/2000/svg"
              >
                <circle cx="24" cy="24" r="24" fill="#ED543E" />
                <path
                  d="M27.3333 31L34 24M34 24L27.3333 17M34 24L14 24"
                  stroke="white"
                  stroke-width="2"
                  stroke-linecap="round"
                  stroke-linejoin="round"
                />
              </svg>
            </button>
          </div>
          <div className="flex flex-col ">
            <div className="font-[700] text-[24px]">
              {/* {dataValueFulfillment[0].title} */}
              {__t(`${dataValueFulfillment[0].title}`, translations)}
            </div>
            <div className="min-[1024px]:mt-[32px] mt-[20px]">
            {__t(`${dataValueFulfillment[0].content}`, translations)}
            </div>
            <div className="mt-[32px] flex flex-col gap-[32px]">
              {dataValueFulfillment[0].list.map((item: any, index: number) => (
                <div
                  key={index}
                  className="flex flex-row gap-[12px] items-center"
                >
                  <div>
                    <svg
                      width="24"
                      height="24"
                      viewBox="0 0 24 24"
                      fill="none"
                      xmlns="http://www.w3.org/2000/svg"
                    >
                      <path
                        fill-rule="evenodd"
                        clip-rule="evenodd"
                        d="M12 24C18.6274 24 24 18.6274 24 12C24 5.37258 18.6274 0 12 0C5.37258 0 0 5.37258 0 12C0 18.6274 5.37258 24 12 24ZM17.5104 8.95259C17.8156 8.56024 17.7449 7.99479 17.3526 7.68962C16.9602 7.38446 16.3948 7.45514 16.0896 7.8475L11.2812 14.0297C11.1743 14.1672 10.9731 14.185 10.8437 14.0685L7.80208 11.3311C7.43262 10.9986 6.86356 11.0285 6.53104 11.398C6.19853 11.7674 6.22848 12.3365 6.59794 12.669L9.63956 15.4065C10.5457 16.222 11.9536 16.0971 12.702 15.1348L17.5104 8.95259Z"
                        fill="#ED543E"
                      />
                    </svg>
                  </div>
                  <div>{__t(`${item}`, translations)}</div>
                </div>
              ))}
            </div>
            <button className="font-[700] mt-[32px] px-[48px] py-[17px] w-[211px] text-white bg-[#ED543E] rounded-[8px] hover-gradient">
              Button Sample
            </button>
          </div>
        </div>
      </div>
      {/* call us */}
      <div className="call-us-padding">
        <div className="bg-[#ED543E] rounded-[32px] h-auto relative">
          <div className="md:px-[56px] px-[32px] py-[40px] text-white min-[1200px]:max-w-[700px] max-w-[660px]">
            <div className="font-[700] text-[20px]">{__t("solutions.fulfillment-solutions.call_us", translations)}</div>
            <div className="font-[800] md:text-[56px] text-[32px]  mt-[24px]">
            {__t("solutions.fulfillment-solutions.we_247", translations)}
            </div>
            <div className="font-[700] md:text-[20px] text-[16px] mt-[20px]">
            {__t("solutions.fulfillment-solutions.call_content", translations)}
            </div>
          <a href="tel:0352842409">
          <button className="hover-ring-ring mt-[32px] flex flex-row gap-[8px] items-center justify-center w-[226px] py-[14px] rounded-[8px] bg-[#FFFFFF]">
              <div>
                <svg
                  className="ringring"
                  width="26"
                  height="26"
                  viewBox="0 0 26 26"
                  fill="none"
                  xmlns="http://www.w3.org/2000/svg"
                >
                  <path
                    d="M24.964 20.596C24.964 21.028 24.868 21.472 24.664 21.904C24.46 22.336 24.196 22.744 23.848 23.128C23.26 23.776 22.612 24.244 21.88 24.544C21.16 24.844 20.38 25 19.54 25C18.316 25 17.008 24.712 15.628 24.124C14.248 23.536 12.868 22.744 11.5 21.748C10.12 20.74 8.812 19.624 7.564 18.388C6.328 17.14 5.212 15.832 4.216 14.464C3.232 13.096 2.44 11.728 1.864 10.372C1.288 9.004 1 7.696 1 6.448C1 5.632 1.144 4.852 1.432 4.132C1.72 3.4 2.176 2.728 2.812 2.128C3.58 1.372 4.42 1 5.308 1C5.644 1 5.98 1.072 6.28 1.216C6.592 1.36 6.868 1.576 7.084 1.888L9.868 5.812C10.084 6.112 10.24 6.388 10.348 6.652C10.456 6.904 10.516 7.156 10.516 7.384C10.516 7.672 10.432 7.96 10.264 8.236C10.108 8.512 9.88 8.8 9.592 9.088L8.68 10.036C8.548 10.168 8.488 10.324 8.488 10.516C8.488 10.612 8.5 10.696 8.524 10.792C8.56 10.888 8.596 10.96 8.62 11.032C8.836 11.428 9.208 11.944 9.736 12.568C10.276 13.192 10.852 13.828 11.476 14.464C12.124 15.1 12.748 15.688 13.384 16.228C14.008 16.756 14.524 17.116 14.932 17.332C14.992 17.356 15.064 17.392 15.148 17.428C15.244 17.464 15.34 17.476 15.448 17.476C15.652 17.476 15.808 17.404 15.94 17.272L16.852 16.372C17.152 16.072 17.44 15.844 17.716 15.7C17.992 15.532 18.268 15.448 18.568 15.448C18.796 15.448 19.036 15.496 19.3 15.604C19.564 15.712 19.84 15.868 20.14 16.072L24.112 18.892C24.424 19.108 24.64 19.36 24.772 19.66C24.892 19.96 24.964 20.26 24.964 20.596Z"
                    stroke="#ED543E"
                    stroke-width="2"
                    stroke-miterlimit="10"
                  />
                  <path
                    d="M20.7999 9.40044C20.7999 8.68044 20.2359 7.57644 19.3959 6.67644C18.6279 5.84844 17.6079 5.20044 16.5999 5.20044"
                    stroke="#ED543E"
                    stroke-width="2"
                    stroke-linecap="round"
                    stroke-linejoin="round"
                  />
                  <path
                    d="M24.9999 9.4C24.9999 4.756 21.2439 1 16.5999 1"
                    stroke="#ED543E"
                    stroke-width="2"
                    stroke-linecap="round"
                    stroke-linejoin="round"
                  />
                </svg>
              </div>
              <div  className="font-[700] text-[20px] text-pcsMain">
                0352842409
              </div>
            </button>
          </a>
          </div>
          <div className="call-us-img">
            <img
              src="/images/example/img_fulfillment-solutions_girl.png"
              alt="call us"
            />
          </div>
        </div>
      </div>
      {/* Dịch vụ fulfillment PCS có gì đặc biệt? */}
      <div className="px-paddingMobile md:px-paddingDesktop mt-[60px] md:mt-[96px]">
        <div className="text-pcsText font-light md:text-[64px] text-[48px] leading-[52px]  md:leading-normal">
          <span>{__t("solutions.fulfillment-solutions.service", translations)}</span>{" "}
          <span className={"text-pcsMain font-semibold"}>
          {__t("solutions.fulfillment-solutions._fulfillment_special", translations)}
          </span>
        </div>
        <div
          className={
            "md:px-paddingDesktop px-[24px] mt-[24px] text-pcsText font-normal text-[16px] grid grid-cols-12"
          }
          style={{ lineHeight: "24px" }}
        >
          <div className={"md:col-span-6"} />
          <div className={"col-span-12 md:col-span-6 max-w-[725px]"}>
            <div className="flex flex-col gap-[4px] ">
            {__t("solutions.fulfillment-solutions.service_content", translations)}
            </div>
          </div>
        </div>
      </div>
      {/* Dịch vụ fulfillment PCS có gì đặc biệt? (hình ảnh) */}
      <div className="mt-[32px] px-[40px]">
        <div className="relative">
          <div className="relative w-full h-[880px] max-[1400px]:h-[500px]">
            <img
              src="/images/example/img_fulfillment-solutions_video.png"
              alt="video"
              className="solution-special-img"
            />
            <div className="absolute inset-0 flex items-center justify-center cursor-pointer select-none">
              <div className="relative">
                {/* Sóng lan tỏa */}
                <div className="absolute inset-0 animate-pulse-circle"></div>
                <div className="absolute inset-0 animate-pulse-circle delay-300"></div>

                {/* Icon Video */}
                <svg
                  width="160"
                  height="160"
                  viewBox="0 0 160 160"
                  fill="none"
                  xmlns="http://www.w3.org/2000/svg"
                  className="relative z-1"
                >
                  <circle opacity="0.6" cx="80" cy="80" r="80" fill="#FBDBD6" />
                  <circle opacity="0.6" cx="80" cy="80" r="60" fill="#F17B69" />
                  <circle opacity="0.8" cx="80" cy="80" r="36" fill="white" />
                  <path
                    d="M71 90.1687V69.8313C70.9973 69.4697 71.1351 69.1156 71.3958 68.8142C71.6565 68.5129 72.0283 68.2779 72.4639 68.1392C72.8995 68.0005 73.379 67.9644 73.8415 68.0356C74.3039 68.1067 74.7282 68.2818 75.0603 68.5386L88.3095 78.7164C88.7518 79.0575 89 79.519 89 80C89 80.481 88.7518 80.9425 88.3095 81.2836L75.0603 91.4614C74.7282 91.7182 74.3039 91.8933 73.8415 91.9644C73.379 92.0356 72.8995 91.9995 72.4639 91.8608C72.0283 91.7221 71.6565 91.4871 71.3958 91.1858C71.1351 90.8844 70.9973 90.5303 71 90.1687Z"
                    fill="#ED543E"
                  />
                </svg>
              </div>
            </div>
          </div>
          <div className="solution-special-content">
            {dataSpecial.map((item: any, index: number) => (
              <div
                key={index}
                className="solution-special-content-item text-pcsText"
              >
                <div className="flex flex-row items-center gap-[12px]">
                  <div>{item.icon}</div>
                  <div className="font-[700] text-[20px]">{__t(`${item.title}`, translations)}</div>
                </div>
                <div>{__t(`${item.content}`, translations)}</div>
              </div>
            ))}
          </div>
        </div>
      </div>
      {/* Button nhận báo giá */}
      <div className="md:mt-[72px] mt-[36px] flex justify-center">
      <a
  href="#contact-form"
  title={__t("solutions.fulfillment-solutions.quote_now", translations)}
  onClick={(e) => {
    e.preventDefault(); // Ngăn chặn hành vi mặc định

    const formElement = document.getElementById("contact-form");
    if (formElement) {
      const yOffset = -100; // Thêm khoảng cách 100px
      const targetPosition = formElement.getBoundingClientRect().top + window.scrollY + yOffset;
      const startPosition = window.scrollY;
      const distance = targetPosition - startPosition;
      let startTime:any = null;

      function smoothScroll(currentTime:any) {
        if (!startTime) startTime = currentTime;
        const timeElapsed = currentTime - startTime;
        const duration = 800; // Thời gian cuộn (ms)
        const easeInOutQuad = (t:any) => (t < 0.5 ? 2 * t * t : 1 - Math.pow(-2 * t + 2, 2) / 2);

        const run = startPosition + distance * easeInOutQuad(timeElapsed / duration);
        window.scrollTo(0, run);

        if (timeElapsed < duration) requestAnimationFrame(smoothScroll);
      }

      requestAnimationFrame(smoothScroll);
    }
  }}
  className={
    "text-white h-[56px] flex items-center justify-center text-[16px] font-bold hover-gradient w-[237px] rounded-[8px] bg-pcsMain"
  }
>
{__t("solutions.fulfillment-solutions.quote_now", translations)}
</a>
      </div>
      {/* Quy trình Fulfillment PCS */}
      <div className="px-paddingMobile md:px-paddingDesktop mt-[60px] md:mt-[96px]">
        <div className="text-pcsText font-light text-[64px] leading-[68px]  md:leading-normal">
          <span>{__t("solutions.fulfillment-express.procedure", translations)}</span>{" "}
          <span className={"text-pcsMain font-semibold"}>{__t("solutions.fulfillment-express._procedure", translations)}</span>
        </div>
        <div
          className={
            "md:px-paddingDesktop px-[24px] mt-[24px] text-pcsText font-normal text-[16px] grid grid-cols-12"
          }
          style={{ lineHeight: "24px" }}
        >
          <div className={"md:col-span-6"} />
          <div className={"col-span-12 md:col-span-6 max-w-[725px]"}>
            <div className="flex flex-col gap-[4px] ">
            {__t("solutions.fulfillment-express.procedure_content", translations)}
            </div>
          </div>
        </div>
      </div>
      {/* Quy trình Fulfillment PCS (step) */}
      {!isMobile1500 ? (
        <div className="mt-[120px] flex justify-center px-[40px] mb-[196px]">
          <div className="relative w-full max-w-[1504px]">
            <img
              src="/images/example/img_fulfillment_solutions_step_bg.png"
              alt="bg step"
              className=" w-full"
            />
            <div>
              {/* 1 */}
              <div className="absolute left-[20px] top-[-72px]  flex flex-row items-center gap-[20px]">
                <div className="mt-[20px]">
                  {dataStep[0].number}
                  </div>
                <div>
                  <img
                    src={dataStep[0].image}
                    alt={dataStep[0].alt}
                    className="w-full"
                  />
                  <div className="mt-[28px] font-[700] text-[20px] text-pcsText text-center">
                  {__t(`${dataStep[0].content}`, translations)}
                  </div>
                </div>
              </div>
              {/* > */}
              <div className="absolute left-[460px] top-[36px]">
                <svg
                  width="17"
                  height="28"
                  viewBox="0 0 17 28"
                  fill="none"
                  xmlns="http://www.w3.org/2000/svg"
                >
                  <path
                    d="M1 8L5.8 14L0.999999 20"
                    stroke="#4D5B72"
                    stroke-width="2"
                    stroke-linecap="round"
                    stroke-linejoin="round"
                  />
                  <path
                    d="M5.8 2L15.4 14L5.8 26"
                    stroke="#4D5B72"
                    stroke-width="3"
                    stroke-linecap="round"
                    stroke-linejoin="round"
                  />
                </svg>
              </div>
              {/* 2 */}
              <div className="absolute left-[540px] top-[-110px]  flex flex-row items-center gap-[20px]">
                <div className="mt-[56px]">{dataStep[1].number}</div>
                <div>
                  <img
                    src={dataStep[1].image}
                    alt={dataStep[1].alt}
                    className="w-full"
                  />
                  <div className="mt-[28px] font-[700] text-[20px] text-pcsText text-center">
                  {__t(`${dataStep[1].content}`, translations)}
                  </div>
                </div>
              </div>
              {/* > */}
              <div className="absolute left-[1060px] top-[36px]">
                <svg
                  width="17"
                  height="28"
                  viewBox="0 0 17 28"
                  fill="none"
                  xmlns="http://www.w3.org/2000/svg"
                >
                  <path
                    d="M1 8L5.8 14L0.999999 20"
                    stroke="#4D5B72"
                    stroke-width="2"
                    stroke-linecap="round"
                    stroke-linejoin="round"
                  />
                  <path
                    d="M5.8 2L15.4 14L5.8 26"
                    stroke="#4D5B72"
                    stroke-width="3"
                    stroke-linecap="round"
                    stroke-linejoin="round"
                  />
                </svg>
              </div>
              {/* 3*/}
              <div className="absolute right-[12px] top-[-110px]  flex flex-row items-center gap-[20px]">
                <div className="mt-[56px]">{dataStep[2].number}</div>
                <div>
                  <img
                    src={dataStep[2].image}
                    alt={dataStep[2].alt}
                    className="w-full"
                  />
                  <div className="mt-[28px] font-[700] text-[20px] text-pcsText text-center">
                  {__t(`${dataStep[2].content}`, translations)}
                  </div>
                </div>
              </div>
              {/* >> */}
              <div className="absolute right-[40px] bottom-[200px]">
                <svg
                  width="28"
                  height="17"
                  viewBox="0 0 28 17"
                  fill="none"
                  xmlns="http://www.w3.org/2000/svg"
                >
                  <path
                    d="M8 1L14 5.8L20 0.999999"
                    stroke="#4D5B72"
                    stroke-width="2"
                    stroke-linecap="round"
                    stroke-linejoin="round"
                  />
                  <path
                    d="M2 5.7998L14 15.3998L26 5.7998"
                    stroke="#4D5B72"
                    stroke-width="3"
                    stroke-linecap="round"
                    stroke-linejoin="round"
                  />
                </svg>
              </div>
              {/* 4 */}
              <div className="absolute right-[12px] bottom-[-48px]  flex flex-row items-center gap-[20px]">
                <div>
                  <img
                    src={dataStep[3].image}
                    alt={dataStep[3].alt}
                    className="w-full"
                  />
                  <div className="mt-[28px] font-[700] text-[20px] text-pcsText text-center">
                  {__t(`${dataStep[3].content}`, translations)}
                  </div>
                </div>
                <div className="mb-[60px]">{dataStep[3].number}</div>
              </div>
              {/* < */}
              <div className="absolute right-[400px] bottom-[36px]">
                <svg
                  width="18"
                  height="28"
                  viewBox="0 0 18 28"
                  fill="none"
                  xmlns="http://www.w3.org/2000/svg"
                >
                  <path
                    d="M16.4 8L11.6 14L16.4 20"
                    stroke="#4D5B72"
                    stroke-width="2"
                    stroke-linecap="round"
                    stroke-linejoin="round"
                  />
                  <path
                    d="M11.6 2L2.00004 14L11.6 26"
                    stroke="#4D5B72"
                    stroke-width="3"
                    stroke-linecap="round"
                    stroke-linejoin="round"
                  />
                </svg>
              </div>
              {/* 5 */}
              <div className="absolute right-[500px] bottom-[-52px]  flex flex-row items-center gap-[0px]">
                <div>
                  <img
                    src={dataStep[4].image}
                    alt={dataStep[4].alt}
                    className="w-[90%] h-[90%]"
                  />
                  <div className="mt-[16px] font-[700] text-[20px] text-pcsText text-center">
                  {__t(`${dataStep[4].content}`, translations)}
                  </div>
                </div>
                <div className="mt-[98px]">{dataStep[4].number}</div>
              </div>
              {/* < */}
              <div className="absolute right-[1060px] bottom-[40px]">
                <svg
                  width="18"
                  height="28"
                  viewBox="0 0 18 28"
                  fill="none"
                  xmlns="http://www.w3.org/2000/svg"
                >
                  <path
                    d="M16.4 8L11.6 14L16.4 20"
                    stroke="#4D5B72"
                    stroke-width="2"
                    stroke-linecap="round"
                    stroke-linejoin="round"
                  />
                  <path
                    d="M11.6 2L2.00004 14L11.6 26"
                    stroke="#4D5B72"
                    stroke-width="3"
                    stroke-linecap="round"
                    stroke-linejoin="round"
                  />
                </svg>
              </div>
              {/* 6 */}
              <div className="absolute left-[40px] bottom-[-48px]  flex flex-row items-center gap-[20px]">
                <div>
                  <img
                    src={dataStep[5].image}
                    alt={dataStep[5].alt}
                    className="w-full"
                  />
                  <div className="mt-[28px] font-[700] text-[20px] text-pcsText text-center">
                  {__t(`${dataStep[5].content}`, translations)}
                  </div>
                </div>
                <div className="mt-[60px]">{dataStep[5].number}</div>
              </div>
            </div>
          </div>
        </div>
      ) : !isMobile768 ? (
        <div className="mt-[76px] px-[40px]">
          <div className="flex justify-center gap-[60px] items-center">
            {/* 1 */}
            <div className="  flex flex-row items-center gap-[20px]">
              <div>{dataStep[0].number}</div>
              <div>
                <img
                  src={dataStep[0].image}
                  alt={dataStep[0].alt}
                  className="w-full"
                />
                <div className="mt-[28px] font-[700] text-[20px] text-pcsText text-center">
                {__t(`${dataStep[0].content}`, translations)}
                </div>
              </div>
            </div>
            {/* > */}
            <div>
              <svg
                width="17"
                height="28"
                viewBox="0 0 17 28"
                fill="none"
                xmlns="http://www.w3.org/2000/svg"
              >
                <path
                  d="M1 8L5.8 14L0.999999 20"
                  stroke="#4D5B72"
                  stroke-width="2"
                  stroke-linecap="round"
                  stroke-linejoin="round"
                />
                <path
                  d="M5.8 2L15.4 14L5.8 26"
                  stroke="#4D5B72"
                  stroke-width="3"
                  stroke-linecap="round"
                  stroke-linejoin="round"
                />
              </svg>
            </div>
            {/* 2 */}
            <div className="relative flex flex-row items-center gap-[20px]">
              <div>{dataStep[1].number}</div>
              <div>
                <img
                  src={dataStep[1].image}
                  alt={dataStep[1].alt}
                  className="w-full"
                />
                <div className="mt-[28px] font-[700] text-[20px] text-pcsText text-center">
                {__t(`${dataStep[1].content}`, translations)}
                </div>
              </div>

              {/* Mũi tên xuống */}
              <div className="absolute bottom-[-60px] left-1/2 transform -translate-x-1/2">
                <svg
                  width="28"
                  height="17"
                  viewBox="0 0 28 17"
                  fill="none"
                  xmlns="http://www.w3.org/2000/svg"
                >
                  <path
                    d="M8 1L14 5.8L20 0.999999"
                    stroke="#4D5B72"
                    stroke-width="2"
                    stroke-linecap="round"
                    stroke-linejoin="round"
                  />
                  <path
                    d="M2 5.7998L14 15.3998L26 5.7998"
                    stroke="#4D5B72"
                    stroke-width="3"
                    stroke-linecap="round"
                    stroke-linejoin="round"
                  />
                </svg>
              </div>
            </div>
          </div>
          <div className="mt-[100px] flex justify-center gap-[60px] items-center">
            <div className="flex justify-center gap-[60px] items-center">
              {/* 4 */}
              <div className="relative flex flex-row items-center gap-[20px]">
                <div>{dataStep[3].number}</div>
                <div>
                  <img
                    src={dataStep[3].image}
                    alt={dataStep[3].alt}
                    className="w-full"
                  />
                  <div className="mt-[28px] font-[700] text-[20px] text-pcsText text-center">
                  {__t(`${dataStep[3].content}`, translations)}
                  </div>
                </div>

                {/* Mũi tên xuống */}
                <div className="absolute bottom-[-60px] left-1/2 transform -translate-x-1/2">
                  <svg
                    width="28"
                    height="17"
                    viewBox="0 0 28 17"
                    fill="none"
                    xmlns="http://www.w3.org/2000/svg"
                  >
                    <path
                      d="M8 1L14 5.8L20 0.999999"
                      stroke="#4D5B72"
                      stroke-width="2"
                      stroke-linecap="round"
                      stroke-linejoin="round"
                    />
                    <path
                      d="M2 5.7998L14 15.3998L26 5.7998"
                      stroke="#4D5B72"
                      stroke-width="3"
                      stroke-linecap="round"
                      stroke-linejoin="round"
                    />
                  </svg>
                </div>
              </div>
              {/* < */}
              <div>
                <svg
                  width="18"
                  height="28"
                  viewBox="0 0 18 28"
                  fill="none"
                  xmlns="http://www.w3.org/2000/svg"
                >
                  <path
                    d="M16.4 8L11.6 14L16.4 20"
                    stroke="#4D5B72"
                    stroke-width="2"
                    stroke-linecap="round"
                    stroke-linejoin="round"
                  />
                  <path
                    d="M11.6 2L1.99999 14L11.6 26"
                    stroke="#4D5B72"
                    stroke-width="3"
                    stroke-linecap="round"
                    stroke-linejoin="round"
                  />
                </svg>
              </div>
              {/* 3 */}
              <div className="  flex flex-row items-center gap-[20px]">
                <div>{dataStep[2].number}</div>
                <div>
                  <img
                    src={dataStep[2].image}
                    alt={dataStep[2].alt}
                    className="w-full"
                  />
                  <div className="mt-[28px] font-[700] text-[20px] text-pcsText text-center">
                  {__t(`${dataStep[2].content}`, translations)}
                  </div>
                </div>
              </div>
            </div>
          </div>
          <div className="mt-[100px] flex justify-center gap-[60px] items-center">
            {/* 5 */}
            <div className="  flex flex-row items-center gap-[20px]">
              <div>{dataStep[4].number}</div>
              <div>
                <img
                  src={dataStep[4].image}
                  alt={dataStep[4].alt}
                  className="w-full"
                />
                <div className="mt-[28px] font-[700] text-[20px] text-pcsText text-center">
                {__t(`${dataStep[4].content}`, translations)}
                </div>
              </div>
            </div>
            {/* > */}
            <div>
              <svg
                width="17"
                height="28"
                viewBox="0 0 17 28"
                fill="none"
                xmlns="http://www.w3.org/2000/svg"
              >
                <path
                  d="M1 8L5.8 14L0.999999 20"
                  stroke="#4D5B72"
                  stroke-width="2"
                  stroke-linecap="round"
                  stroke-linejoin="round"
                />
                <path
                  d="M5.8 2L15.4 14L5.8 26"
                  stroke="#4D5B72"
                  stroke-width="3"
                  stroke-linecap="round"
                  stroke-linejoin="round"
                />
              </svg>
            </div>
            {/* 6 */}
            <div className=" flex flex-row items-center gap-[20px]">
              <div>{dataStep[5].number}</div>
              <div>
                <img
                  src={dataStep[5].image}
                  alt={dataStep[5].alt}
                  className="w-full"
                />
                <div className="mt-[28px] font-[700] text-[20px] text-pcsText text-center">
                {__t(`${dataStep[5].content}`, translations)}
                </div>
              </div>
            </div>
          </div>
        </div>
      ) : (
        <div className="mt-[32px] px-[40px] flex flex-col justify-center items-center gap-[40px]">
          {dataStep.map((step, index) => (
            <div key={index} className="flex flex-col items-center gap-[20px]">
              {/* Nội dung từng bước */}
              <div className="flex flex-row items-center gap-[20px]">
                <div>{step.number}</div>
                <div>
                  <img src={step.image} alt={step.alt} className="w-full" />
                  <div className="mt-[28px] font-[700] text-[20px] text-pcsText text-center">
                  {__t(`${step.content}`, translations)}
                  </div>
                </div>
              </div>

              {/* Hiển thị mũi tên nếu không phải bước cuối */}
              {index < dataStep.length - 1 && (
                <div>
                  <svg
                    width="28"
                    height="17"
                    viewBox="0 0 28 17"
                    fill="none"
                    xmlns="http://www.w3.org/2000/svg"
                  >
                    <path
                      d="M8 1L14 5.8L20 0.999999"
                      stroke="#4D5B72"
                      strokeWidth="2"
                      strokeLinecap="round"
                      strokeLinejoin="round"
                    />
                    <path
                      d="M2 5.7998L14 15.3998L26 5.7998"
                      stroke="#4D5B72"
                      strokeWidth="3"
                      strokeLinecap="round"
                      strokeLinejoin="round"
                    />
                  </svg>
                </div>
              )}
            </div>
          ))}
        </div>
      )}
      {/* Các con số ấn tượng */}
      <div className="mt-[60px] md:mt-[96px] text-white">
        <div className="relative fulfillment-numbers">
          <img
            src="/images/example/img_domestic-express_bg_number.png"
            alt="bg number"
            className="w-full min-[1200px]:h-[580px] h-[688px]"
          />
          <div className="fulfillment-content">
            <div className="margin-left-208">
              <div className="fulfillment-text">
                Được 300+ thương hiệu Việt tin tưởng
              </div>
              <div className="fulfillment-text-content">
                PCS đồng hành cùng doanh nghiệp mở rộng thị trường trên một nền
                tảng fulfillment toàn diện
              </div>
            </div>
            {!isMobile768 ? (
              <div className="count-data-fulfillment">
                {dataNumber.map((item, index) => (
                  <div
                    key={index}
                    className={`count-data-item ${index === 0 ? "shadow-[0_2px_20px_#FFFFFF]" : ""}`}
                  >
                    <div>{item.icon}</div>
                    <CounterDataDifference
                      value={parseFloat(item.number)}
                      unit={item.unit}
                      className="count-data-text"
                    />
                    <div className="count-data-content">{item.content}</div>
                  </div>
                ))}
              </div>
            ) : (
              <div className="flex flex-col md:gap-[32px] gap-[20px]">
                {dataNumber.map((item, index) => (
                  <div
                    key={index}
                    className={`count-data-content-768 ${index === 0 ? "shadow-[0_2px_20px_#FFFFFF]" : ""}`}
                  >
                    <div className="flex flex-row items-center gap-[16px]">
                      <div>{item.icon}</div>
                      <CounterDataDifference
                        value={parseFloat(item.number)}
                        unit={item.unit}
                        className="font-[700] md:text-[40px] text-[32px] min-w-[100px] "
                      />
                    </div>
                    <div className="md:text-[20px] text-[16px]">
                      {item.content}
                    </div>
                  </div>
                ))}
              </div>
            )}
          </div>
        </div>
      </div>
      {/* Đối tác chiến lược của chúng tôi */}
      <div className="px-paddingMobile md:px-paddingDesktop mt-[60px] md:mt-[96px]">
        <div className="text-pcsText font-light md:text-[64px] text-[48px] leading-[52px]  md:leading-normal">
          <span>{__t("solutions.fulfillment-solutions.partner", translations)}</span>{" "}
          <span className={"text-pcsMain font-semibold"}>{__t("solutions.fulfillment-solutions._partner", translations)}</span>
        </div>
        <div className="md:mt-[32px] mt-[24px] flex min-[1024px]:flex-row flex-col justify-center min-[1024px]:gap-[80px] gap-[20px]">
          <div className="flex flex-row rounded-[40px] p-[8px] bg-[#FEF3F1] md:max-w-[618px] max-w-[332px]">
            <button
              className={`md:px-[56px] px-[12px] py-[16px] transition-all rounded-[40px] font-[700] md:text-[20px] text-[14px] whitespace-nowrap ${
                activeTab === "ecommerce"
                  ? "bg-[#ED543E] text-white"
                  : "bg-[#FEF3F1] text-pcsText"
              }`}
              onClick={() => setActiveTab("ecommerce")}
            >
              {__t("solutions.fulfillment-solutions.platform", translations)}
            </button>
            <button
              className={`md:px-[56px] px-[12px] py-[16px] transition-all rounded-[40px] font-[700] md:text-[20px] text-[14px] whitespace-nowrap ${
                activeTab === "logistics"
                  ? "bg-[#ED543E] text-white"
                  : "bg-[#FEF3F1] text-pcsText"
              }`}
              onClick={() => setActiveTab("logistics")}
            >
              {__t("solutions.fulfillment-solutions.logistics", translations)}
            </button>
          </div>
          <div className="max-w-[752px] md:px-[0px] px-[24px] max-w-[725px]">
          {__t("solutions.fulfillment-solutions.partner_content", translations)}
          </div>
        </div>
        <div className="min-[1024px]:mt-[80px] mt-[40px] md:px-[40px] px-[0px] flex justify-center">
          <div className="logo-fulfillment">
            {currentLogos.map((item: any, index: number) => (
              <div
                key={index}
                className="md:w-[232px] w-[160px] md:h-[96px] h-[60px] rounded-[8px] border border-t-[#D1D5DB] flex items-center justify-center"
              >
                <img
                  src={item.image}
                  alt={item.alt}
                  className=" max-[768px]:w-[50%] object-contain"
                />
              </div>
            ))}
          </div>
        </div>
      </div>
      {/* Trải nghiệm khách hàng */}
      <div className="px-paddingMobile md:px-paddingDesktop mt-[60px] md:mt-[96px]">
        <div className="text-pcsText  font-light md:text-[64px] text-[48px] leading-[52px]  md:leading-normal">
          <span>{__t("solutions.fulfillment-solutions.experience", translations)}</span>{" "}
          <span className={"text-pcsMain font-semibold"}>{__t("solutions.fulfillment-solutions._experience", translations)}</span>
        </div>
        <div className="md:mt-[48px] mt-[32px] history-domestic ">
          <div className="relative overflow-hidden rounded-[32px]">
            <div
              className="flex transition-transform duration-500 ease-in-out"
              // style={{ transform: `translateX(-${currentIndex * 100}%)` }}
              style={{
                transform: isMobile
                  ? `translateX(-${currentIndex4 * 100}vw)`
                  : `translateX(-${currentIndex4 * 100}%)`,
                width: isMobile
                  ? `${imgHistoryCustomer.length * 100}vw`
                  : "100%",
              }}
            >
              {imgHistoryCustomer.map((item, index) => (
                <img
                  key={index}
                  src={item.image}
                  alt={`slide-${index}`}
                  className="w-full md:h-[584px] h-[420px]"
                  style={{
                    width: isMobile ? "100vw" : "100%",
                    flex: "0 0 auto",
                  }}
                />
              ))}
            </div>
            <button
              onClick={prevSlide4}
              className="absolute bottom-[5%] left-[10%] md:left-[36%] min-[1800px]:left-[40%] min-[1200px]:left-[38%]"
            >
              <svg
                width="48"
                height="48"
                viewBox="0 0 48 48"
                fill="none"
                xmlns="http://www.w3.org/2000/svg"
              >
                <circle cx="24" cy="24" r="24" fill="#ED543E" />
                <path
                  d="M20.6667 31L14 24M14 24L20.6667 17M14 24L34 24"
                  stroke="white"
                  stroke-width="2"
                  stroke-linecap="round"
                  stroke-linejoin="round"
                />
              </svg>
            </button>
            <button
              onClick={nextSlide4}
              className="absolute bottom-[5%] right-[10%] md:right-[36%] min-[1800px]:right-[40%] min-[1200px]:right-[38%]"
            >
              <svg
                width="48"
                height="48"
                viewBox="0 0 48 48"
                fill="none"
                xmlns="http://www.w3.org/2000/svg"
              >
                <circle cx="24" cy="24" r="24" fill="#ED543E" />
                <path
                  d="M27.3333 31L34 24M34 24L27.3333 17M34 24L14 24"
                  stroke="white"
                  stroke-width="2"
                  stroke-linecap="round"
                  stroke-linejoin="round"
                />
              </svg>
            </button>
          </div>
          <div>
            <div className="md:px-[0px] px-[24px]">
            {__t("solutions.fulfillment-solutions.experience_content", translations)}
            </div>
            <div className="relative mt-[48px]">
              <img
                src="/images/example/img_domestic-express_history_customer_bg.png"
                alt="bg history customer"
                className="w-full md:h-[360px] h-[360px]"
              />
              <div className="absolute top-[4px] right-[56px] w-[80px] h-[80px]">
                <img
                  src={historyCustomer[currentIndexHistory].avatar}
                  alt="avatar"
                  className="w-full h-full"
                />
              </div>

              <div className="absolute top-[120px] md:left-[56px] left-[20px] md:right-[56px] right-[20px] text-[16px]">
                {/* {historyCustomer[currentIndexHistory].content} */}
                {__t(`${historyCustomer[currentIndexHistory].content}`, translations)}
              </div>

              <div className="absolute bottom-[24px] md:left-[56px] left-[20px]">
                <div className="font-[700]">
                {__t(`${historyCustomer[currentIndexHistory].name}`, translations)}
                </div>
                <div className="mt-[4px]">
                {__t(`${historyCustomer[currentIndexHistory].company}`, translations)}
                </div>
              </div>
            </div>
            <div className="flex flex-row gap-[32px] md:mt-[32px] mt-[20px] md:ml-[56px] ml-[16px]">
              <button
                className="select-none flex flex-row gap-[12px] items-center"
                onClick={prevSlideHistory}
              >
                <div>{__t("solutions.domestic-express.prev", translations)}</div>
                <div>
                  <svg
                    width="26"
                    height="18"
                    viewBox="0 0 26 18"
                    fill="none"
                    xmlns="http://www.w3.org/2000/svg"
                  >
                    <path
                      d="M9 17L1 9M1 9L9 0.999998M1 9L25 9"
                      stroke="#ED543E"
                      stroke-linecap="round"
                      stroke-linejoin="round"
                    />
                  </svg>
                </div>
              </button>
              <button
                className="select-none flex flex-row gap-[12px] items-center"
                onClick={nextSlideHistory}
              >
                <div>
                  <svg
                    width="26"
                    height="18"
                    viewBox="0 0 26 18"
                    fill="none"
                    xmlns="http://www.w3.org/2000/svg"
                  >
                    <path
                      d="M17 17L25 9M25 9L17 0.999998M25 9L1 9"
                      stroke="#ED543E"
                      stroke-linecap="round"
                      stroke-linejoin="round"
                    />
                  </svg>
                </div>
                <div>{__t("solutions.domestic-express.next", translations)}</div>
              </button>
            </div>
          </div>
        </div>
      </div>
      {/* Kết nối cùng PCS */}
      <div id='contact-form' className="px-paddingMobile md:px-paddingDesktop mt-[60px] md:mt-[96px]">
        <div className="text-pcsText font-light md:text-[64px] text-[48px] leading-[52px]  md:leading-normal">
          <span>{__t("solutions.international-service.connect", translations)}</span>{" "}
          <span className={"text-pcsMain font-semibold"}>{__t("solutions.international-service._pcs", translations)}</span>
        </div>
        <div
          className={
            "md:px-paddingDesktop px-[24px] mt-[24px] text-pcsText font-normal text-[16px] grid grid-cols-12"
          }
          style={{ lineHeight: "24px" }}
        >
          <div className={"md:col-span-6"} />
          <div className={"col-span-12 md:col-span-6 max-w-[708px]"}>
            <div className="flex flex-col gap-[4px] ">
            {__t("solutions.fulfillment-solutions.connect_content", translations)}
            </div>
          </div>
        </div>
      </div>
      {/* Kết nối cùng PCS (form) */}
      <div className="form-fulfillment">
        <div className="form-fulfillment-button text-pcsText">
          <div
            className={`answer-card ${
              selectedForm === "business" ? "active-gradient text-white" : ""
            }`}
            onClick={() => handleSelectForm("business")}
          >
            <div
              className={`icon-container ${
                selectedForm === "business" ? "active-icon" : ""
              }`}
            >
              <div className="icon">
                <svg
                  width="58"
                  height="58"
                  viewBox="0 0 58 58"
                  fill="none"
                  xmlns="http://www.w3.org/2000/svg"
                >
                  <path
                    d="M17.8 12.2V9.4C17.8 4.76081 21.5608 1 26.2 1H31.8C36.4392 1 40.2 4.76081 40.2 9.4V12.2M1 24.373C1 24.373 9.73051 30.1884 23.3375 31.5504M57 24.373C57 24.373 48.2695 30.1884 34.6625 31.5504M12.2 57H45.8C51.9856 57 57 51.9856 57 45.8V23.4C57 17.2144 51.9856 12.2 45.8 12.2H12.2C6.01441 12.2 1 17.2144 1 23.4V45.8C1 51.9856 6.01441 57 12.2 57Z"
                    stroke="currentColor"
                    stroke-width="2"
                    stroke-linecap="round"
                  />
                  <path
                    d="M34.5999 29.448V32.248C34.5999 32.276 34.5999 32.276 34.5999 32.304C34.5999 35.356 34.5719 37.848 28.9999 37.848C23.4559 37.848 23.3999 35.384 23.3999 32.332V29.448C23.3999 26.648 23.3999 26.648 26.1999 26.648H31.7999C34.5999 26.648 34.5999 26.648 34.5999 29.448Z"
                    stroke="currentColor"
                    stroke-width="2"
                    stroke-miterlimit="10"
                    stroke-linecap="round"
                    stroke-linejoin="round"
                  />
                </svg>
              </div>
              {selectedForm === "business" && (
                <div className="check-icon">
                  {" "}
                  <svg
                    width="24"
                    height="24"
                    viewBox="0 0 24 24"
                    fill="none"
                    xmlns="http://www.w3.org/2000/svg"
                  >
                    <path
                      fillRule="evenodd"
                      clipRule="evenodd"
                      d="M12 24C18.6274 24 24 18.6274 24 12C24 5.37258 18.6274 0 12 0C5.37258 0 0 5.37258 0 12C0 18.6274 5.37258 24 12 24ZM17.5104 8.95259C17.8156 8.56024 17.7449 7.99479 17.3526 7.68962C16.9602 7.38446 16.3948 7.45514 16.0896 7.8475L11.2812 14.0297C11.1743 14.1672 10.9731 14.185 10.8437 14.0685L7.80208 11.3311C7.43262 10.9986 6.86356 11.0285 6.53104 11.398C6.19853 11.7674 6.22848 12.3365 6.59794 12.669L9.63956 15.4065C10.5457 16.222 11.9536 16.0971 12.702 15.1348L17.5104 8.95259Z"
                      fill="white"
                    />
                  </svg>
                </div>
              )}
            </div>
            <div className="text-container-contact">
              <div className="label">{__t("contact_us.business", translations)}</div>
            </div>
          </div>
          <div
            className={`answer-card ${
              selectedForm === "individual" ? "active-gradient text-white" : ""
            }`}
            onClick={() => handleSelectForm("individual")}
          >
            <div
              className={`icon-container ${
                selectedForm === "individual" ? "active-icon" : ""
              }`}
            >
              <div className="icon">
                <svg
                  width="52"
                  height="58"
                  viewBox="0 0 52 58"
                  fill="none"
                  xmlns="http://www.w3.org/2000/svg"
                >
                  <path
                    d="M51 57C51 48.4089 39.8071 41.4444 26 41.4444C12.1929 41.4444 1 48.4089 1 57M26 32.1111C17.3705 32.1111 10.375 25.1467 10.375 16.5556C10.375 7.96446 17.3705 1 26 1C34.6295 1 41.625 7.96446 41.625 16.5556C41.625 25.1467 34.6295 32.1111 26 32.1111Z"
                    stroke="currentColor"
                    stroke-width="2"
                    stroke-linecap="round"
                    stroke-linejoin="round"
                  />
                </svg>
              </div>
              {selectedForm === "individual" && (
                <div className="check-icon">
                  <svg
                    width="24"
                    height="24"
                    viewBox="0 0 24 24"
                    fill="none"
                    xmlns="http://www.w3.org/2000/svg"
                  >
                    <path
                      fillRule="evenodd"
                      clipRule="evenodd"
                      d="M12 24C18.6274 24 24 18.6274 24 12C24 5.37258 18.6274 0 12 0C5.37258 0 0 5.37258 0 12C0 18.6274 5.37258 24 12 24ZM17.5104 8.95259C17.8156 8.56024 17.7449 7.99479 17.3526 7.68962C16.9602 7.38446 16.3948 7.45514 16.0896 7.8475L11.2812 14.0297C11.1743 14.1672 10.9731 14.185 10.8437 14.0685L7.80208 11.3311C7.43262 10.9986 6.86356 11.0285 6.53104 11.398C6.19853 11.7674 6.22848 12.3365 6.59794 12.669L9.63956 15.4065C10.5457 16.222 11.9536 16.0971 12.702 15.1348L17.5104 8.95259Z"
                      fill="white"
                    />
                  </svg>
                </div>
              )}
            </div>
            <div className="text-container-contact">
              <div className="label">{__t("contact_us.individual", translations)}</div>
            </div>
          </div>
        </div>

        {selectedForm === "business" ? (
          <div className="width-form md:p-[32px] p-[20px] flex flex-col gap-[20px] bg-[#fef3f1] rounded-[32px] justify-start items-start text-[14px]">
            <label className="grid grid-cols-1 md:grid-cols-2 md:gap-[40px] gap-[20px] w-full">
              <div className="flex-1">
                <span className="block">
                  {__t("contact_us.name", translations)}{" "}
                  <span className={"text-[red]"}>*</span>
                </span>
                <input
                  id={"name_business_sale_priority"}
                  type="email"
                  placeholder={__t("contact_us.enter_your_name", translations)}
                  className="h-[48px] px-[12px] w-full mt-1 border-0 bg-white placeholder:text-[#808080] rounded-[8px]"
                />
              </div>

              <div className="flex-1">
                <span className="block">
                  {__t("contact_us.email", translations)}{" "}
                  <span className={"text-[red]"}>*</span>
                </span>
                <input
                  id={"email_business_sale_priority"}
                  type="email"
                  placeholder={__t("contact_us.enter_your_email", translations)}
                  className="h-[48px] px-[12px] w-full mt-1 border-0 bg-white placeholder:text-[#808080] rounded-[8px]"
                />
              </div>
            </label>
            <label className="block w-full">
              <span className="block">
                {__t("contact_us.company", translations)}
              </span>
              <input
                id={"company_business_sale_priority"}
                placeholder={__t("contact_us.your_company", translations)}
                className="h-[48px] px-[12px] w-full mt-1 border-0 bg-white placeholder:text-[#808080] rounded-[8px]"
              />
            </label>
            <label className="block w-full">
              <span className="block">
                {__t("contact_us.phone", translations)}{" "}
              </span>
              <input
                id={"phone_business_sale_priority"}
                placeholder={__t(
                  "contact_us.enter_your_phone_number",
                  translations
                )}
                className="h-[48px] px-[12px] w-full mt-1 border-0 bg-white placeholder:text-[#808080] rounded-[8px]"
              />
            </label>
            <label className="block w-full">
              <span className="block">
                {__t("contact_us.note", translations)}
              </span>
              <textarea
                id={"note_business_sale_priority"}
                placeholder={__t("contact_us.enter_your_note", translations)}
                className="p-[12px] w-full mt-1 border-0 bg-white placeholder:text-[#808080] min-h-[160px] rounded-[8px]"
              />
            </label>
            <button
              onClick={() => {
                handleSubmitFormBusinessSale();
              }}
              className={
                "w-full rounded-[8px] hover-gradient flex items-center justify-center gap-2 bg-pcsMain text-white h-[52px] mt-[4px]"
              }
            >
              {loadingSubmit ? (
                <svg
                  className="w-5 h-5 text-white animate-spin"
                  xmlns="http://www.w3.org/2000/svg"
                  fill="none"
                  viewBox="0 0 24 24"
                >
                  <circle
                    className="opacity-25"
                    cx="12"
                    cy="12"
                    r="10"
                    stroke="currentColor"
                    strokeWidth="4"
                  ></circle>
                  <path
                    className="opacity-75"
                    fill="currentColor"
                    d="M4 12a8 8 0 018-8v8h8a8 8 0 11-16 0z"
                  ></path>
                </svg>
              ) : (
                <svg
                  width="22"
                  height="22"
                  viewBox="0 0 22 22"
                  fill="none"
                  xmlns="http://www.w3.org/2000/svg"
                >
                  <path
                    d="M5.82115 4.60583L15.379 1.41988C19.6682 -0.00986175 21.9986 2.33176 20.5801 6.62098L17.3942 16.1789C15.2552 22.6071 11.7428 22.6071 9.60377 16.1789L8.65812 13.3419L5.82115 12.3962C-0.60705 10.2572 -0.60705 6.75607 5.82115 4.60583Z"
                    stroke="white"
                    stroke-width="1.5"
                    stroke-linecap="round"
                    stroke-linejoin="round"
                  />
                  <path
                    d="M8.8728 12.8577L12.9031 8.81616"
                    stroke="white"
                    stroke-width="1.5"
                    stroke-linecap="round"
                    stroke-linejoin="round"
                  />
                </svg>
              )}{" "}
              <span className="font-semibold text-[16px]">
                {__t("contact_us.send", translations)}{" "}
              </span>
            </button>
          </div>
        ) : (
          <div className="width-form md:p-[32px] p-[20px] flex flex-col gap-[20px] bg-[#fef3f1] rounded-[32px] justify-start items-start text-[14px]">
            <label className="grid grid-cols-1 md:grid-cols-2 md:gap-[40px] gap-[20px] w-full">
              <div className="flex-1">
                <span className="block">
                  {__t("contact_us.name", translations)}{" "}
                  <span className={"text-[red]"}>*</span>
                </span>
                <input
                  id={"name_individual_sale"}
                  type="email"
                  placeholder={__t("contact_us.enter_your_name", translations)}
                  className="h-[48px] px-[12px] w-full mt-1 border-0 bg-white placeholder:text-[#808080] rounded-[8px]"
                />
              </div>

              <div className="flex-1">
                <span className="block">
                  {__t("contact_us.email", translations)}{" "}
                  <span className={"text-[red]"}>*</span>
                </span>
                <input
                  id={"email_individual_sale"}
                  type="email"
                  placeholder={__t("contact_us.enter_your_email", translations)}
                  className="h-[48px] px-[12px] w-full mt-1 border-0 bg-white placeholder:text-[#808080] rounded-[8px]"
                />
              </div>
            </label>
            <label className="block w-full">
              <span className="block">
                {__t("contact_us.phone", translations)}{" "}
              </span>
              <input
                id={"phone_individual_sale"}
                placeholder={__t(
                  "contact_us.enter_your_phone_number",
                  translations
                )}
                className="h-[48px] px-[12px] w-full mt-1 border-0 bg-white placeholder:text-[#808080] rounded-[8px]"
              />
            </label>
            <label className="block w-full">
              <span className="block">
                {__t("contact_us.note", translations)}
              </span>
              <textarea
                id={"note_individual_sale"}
                placeholder={__t("contact_us.enter_your_note", translations)}
                className="p-[12px] w-full mt-1 border-0 bg-white placeholder:text-[#808080] min-h-[160px] rounded-[8px]"
              />
            </label>
            <button
              onClick={() => {
                handleSubmitFormIndividualSale();
              }}
              className={
                "w-full rounded-[8px] hover-gradient flex items-center justify-center gap-2 bg-pcsMain text-white h-[52px] mt-[4px]"
              }
            >
              {loadingSubmit ? (
                <svg
                  className="w-5 h-5 text-white animate-spin"
                  xmlns="http://www.w3.org/2000/svg"
                  fill="none"
                  viewBox="0 0 24 24"
                >
                  <circle
                    className="opacity-25"
                    cx="12"
                    cy="12"
                    r="10"
                    stroke="currentColor"
                    strokeWidth="4"
                  ></circle>
                  <path
                    className="opacity-75"
                    fill="currentColor"
                    d="M4 12a8 8 0 018-8v8h8a8 8 0 11-16 0z"
                  ></path>
                </svg>
              ) : (
                <svg
                  width="22"
                  height="22"
                  viewBox="0 0 22 22"
                  fill="none"
                  xmlns="http://www.w3.org/2000/svg"
                >
                  <path
                    d="M5.82115 4.60583L15.379 1.41988C19.6682 -0.00986175 21.9986 2.33176 20.5801 6.62098L17.3942 16.1789C15.2552 22.6071 11.7428 22.6071 9.60377 16.1789L8.65812 13.3419L5.82115 12.3962C-0.60705 10.2572 -0.60705 6.75607 5.82115 4.60583Z"
                    stroke="white"
                    stroke-width="1.5"
                    stroke-linecap="round"
                    stroke-linejoin="round"
                  />
                  <path
                    d="M8.8728 12.8577L12.9031 8.81616"
                    stroke="white"
                    stroke-width="1.5"
                    stroke-linecap="round"
                    stroke-linejoin="round"
                  />
                </svg>
              )}{" "}
              <span className="font-semibold text-[16px]">
                {__t("contact_us.send", translations)}{" "}
              </span>
            </button>
          </div>
        )}
      </div>
      <div
        className={`relative z-10 ${openMessage.title ? "" : "hidden"}`}
        aria-labelledby="modal-title"
        role="dialog"
        aria-modal="true"
      >
        <div
          className="fixed inset-0 bg-gray-500/75 transition-opacity"
          aria-hidden="true"
        ></div>
        <div className="fixed inset-0 z-10 w-screen overflow-y-auto">
          <div className="flex min-h-full items-end justify-center p-4 text-center sm:items-center sm:p-0">
            <div className="relative transform overflow-hidden rounded-lg bg-white text-left shadow-xl transition-all sm:my-8 sm:w-full sm:max-w-lg">
              <div className="bg-white px-4 pb-4 pt-5 sm:p-6 sm:pb-4">
                <div className="sm:flex sm:items-start">
                  {openMessage.icon}
                  <div className="mt-3 text-center sm:ml-4 sm:mt-0 sm:text-left">
                    <h3
                      className="text-base font-semibold text-gray-900"
                      id="modal-title"
                    >
                      {openMessage.title}
                    </h3>
                    <div className="mt-2">
                      <p className="text-sm text-gray-500">
                        {openMessage.description}
                      </p>
                    </div>
                  </div>
                </div>
              </div>
              <div className="bg-gray-50 px-4 py-3 sm:flex sm:flex-row-reverse sm:px-6">
                <button
                  onClick={() =>
                    setOpenMessage({
                      icon: <div />,
                      title: "",
                      description: "",
                    })
                  }
                  type="button"
                  className="inline-flex w-full justify-center rounded-md bg-pcsMain px-3 py-2 text-sm font-semibold text-white shadow-sm hover:opacity-90 sm:ml-3 sm:w-auto"
                >
                  {__t("contact_us.ok", translations)}
                </button>
              </div>
            </div>
          </div>
        </div>
      </div>
      {/* khoảng cách footer */}
      <div className="px-paddingMobile md:px-paddingDesktop md:mt-[96px] mt-[60px]" />
    </>
  );
};

export default FulfillmentSolutions;

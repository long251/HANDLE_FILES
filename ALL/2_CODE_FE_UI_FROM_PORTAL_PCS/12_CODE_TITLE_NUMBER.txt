const [itemStrings] = useState([
    { label: 'Chờ mua', value: 'CHO_MUA_HANG' },
    {
      label: 'Đã mua',
      value: 'DA_MUA_HANG',
    },
    { label: 'Vận chuyển nội địa', value: 'VAN_CHUYEN_NOI_DIA' },
    {
      label: 'Hàng mới nhận',
      value: 'DA_NHAN_HANG',
    },
    { label: 'Đã huỷ', value: 'KET_THUC_DON_HANG' },
  ]);
  const itemIndex = ['CHO_MUA_HANG', 'DA_MUA_HANG', 'VAN_CHUYEN_NOI_DIA', 'DA_NHAN_HANG', 'KET_THUC_DON_HANG'];
  const [activeTab, setActiveTab] = useState('CHO_MUA_HANG');
  const [activeTabIndex, setActiveTabIndex] = useState(0);

 const totalOrderState = useSelector((state: AppState) => state.totalOrder);

const debounceFetchDataFun = useCallback(
    debounce((data: any) => {
      dispatch(orderBuyForYouAction.fetchData(data));
      dispatch(totalOrderAction.fetchData(data));
    }, 300),
    [],
  );

const getTabCount = (type: string) => {
    let badge = '';
    switch (type) {
      case 'CHO_MUA_HANG':
        badge = `${totalOrderState.totalWaitingPurchase}`;
        break;
      case 'DA_MUA_HANG':
        badge = `${totalOrderState.totalBoughtPurchase}`;
        break;
      case 'VAN_CHUYEN_NOI_DIA':
        badge = `${totalOrderState.totalTransportPurchase}`;
        break;
      case 'DA_NHAN_HANG':
        badge = `${totalOrderState.totalReceivedPurchase}`;
        break;
      case 'KET_THUC_DON_HANG':
        badge = `${totalOrderState.totalCancelPurchase}`;
        break;
      default:
        break;
    }
    return badge;
  };

const navigate = useNavigate();
  const location = useLocation();
  const searchParams = new URLSearchParams(location.search);
  const tabs: TabProps[] = itemStrings.map((item, index) => ({
    content: item.label,
    badge: getTabCount(item.value),
    index,
    onAction: () => {
      setActiveTab(item.value);
      setActiveTabIndex(index);
    },
    id: `${item.value}-${index}`,
  }));

  useEffect(() => {
    let typeParam: string = searchParams.get('type') ?? 'CHO_MUA_HANG';
    setActiveTab(typeParam);
    setActiveTabIndex(itemIndex.indexOf(typeParam));
  }, []);

  const updateUrl = (key: string, value: string) => {
    searchParams.set(key, value);
    navigate({ search: searchParams.toString() });
  };
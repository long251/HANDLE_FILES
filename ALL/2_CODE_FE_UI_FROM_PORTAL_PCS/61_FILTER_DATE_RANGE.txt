LOGIC:
// Search Picked Date Range
  const [dateRangeActive, setDateRangeActive] = useState(false);
  const [{ month, year }, setDate] = useState({ month: new Date().getMonth(), year: new Date().getFullYear() });
  const [selectedDates, setSelectedDates] = useState({
    start: moment().subtract(30, 'days').toDate(),
    end: moment().toDate(),
  });
  const handleMonthChange = useCallback((month: number, year: number) => setDate({ month, year }), []);
  const [dateInputValue, setDateInputValue] = useState(
    `${moment(selectedDates.start).format('DD/MM/yyyy')} - ${moment(selectedDates.end).format('DD/MM/yyyy')}`,
  );
  const [rangeSelected, setRangeSelected] = useState<string[]>([]);
  const takeDate = (type: 'start' | 'end') => {
    let splitDate = dateInputValue.split(' - ');
    return type == 'start' ? splitDate[0] : splitDate[1];
  };
const handleInputDate = (event: any) => {
    setDateInputValue(event.target.value);
    const [startDateStr, endDateStr] = event.target.value.split(' - ');
    if (moment(startDateStr, 'DD/MM/yyyy').isValid() && moment(endDateStr, 'DD/MM/yyyy').isValid()) {
      const dateTime = `${startDateStr} - ${endDateStr}`;
      updateUrl('dateTime', dateTime);
      setCurrentPage(1);
      updateUrl('page', '1');
      debounceFetchDataFun({
        fromDate: moment(takeDate('start'), 'DD/MM/yyyy').toDate(),
        toDate: moment(takeDate('end'), 'DD/MM/yyyy').add(1, 'd').toDate(),
        refCode: codeBillOfLading,
        quoteCode: codeDeliveryBill,
        routeCode: '',
        sorts: [{ sortBy: 'CreatedDate', sortDirection: 'DESC' }],
        pageIndex: 1,
        pageSize: pageSize,
      });
    }
    applyDateRange();
  };
  const applyDateRange = () => {
    const startDate = selectedDates.start;
    const endDate = selectedDates.end;
    const startDateStr = moment(startDate).format('DD/MM/yyyy');
    const endDateStr = moment(endDate).format('DD/MM/yyyy');

    if (moment(startDateStr, 'DD/MM/yyyy').isValid() && moment(endDateStr, 'DD/MM/yyyy').isValid()) {
      const dateTime = `${startDateStr} - ${endDateStr}`;
      setDateInputValue(dateTime);
      updateUrl('dateTime', dateTime);
      setCurrentPage(1);
      updateUrl('page', '1');
      setDateRangeActive(false);

      debounceFetchDataFun({
        fromDate: moment(startDateStr, 'DD/MM/yyyy').toDate(),
        toDate: moment(endDateStr, 'DD/MM/yyyy').add(1, 'd').toDate(),
        refCode: codeBillOfLading,
        quoteCode: codeDeliveryBill,
        routeCode: route,
        sorts: [{ sortBy: 'CreatedDate', sortDirection: 'DESC' }],
        pageIndex: 1,
        pageSize: pageSize,
      });
    }
  };
________________________________________________________________________________________________________
RETURN
  <div className='Polaris-Connected'>
                        <div className='Polaris-Connected__Item Polaris-Connected__Item--primary'>
                          <div className='Polaris-TextField Polaris-TextField--hasValue'>
                            <MaskedInput
                              mask={[
                                /\d/,
                                /\d/,
                                '/',
                                /\d/,
                                /\d/,
                                '/',
                                /\d/,
                                /\d/,
                                /\d/,
                                /\d/,
                                ' ',
                                '-',
                                ' ',
                                /\d/,
                                /\d/,
                                '/',
                                /\d/,
                                /\d/,
                                '/',
                                /\d/,
                                /\d/,
                                /\d/,
                                /\d/,
                              ]}
                              className='Polaris-TextField__Input'
                              placeholder='dd/mm/yyyy - dd/mm/yyyy'
                              guide
                              value={dateInputValue}
                              placeholderChar={'_'}
                              keepCharPositions
                              id='PolarisTextField6'
                              onChange={handleInputDate}
                              // onChange={(event: any) => {
                              //   setDateInputValue(event.target.value);
                              //   goToPage(1);
                              // }}
                              aria-labelledby={'PolarisTextField6Label'}
                              aria-invalid={false}
                            />
                            <div className='Polaris-TextField__Backdrop' />
                            <div className='Polaris-TextField__Suffix'>
                              <Popover
                                fluidContent
                                active={dateRangeActive}
                                activator={
                                  <Button
                                    onClick={() => {
                                      setRangeSelected([]);
                                      setDateRangeActive(!dateRangeActive);
                                      let splitDate = dateInputValue.split(' - ');
                                      let startDateStr = splitDate[0];
                                      let endDateStr = splitDate[1];
                                      if (
                                        moment(startDateStr, 'DD/MM/yyyy').isValid() &&
                                        moment(endDateStr, 'DD/MM/yyyy').isValid()
                                      ) {
                                        setSelectedDates({
                                          start: moment(startDateStr, 'DD/MM/yyyy').toDate(),
                                          end: moment(endDateStr, 'DD/MM/yyyy').toDate(),
                                        });
                                        setDate({
                                          month: moment(endDateStr, 'DD/MM/yyyy').month(),
                                          year: moment(endDateStr, 'DD/MM/yyyy').year(),
                                        });
                                      }
                                    }}
                                    plain
                                    icon={PolarisIcons.CalendarMajor}
                                  />
                                }
                                onClose={() => setDateRangeActive(false)}
                              >
                                <div className='Custom-DatePicker'>
                                  <div className='date_range'>
                                    <div className='pre_option'>
                                      <div className='list_option'>
                                        <div className='list_content'>
                                          <OptionList
                                            title=''
                                            onChange={(selected) => {
                                              setRangeSelected(selected);
                                              if (selected[0] == 'today') {
                                                setSelectedDates({
                                                  start: moment().toDate(),
                                                  end: moment().toDate(),
                                                });
                                                setDate({ month: moment().month(), year: moment().year() });
                                              } else if (selected[0] == 'yesterday') {
                                                setSelectedDates({
                                                  start: moment().subtract(1, 'day').toDate(),
                                                  end: moment().subtract(1, 'day').toDate(),
                                                });
                                                setDate({
                                                  month: moment().subtract(1, 'day').month(),
                                                  year: moment().subtract(1, 'day').year(),
                                                });
                                              } else if (selected[0] == 'last_7_days') {
                                                setSelectedDates({
                                                  start: moment().subtract(7, 'day').toDate(),
                                                  end: moment().toDate(),
                                                });
                                                setDate({
                                                  month: moment().subtract(7, 'day').month(),
                                                  year: moment().subtract(7, 'day').year(),
                                                });
                                              } else if (selected[0] == 'last_30_days') {
                                                setSelectedDates({
                                                  start: moment().subtract(30, 'day').toDate(),
                                                  end: moment().toDate(),
                                                });
                                                setDate({
                                                  month: moment().subtract(30, 'day').month(),
                                                  year: moment().subtract(30, 'day').year(),
                                                });
                                              } else if (selected[0] == 'last_90_days') {
                                                setSelectedDates({
                                                  start: moment().subtract(90, 'day').toDate(),
                                                  end: moment().toDate(),
                                                });
                                                setDate({
                                                  month: moment().subtract(90, 'day').month(),
                                                  year: moment().subtract(90, 'day').year(),
                                                });
                                              }
                                            }}
                                            options={[
                                              { value: 'today', label: 'Hôm nay' },
                                              { value: 'yesterday', label: 'Hôm qua' },
                                              { value: 'last_7_days', label: '7 ngày trước' },
                                              { value: 'last_30_days', label: '30 ngày trước' },
                                              { value: 'last_90_days', label: '90 ngày trước' },
                                            ]}
                                            selected={rangeSelected}
                                          />
                                        </div>
                                      </div>
                                    </div>
                                    <div className='pick_date'>
                                      <DatePicker
                                        disableDatesAfter={new Date()}
                                        weekStartsOn={1}
                                        month={month}
                                        year={year}
                                        onChange={setSelectedDates}
                                        onMonthChange={handleMonthChange}
                                        selected={selectedDates}
                                        multiMonth
                                        allowRange
                                      />
                                    </div>
                                  </div>
                                  <div className='actions'>
                                    <LegacyStack distribution={'trailing'}>
                                      <Button onClick={() => setDateRangeActive(false)}>Đóng</Button>
                                      <Button primary onClick={applyDateRange}>
                                        Áp dụng
                                      </Button>
                                    </LegacyStack>
                                  </div>
                                </div>
                              </Popover>
                            </div>
                          </div>
                        </div>
                      </div>
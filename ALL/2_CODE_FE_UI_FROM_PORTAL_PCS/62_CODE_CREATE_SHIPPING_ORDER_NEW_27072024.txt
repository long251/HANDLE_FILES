import {
  Button,
  Checkbox,
  DataTable,
  FormLayout,
  Icon,
  Layout,
  LegacyCard,
  Link,
  Modal,
  Page,
  PolarisIcons,
  Popover,
  Spinner,
} from 'pcs-polaris';
import React, { useCallback, useEffect, useState } from 'react';
import {
  IconAmerican,
  IconArrowDetail,
  IconArrowService,
  IconCanada,
  IconChina,
  IconDelete,
  IconEdit,
  IconEngland,
  IconGermany,
  IconHaveService,
  IconImportExcel,
  IconJapan,
  IconKorea,
  IconSuccessed,
  IconVietNam,
} from './IconShippingOrders';
import { clearToast, showToast } from '../../helpers/toast';
import TitleBreadcrumbs from '../../components/Breadcrumb/TitleBreadcrumb.tsx';
import { IconBack } from '../Ecommerce/IconEcommerce.tsx';
import { useDispatch, useSelector } from 'react-redux';
import { AppState } from '../../store';
import { shippingOrdersAction } from '../../store/reducers/shippingOrdersReducer';
import moment from 'moment';
import { apiClient } from '../../utils/api.ts';
import { modalAction } from '../../store/reducers/modalReducer';
import { parseInt } from 'lodash';

const CreateShippingOrders = () => {
  const dispatch = useDispatch();
  const shippingOrdersState = useSelector((state: AppState) => state.shippingOrders);
  useEffect(() => {
    dispatch(shippingOrdersAction.fetchAllRoute()); //get all route country
    dispatch(shippingOrdersAction.fetchRoute({ route: 'JP-VN' })); //get all add by route
    dispatch(shippingOrdersAction.fetchChooseAddress()); //get all add choose
    dispatch(shippingOrdersAction.fetchProductType()); //get all product list
    dispatch(shippingOrdersAction.fetchCurrency()); //get currency
  }, []);
  // Logic Navigation Selected Page
  const [selected, setSelected] = useState(0);
  const handleSelectPageChange = useCallback((selectedTabIndex: number) => setSelected(selectedTabIndex), []);
  //------------------------ Step 1: Choose country, address,...---------------------------------
  const getRouteInfo = (code: string) => {
    switch (code) {
      case 'US-VN':
        return { label: 'Mỹ - Việt Nam', icon: <IconAmerican /> };
      case 'JP-VN':
        return { label: 'Nhật Bản - Việt Nam', icon: <IconJapan /> };
      case 'KR-VN':
        return { label: 'Hàn Quốc - Việt Nam', icon: <IconKorea /> };
      case 'UK-VN':
        return { label: 'Anh - Việt Nam', icon: <IconEngland /> };
      case 'DE-VN':
        return { label: 'Đức - Việt Nam', icon: <IconGermany /> };
      case 'VN':
        return { label: 'Việt Nam', icon: <IconVietNam /> };
      case 'CN-VN':
        return { label: 'Trung quốc - Việt Nam', icon: <IconChina /> };
      case 'CA-VN':
        return { label: 'Canada - Việt Nam', icon: <IconCanada /> };
      default:
        return { label: 'Unknown', icon: <div /> };
    }
  };
  const exchangeRate = () => {
    switch (activeCountry) {
      case 'VN':
        return shippingOrdersState.currency[0];
      case 'US-VN':
        return shippingOrdersState.currency[1];
      case 'KR-VN':
        return shippingOrdersState.currency[2];
      case 'JP-VN':
        return shippingOrdersState.currency[3];
      case 'UK-VN':
        return shippingOrdersState.currency[4];
      case 'DE-VN':
        return shippingOrdersState.currency[5];
      case 'CN-VN':
        return shippingOrdersState.currency[6];
      case 'CA-VN':
        return shippingOrdersState.currency[7];
      default:
        return shippingOrdersState.currency[0];
    }
  };
  const getCurrencySymbol = (currencyCode: string) => {
    switch (currencyCode) {
      case 'VNY':
        return '₫';
      case 'USD':
        return '$';
      case 'KRW':
        return '₩';
      case 'JPY':
        return '¥';
      case 'GBP':
        return '£';
      case 'EUR':
        return '€';
      case 'CNY':
        return '元';
      case 'CAD':
        return '$';
      default:
        return currencyCode;
    }
  };
  const changeRouteName = (country: string | null) => {
    switch (country) {
      case 'VN':
        return 'Việt Nam';
      case 'US-VN':
        return 'Mỹ - Việt Nam';
      case 'JP-VN':
        return 'Nhật Bản - Việt Nam';
      case 'KR-VN':
        return 'Hàn Quốc - Việt Nam';
      case 'UK-VN':
        return 'Anh - Việt Nam';
      case 'DE-VN':
        return 'Đức - Việt Nam';
      case 'CN-VN':
        return 'Trung Quốc - Việt Nam';
      case 'CA-VN':
        return 'Canada - Việt Nam';
      default:
        return 'Việt Nam';
    }
  };
  // active Country
  const [activeCountry, setActiveCountry] = useState<string | null>('JP-VN');
  const [hoveredCountry, setHoveredCountry] = useState<string | null>(null);
  const handleMouseEnterCountry = (countryName: string) => {
    if (activeCountry !== countryName) {
      setHoveredCountry(countryName);
    }
  };
  const handleMouseLeaveCountry = () => {
    setHoveredCountry(null);
  };
  const handleClickCountry = (countryName: string) => {
    setActiveCountry(countryName);
    dispatch(shippingOrdersAction.fetchRoute({ route: countryName }));
  };
  // active Address
  const [activeAddress, setActiveAddress] = useState<string | null>('1-228-1 SKY');
  const [warehouseName, setWarehouseName] = useState<string | null>('JP SEA');
  const [hoveredAddress, setHoveredAddress] = useState<string | null>(null);
  const handleMouseEnterAddress = (address: string) => {
    if (activeAddress !== address) {
      setHoveredAddress(address);
    }
  };
  const handleMouseLeaveAddress = () => {
    setHoveredAddress(null);
  };
  const handleClickAddress = (address: string, warehouseName: string) => {
    setActiveAddress(address);
    setWarehouseName(warehouseName);
  };
  // Expand delivery Address
  const [activeDeliveyAddress, setActiveDeliveryAddress] = useState(false);
  const toggleModalDeliveryAddress = useCallback(
    () => setActiveDeliveryAddress((activeDeliveyAddress) => !activeDeliveyAddress),
    [],
  );
  const [selectedAddress, setSelectedAddress] = useState<number | null>(null);
  const handleSaveAddress = () => {
    if (selectedAddress) {
      const selectedAdd = shippingOrdersState.address.find((add: any) => add.id === selectedAddress);
      if (selectedAdd) {
        setSelectedAddress(selectedAdd.id);
      }
    }
    toggleModalDeliveryAddress();
  };
  useEffect(() => {
    const defaultAddress = shippingOrdersState.address.find((add: any) => add.active === true);
    if (defaultAddress) {
      setSelectedAddress(defaultAddress.id);
    } else if (shippingOrdersState.address.length > 0) {
      setSelectedAddress(shippingOrdersState.address[0].id);
    }
  }, [shippingOrdersState.address]);

  // handle open modal add address and create address
  const handleAddAddress = () => {
    setActiveDeliveryAddress(false);
    dispatch(
      modalAction.openModal({
        type: 'create_address',
        title: 'Thêm địa chỉ nhận hàng',
        data: {
          callback: () => {
            setActiveDeliveryAddress(true);
            dispatch(shippingOrdersAction.fetchChooseAddress());
          },
        },
      }),
    );
  };
  const handleReset = () => {
    handleClickCountry('JP-VN');
    handleClickAddress('1-228-1 SKY', '埼玉県');
    const defaultAddress = shippingOrdersState.address.find((add: any) => add.active === true);
    if (defaultAddress) {
      setSelectedAddress(defaultAddress.id);
    }
  };
  //------------------------------ Step 2: Input Tracking Code ---------------------------------
  const [trackingCodeInput, setTrackingCodeInput] = useState<string>('');
  const defaultProduct = {
    name: '',
    nameCustom: '',
    image: '',
    qty: '1',
    price: '0',
    priceWeight: 0,
    weight: '0',
    priceStandard: 0,
  };
  const defaultPack = {
    tracking: '',
    weight: 0,
    width: 0,
    height: 0,
    length: 0,
    note: '',
    packageProducts: [defaultProduct],
  };
  const [trackingData, setTrackingData] = useState<
    {
      trackingCode: string;
      weight: number;
      services: any[];
      note: string;
      packages: {
        tracking: string;
        weight: number;
        width: number;
        height: number;
        length: number;
        note: string;
        packageProducts: {
          name: string;
          nameCustom: string;
          image: string;
          qty: string;
          price: string;
          priceWeight: number;
          weight: string;
          priceStandard: number;
        }[];
      }[];
    }[]
  >([]);
  // useEffect(() => {
  //   trackingData.forEach((trackingItem) => {
  //     trackingItem.packages.forEach((pkg) => {
  //       console.log('Trọng lượng:', pkg.weight);
  //     });
  //   });
  // }, [trackingData]);
  const services = shippingOrdersState?.product_type?.data?.serviceCharges;

  const [activePopover, setActivePopover] = useState<string | null>(null); // mở chọn dịch vụ
  const [expandedItem, setExpandedItem] = useState<string | null>(null); // mở rộng từ Edit của Tracking tổng
  const [expandedItemPackage, setExpandedItemPackage] = useState<number | null>(null); // mở rộng từ Package

  const handleKeyPress = (e: React.KeyboardEvent<HTMLInputElement>) => {
    if (e.key === 'Enter') {
      handleTrackingCodeSubmit();
    }
  };
  const handleTrackingCodeSubmit = () => {
    let cleanTrackingCodes = trackingCodeInput.replace(/\s+/g, ' ').trim();
    let trackingCodeArr = cleanTrackingCodes.split(' ');
    if (trackingCodeArr.length) {
      let newTrackingCodes: any = [...trackingData];
      for (let i = 0; i < trackingCodeArr.length; i++) {
        let isExist = false;
        for (let j = 0; j < newTrackingCodes.length; j++) {
          if (newTrackingCodes[j].trackingCode == trackingCodeArr[i]) {
            isExist = true;
            break;
          }
        }
        if (!isExist) {
          newTrackingCodes.push({
            note: '',
            trackingCode: trackingCodeArr[i],
            services: [],
            packages: [{ ...defaultPack, tracking: trackingCodeArr[i], note: '' }],
          });
        }
      }
      setTrackingData(newTrackingCodes);
      setTrackingCodeInput('');
    }
  };
  // hàm xử lý nhập cân nặng package
  ////////////////////////////////////
  const handleTogglePopover = (trackingCode: string) => {
    setActivePopover((active) => (active === trackingCode ? null : trackingCode));
  };
  const handleCheckboxChange = (serviceId: number, trackingCode: string) => {
    setTrackingData((prev) =>
      prev.map((item) =>
        item.trackingCode === trackingCode
          ? {
              ...item,
              services: item.services.includes(serviceId)
                ? item.services.filter((id) => id !== serviceId)
                : [...item.services, serviceId],
            }
          : item,
      ),
    );
  };
  const setTotalWeight = (weightInut: number, trackingCode: string)=>{
    const tracking = trackingData.find((t) => t.trackingCode === trackingCode);
    if (tracking) {
      const newTracking = { ...tracking, weight: weightInut };
      setTrackingData(trackingData.map((t) => (t.trackingCode === trackingCode ? newTracking : t)));
    }
  }
  const setNoteForTracking = (noteInput: string, trackingCode: string) => {
    const tracking = trackingData.find((t) => t.trackingCode === trackingCode);
    if (tracking) {
      const newTracking = { ...tracking, note: noteInput };
      setTrackingData(trackingData.map((t) => (t.trackingCode === trackingCode ? newTracking : t)));
    }
  };
  const handleEdit = (trackingCode: string) => {
    setExpandedItem((prev) => (prev === trackingCode ? null : trackingCode));
  };
  const handleDelete = (index: number) => {
    setTrackingData((prev) => prev.filter((_, idx) => idx !== index));
  };
  // const handleAddPackage = (trackingCode: string) => {
  //   const tracking = trackingData.find((t) => t.trackingCode === trackingCode);
  //   const packsToAdd = tracking?.packages;
  //   if (packsToAdd) {
  //     if (packsToAdd.length > 0) {
  //       const newPacks = [...packsToAdd, { ...defaultPack, tracking: trackingCode, note: tracking.note }];
  //       const newTracking = { ...tracking, packages: newPacks };
  //       setTrackingData(trackingData.map((t) => (t.trackingCode === trackingCode ? newTracking : t)));
  //     } else {
  //       const newPacks = [{ ...defaultPack, tracking: trackingCode }];
  //       const newTracking = { ...tracking, packages: newPacks };
  //       setTrackingData(trackingData.map((t) => (t.trackingCode === trackingCode ? newTracking : t)));
  //     }
  //   }
  // };
  // const handleRemovePackage = (trackingCode: string, packageIndex: number) => {
  //   setTrackingData((prev) =>
  //     prev.map((item) =>
  //       item.trackingCode === trackingCode
  //         ? { ...item, packages: item.packages.filter((_, idx) => idx !== packageIndex) }
  //         : item,
  //     ),
  //   );
  // };
  // const handleTogglePackageDetails = (packages: number) => {
  //   setExpandedItemPackage((prev) => (prev === packages ? null : packages));
  // };
  const handleAddProduct = (packIndex: number, trackingCode: string) => {
    const tracking = trackingData.find((t) => t.trackingCode === trackingCode);
    const packs = tracking?.packages;
    if (packs && packs.length > 0) {
      const pack = packs[packIndex];
      const packageProducts = pack.packageProducts;

      if (packageProducts && packageProducts.length > 0) {
        let newProducts = [...packageProducts];
        newProducts.push(defaultProduct);
        const newPack = { ...pack, packageProducts: newProducts };
        const newPacks = packs.map((p: any, i: number) => (i === packIndex ? newPack : p));
        const newTracking = { ...tracking, packages: newPacks };
        setTrackingData(trackingData.map((t) => (t.trackingCode === trackingCode ? newTracking : t)));
      } else {
        const newProducts = [defaultProduct];
        const newPack = { ...pack, packageProducts: newProducts };
        const newPacks = packs.map((p: any, i: number) => (i === packIndex ? newPack : p));
        const newTracking = { ...tracking, packages: newPacks };
        setTrackingData(trackingData.map((t) => (t.trackingCode === trackingCode ? newTracking : t)));
      }
    }
  };
  const handleDeleteProduct = (productIndex: number, packageIndex: number, trackingCode: string) => {
    const tracking = trackingData.find((t) => t.trackingCode === trackingCode);
    if (tracking) {
      const packs = tracking.packages;
      if (packs && packs.length > 0) {
        const pack = packs[packageIndex];
        if (pack) {
          const products = pack.packageProducts;
          if (products && products.length > 0) {
            const newProducts = products.filter((_: any, i: number) => i !== productIndex);
            const newPack = { ...pack, packageProducts: newProducts };
            const newPacks = packs.map((p: any, i: number) => (i === packageIndex ? newPack : p));
            const newTracking = { ...tracking, packages: newPacks };
            setTrackingData(trackingData.map((t) => (t.trackingCode === trackingCode ? newTracking : t)));
          }
        }
      }
    }
  };
  // complete
  const [completedProducts, setCompleletProducts] = useState<Array<number>>([]);
  useEffect(() => {
    setCompleletProducts([]);
  }, [expandedItem, expandedItemPackage]);
  const handleSaveProduct = (trackingCode: string, packIndex: number, productIndex: number) => {
    const tracking = trackingData.find((t) => t.trackingCode === trackingCode);
    if (tracking) {
      const packs = tracking.packages;
      if (packs && packs.length > 0) {
        const pack = packs[packIndex];
        if (pack) {
          const products = pack.packageProducts;
          if (products && products.length > 0) {
            const product = products[productIndex];
            if (
              product.name.trim() === '' ||
              product.nameCustom.trim() === '' ||
              Number(product.qty) <= 0 ||
              Number(product.weight) <= 0
              // ||
              // Number(product.price) <= 0
            ) {
              clearToast();
              showToast('Bạn chưa nhập đủ dữ liệu sản phẩm', 'error');
            } else {
              if (completedProducts.includes(productIndex)) {
                setCompleletProducts(completedProducts.filter((c) => c !== productIndex));
              } else {
                setCompleletProducts([...completedProducts, productIndex]);
              }
            }
          }
        }
      }
    }
  };
  function formatWeight(weight: any) {
    if (!weight) return '';
    const parts = weight.toString().split('.');
    const integerPart = parts[0].replace(/\B(?=(\d{3})+(?!\d))/g, ',');
    const decimalPart = parts[1] ? '.' + parts[1] : '';
    return integerPart + decimalPart + ' kg';
  }
  function handleWeightChange(e: any, index: number) {
    const newWeight = e.target.value.replace(/,/g, '');
  }
  //------------------------------ Step 3: check lại dữ liệu , Lưu và tạo đơn-----------------------------
  // const [paymentMethod, setPaymentMethod] = useState('COD');
  const rows2 = trackingData.map((item, i) => {
    const ids = item.services;
    let texts = '';
    ids.forEach((id, i) => {
      const text = services.find((s: any) => s.id === id).name;
      if (i < ids.length - 1) {
        texts = texts + text + ', ';
      } else {
        texts = texts + text;
      }
    });
    const packs = item.packages;
    let weight = 0;
    packs.forEach((p) => {
      weight = weight + Number(p.weight);
    });
    const serviceContent = texts ? texts : <span style={{ color: '#A91116' }}>Không có dịch vụ được chọn</span>;
    const noteContent = item.note ? (
      item.note
    ) : (
      <span style={{ color: '#A91116' }}>Không có ghi chú nào được thêm</span>
    );
    return [i + 1, item.trackingCode, `${weight} kg`, serviceContent, noteContent];
  });

  const [orderDate, setOrderDate] = useState<string | null>(null);
  const [orderCodes, setOrderCodes] = useState<string[]>([]);

  const handleRequest = async () => {
    const orderTransportAddRequest = trackingData.map((tracking) => ({
      packages: tracking.packages.map((pack) => ({
        weight: pack.weight,
        packageProducts: pack.packageProducts.map((product) => ({
          ...product,
          priceStandard: product.priceStandard,
          priceWeight: product.priceWeight,
          weight: product.weight,
        })),
        productAdd: {
          weight: pack.weight,
          qty: 0,
          price: 0,
        },
        weightQuote: pack.weight,
        length: pack.length,
        height: pack.height,
      })),
      note: tracking.note,
      shippingRouteCode: activeCountry,
      shippingRouteId: 1,
      currency: exchangeRate().currencyCode,
      warehouse: shippingOrdersState.route.find((r) => r.warehouseName === warehouseName)?.code,
      addressId: selectedAddress,
      customerName: shippingOrdersState.address.find((add: any) => add.id === selectedAddress)?.name,
      customerAddress: shippingOrdersState.address.find((add: any) => add.id === selectedAddress)?.address,
      customerDistrict: shippingOrdersState.address.find((add: any) => add.id === selectedAddress)?.district,
      customerPhone: shippingOrdersState.address.find((add: any) => add.id === selectedAddress)?.phone,
      customerProvince: shippingOrdersState.address.find((add: any) => add.id === selectedAddress)?.province,
      customerWard: shippingOrdersState.address.find((add: any) => add.id === selectedAddress)?.ward,
      tracking: tracking.trackingCode,
      surcharge: 0,
      priceExpected: 0,
      orderServices: tracking.services.map((id) => services.find((s: any) => s.id === id).name),
      totalAmount: 0,
    }));
    const payload = {
      orderTransportAddRequest,
      paymentMethod: 'COD',
      source: 'PORTALNEW',
    };
    try {
      let response = await apiClient.post(
        'https://beta-portal-api.shipquocte.com/api/OrderPackage/AddOrderTransport',
        payload,
      );
      if (response.data.status) {
        console.log('Tạo đơn hàng thành công', response.data.data);
        setOrderDate(response.data.data[0].orderDate);
        const codes = response.data.data.map((order: any) => order.code);
        setOrderCodes(codes);
        showToast('Tạo đơn hàng thành công', 'success');
        handleSelectPageChange(3);
      } else {
        console.error('Tạo mới đơn hàng thất bại');
        showToast('Tạo mới đơn hàng thất bại', 'error');
      }
    } catch (e) {
      console.error('Tạo mới đơn hàng thất bại', e);
      showToast('Tạo mới đơn hàng thất bại', 'error');
    }
  };

  const rows3 = trackingData.map((item, i) => {
    const ids = item.services;
    let texts = '';
    ids.forEach((id, i) => {
      const text = services.find((s: any) => s.id === id).name;
      if (i < ids.length - 1) {
        texts = texts + text + ', ';
      } else {
        texts = texts + text;
      }
    });
    const packs = item.packages;
    let weight = 0;
    packs.forEach((p) => {
      weight = weight + Number(p.weight);
    });
    const serviceContent = texts ? (
      <IconHaveService />
    ) : (
      <span style={{ color: '#A91116' }}>Không có dịch vụ được chọn</span>
    );
    const noteContent = item.note ? (
      item.note
    ) : (
      <span style={{ color: '#A91116' }}>Không có ghi chú nào được thêm</span>
    );
    return [i + 1, orderCodes[i] || '', item.trackingCode, `${weight}Kg`, serviceContent, noteContent];
  });

  // chọn kho nhận hàng
  useEffect(() => {
    if (shippingOrdersState && shippingOrdersState.route && shippingOrdersState.route.length > 0) {
      setActiveAddress(shippingOrdersState.route[0].address);
      setWarehouseName(shippingOrdersState.route[0].warehouseName);
    }
  }, [shippingOrdersState]);
  //------------------ Steppest: bước cuối xuất trạng thái tạo yêu cầu thành công, thất bại--------------------------
  const formatDate = (dateString: string) => {
    const date = new Date(dateString);
    const localOffset = date.getTimezoneOffset();
    const gmtOffset = -7 * 60; // GMT+7
    const timeZoneDiff = (gmtOffset - localOffset) * 60 * 1000;
    date.setTime(date.getTime() + timeZoneDiff);
    if (!moment(date).isValid()) {
      return '';
    }
    const daysOfWeek = ['Chủ Nhật', 'Thứ Hai', 'Thứ Ba', 'Thứ Tư', 'Thứ Năm', 'Thứ Sáu', 'Thứ Bảy'];
    const dayOfWeek = daysOfWeek[date.getDay()];
    const options: Intl.DateTimeFormatOptions = {
      year: 'numeric',
      month: '2-digit',
      day: '2-digit',
      hour: '2-digit',
      minute: '2-digit',
      hour12: false,
    };
    let formattedDate = new Intl.DateTimeFormat('en-GB', options).format(date);
    formattedDate = formattedDate.replace(',', '');
    const [day, month, year, time] = formattedDate.split(/\/| /);
    const finalFormattedDate = `${time} - ${dayOfWeek}, ngày ${day}/${month}/${year}`;
    return finalFormattedDate;
  };

  const handleCreateNew = () => {
    setTrackingData([]);
    handleReset();
    handleSelectPageChange(0);
  };

  return (
    <div className='Polaris-Custom'>
      <Page
        //@ts-ignore
        title={<TitleBreadcrumbs breadcrumbs={[{ title: 'Tạo yêu cầu vận chuyển', url: '' }]} />}
        primaryAction={
          selected === 1 ? (
            <div className='Icon_Import' onClick={() => handleSelectPageChange(0)}>
              <div>
                <IconBack />
              </div>
              <div className='Create_Order_Font'>Quay lại</div>
            </div>
          ) : null || selected === 2 ? (
            <div className='Icon_Import' onClick={() => handleSelectPageChange(1)}>
              <div>
                <IconBack />
              </div>
              <div className='Create_Order_Font'>Quay lại</div>
            </div>
          ) : null
        }
      >
        <Layout>
          <Layout.Section>
            <LegacyCard>
              <LegacyCard.Section>
                {selected === 0 && (
                  <div>
                    <div style={{ position: 'relative' }}>
                      {/* chọn kho hàng */}
                      <div className='Select_Warehouse'>
                        <div className='Header'>Chọn kho nhận hàng</div>

                        <div className='Region'>
                          {shippingOrdersState.all_route
                            .filter((route: any) => {
                              if (route.code === 'VN') {
                                return false;
                              }
                              return true;
                            })
                            .map((route: any, index: number) => {
                              const { label, icon } = getRouteInfo(route.code);
                              return (
                                <div
                                  key={index}
                                  style={{
                                    backgroundColor:
                                      activeCountry === route.code || hoveredCountry === route.code
                                        ? '#EFF1F4'
                                        : 'transparent',
                                  }}
                                  className='Style_Region'
                                  onMouseEnter={() => handleMouseEnterCountry(route.code)}
                                  onMouseLeave={handleMouseLeaveCountry}
                                  onClick={() => {
                                    handleClickCountry(route.code);
                                  }}
                                >
                                  {icon}
                                  {label}
                                </div>
                              );
                            })}
                        </div>

                        {/* Sổ địa chỉ kho */}
                        <div className='Address_Book'>
                          {shippingOrdersState.route_loading ? (
                            <div
                              style={{
                                display: 'flex',
                                alignItems: 'center',
                                justifyContent: 'center',
                              }}
                            >
                              <Spinner size='small' />
                            </div>
                          ) : (
                            <>
                              {shippingOrdersState.route.map((item, index) => (
                                <div
                                  key={index}
                                  style={{
                                    backgroundColor:
                                      activeAddress === item.address || hoveredAddress === item.address
                                        ? '#DFE3E9'
                                        : 'transparent',
                                  }}
                                  className='Style_Address_Book'
                                  onMouseEnter={() => handleMouseEnterAddress(item.address)}
                                  onMouseLeave={handleMouseLeaveAddress}
                                  onClick={() => handleClickAddress(item.address, item.warehouseName)}
                                >
                                  <div style={{ fontWeight: '700', fontSize: '16px', marginBottom: '8px' }}>
                                    {item.warehouseName}
                                  </div>
                                  <div style={{ display: 'flex', justifyContent: 'space-between', gap: '20px' }}>
                                    <div className='Address'>
                                      Address: <div>{item.address}</div>
                                    </div>
                                  </div>
                                  <div className='Post_Code' style={{ whiteSpace: 'nowrap' }}>
                                    PostCode: <div>{item.postalCode}</div>
                                  </div>
                                  <div className='Tel'>
                                    <div>Tel:</div>
                                    <div>{item.phoneNumber}</div>
                                  </div>
                                  <div
                                    style={{
                                      display: 'flex',
                                      gap: item.country === 'USA' ? '58px' : '25px',
                                    }}
                                  >
                                    {item.country === 'USA' ? 'State:' : 'Prefecture:'} <div>{item.provinceName}</div>
                                  </div>
                                  <div
                                    style={{
                                      display: 'flex',
                                      gap: item.country === 'USA' ? '65px' : '46px',
                                    }}
                                  >
                                    {item.country === 'USA' ? 'City:' : 'District:'} <div>{item.districtName}</div>
                                  </div>
                                  {item.country === 'USA' ? (
                                    ''
                                  ) : (
                                    <div style={{ display: 'flex', gap: '56px' }}>
                                      Ward: <div>{item.warehouseName}</div>
                                    </div>
                                  )}
                                  <div>{item.accountOther}</div>
                                  <div>{item.accountTransport}</div>
                                  {/* <div className='Button_Detail' onClick={() => toggleAddDetail(item)}>
                                    Chi tiết <IconArrowDetail />
                                  </div> */}
                                </div>
                              ))}

                              {/* {currentWarehouse && (
                                <Modal
                                  open={addDetail}
                                  onClose={() => setAddDetail(false)}
                                  title={`Thông tin kho hàng: ${currentWarehouse.warehouseName}`}
                                >
                                  <Modal.Section>
                                    <div style={{ display: 'flex', flexDirection: 'column', gap: '4px' }}>
                                      <div style={{ display: 'flex', gap: '40px' }}>
                                        Address: <div>{currentWarehouse.address}</div>
                                      </div>
                                      <div style={{ display: 'flex', gap: '30px' }}>
                                        PostCode: <div>{currentWarehouse.postalCode}</div>
                                      </div>
                                      <div style={{ display: 'flex', gap: '74px' }}>
                                        Tel: <div>{currentWarehouse.phoneNumber}</div>
                                      </div>
                                      <div
                                        style={{
                                          display: 'flex',
                                          gap: currentWarehouse.country === 'USA' ? '58px' : '25px',
                                        }}
                                      >
                                        {currentWarehouse.country === 'USA' ? 'State:' : 'Prefecture:'}{' '}
                                        <div>{currentWarehouse.provinceName}</div>
                                      </div>
                                      <div
                                        style={{
                                          display: 'flex',
                                          gap: currentWarehouse.country === 'USA' ? '65px' : '46px',
                                        }}
                                      >
                                        {currentWarehouse.country === 'USA' ? 'City:' : 'District:'}{' '}
                                        <div>{currentWarehouse.districtName}</div>
                                      </div>
                                      {currentWarehouse.country === 'USA' ? (
                                        ''
                                      ) : (
                                        <div style={{ display: 'flex', gap: '56px' }}>
                                          Ward: <div>{currentWarehouse.warehouseName}</div>
                                        </div>
                                      )}
                                      <div>{currentWarehouse.accountOther}</div>
                                      <div>{currentWarehouse.accountTransport}</div>
                                    </div>
                                  </Modal.Section>
                                </Modal>
                              )} */}
                            </>
                          )}
                        </div>
                      </div>
                      {/* Địa chỉ nhận hàng */}
                      <div className='Delivery_Address'>
                        <div className='Header'>
                          <div className='Font_Header'>Địa chỉ nhận hàng</div>
                          <div
                            style={{ color: '#0050A6', cursor: 'pointer' }}
                            onClick={() => {
                              toggleModalDeliveryAddress();
                            }}
                          >
                            Sổ địa chỉ <IconArrowDetail />
                          </div>
                        </div>
                        <Modal
                          open={activeDeliveyAddress}
                          large
                          onClose={() => {
                            toggleModalDeliveryAddress();
                          }}
                          title='Chọn địa chỉ nhận hàng'
                          primaryAction={{
                            content: 'Chọn địa chỉ nhận hàng',
                            onAction: handleSaveAddress,
                          }}
                          secondaryActions={[
                            {
                              content: 'Thêm địa chỉ',
                              onAction: handleAddAddress,
                            },
                          ]}
                        >
                          {/* Modal chọn sổ địa chỉ */}
                          <Modal.Section>
                            <div className='Style_Modal_Choose_Address'>
                              {shippingOrdersState.address.length > 0 ? (
                                shippingOrdersState.address.map((add: any, index: number) => (
                                  <div
                                    key={index}
                                    className='Item_Choose_Address'
                                    style={{
                                      backgroundColor: selectedAddress === add.id ? '#DFE3E9' : 'transparent',
                                      cursor: 'pointer',
                                    }}
                                    onClick={() => setSelectedAddress(add.id)}
                                  >
                                    <div style={{ display: 'flex', gap: '22px' }}>
                                      Người nhận: <div>{add.name}</div>
                                    </div>
                                    <div style={{ display: 'flex', gap: '52px' }}>
                                      <div style={{ whiteSpace: 'nowrap', display: 'flex' }}>Địa chỉ:</div>{' '}
                                      <div>{add.fullAddress}</div>
                                    </div>
                                    <div style={{ display: 'flex', gap: '12px' }}>
                                      Số điện thoại: <div>{add.phone}</div>
                                    </div>
                                  </div>
                                ))
                              ) : (
                                <p style={{ color: '#A91116', fontSize: '12px' }}>
                                  Không có địa chỉ nào được chọn. Nhấp vào "Thêm địa chỉ" để tạo địa chỉ nhận hàng.
                                </p>
                              )}
                            </div>
                          </Modal.Section>
                        </Modal>
                        <div className='Content_Delivery_Address'>
                          {selectedAddress ? (
                            (() => {
                              const selectedAdd = shippingOrdersState.address.find(
                                (add: any) => add.id === selectedAddress,
                              );
                              return selectedAdd ? (
                                <>
                                  <div style={{ display: 'flex', gap: '22px' }}>
                                    Người nhận: <div>{selectedAdd.name}</div>
                                  </div>
                                  <div style={{ display: 'flex', gap: '52px' }}>
                                    <div style={{ whiteSpace: 'nowrap', display: 'flex' }}>Địa chỉ:</div>{' '}
                                    <div>{selectedAdd.fullAddress}</div>
                                  </div>
                                  <div style={{ display: 'flex', gap: '12px' }}>
                                    Số điện thoại: <div>{selectedAdd.phone}</div>
                                  </div>
                                </>
                              ) : null;
                            })()
                          ) : (
                            <p style={{ color: '#A91116', fontSize: '12px' }}>
                              Chưa có địa chỉ được chọn. Nhấp vào "Sổ địa chỉ" để thêm mới.
                            </p>
                          )}
                        </div>
                      </div>
                    </div>
                    {/* Active */}
                    <div style={{ position: 'absolute', zIndex: '1' }}>
                      <div className='Style_Active_Form_Button'>
                        <div style={{ color: '#85C0FF', cursor: 'pointer' }} onClick={handleReset}>
                          Reset
                        </div>
                        <div style={{ display: 'flex', gap: '28px', alignItems: 'center' }}>
                          <div style={{ color: '#FFFFFF', cursor: 'pointer' }}>
                            <Link url='/don-hang-van-chuyen' removeUnderline monochrome>
                              Hủy
                            </Link>
                          </div>
                          <div className='Active_Button' onClick={() => {
                            if(shippingOrdersState.address.length !== 0){
                              handleSelectPageChange(1);
                            }else {
                              showToast('Bạn cần tạo địa chỉ nhận hàng', 'error')
                            }
                          }}>
                            <Button>Tiếp tục</Button>
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>
                )}
                {selected === 1 && (
                  <div>
                    <div className='Shipping_Information'>
                      <div className='Header'>
                        <div className='Font'>Thông tin hàng hoá vận chuyển</div>
                        <a
                          href='/files/TRANS_IMPORT_TEMPLATE.xlsx'
                          download
                          style={{ color: '#0050A6', cursor: 'pointer', whiteSpace: 'nowrap', textDecoration: 'none' }}
                        >
                          Tải file mẫu
                        </a>
                      </div>

                      <div className='Enter_Tracking_Code'>
                        <div className='Label_Tracking_Code'>
                          <div>Nhập mã tracking</div>
                          <div style={{ flexGrow: '1' }}>
                            <input
                              style={{ outline: 'none', borderRadius: '4px' }}
                              type='text'
                              className='Input_Tracking'
                              placeholder='Nhập mã tracking...'
                              value={trackingCodeInput}
                              onChange={(e) => setTrackingCodeInput(e.target.value)}
                              onKeyDown={handleKeyPress}
                            />
                          </div>
                        </div>
                        <div style={{ display: 'flex', alignItems: 'center', gap: '20px' }}>
                          <div className='Button_OK'>
                            <Button onClick={handleTrackingCodeSubmit}>OK</Button>
                          </div>
                          <div className='Button_Import'>
                            <IconImportExcel />
                            Import Excel
                          </div>
                        </div>
                      </div>

                      {trackingData.length > 0 && (
                        <div style={{ overflow: 'auto' }}>
                          <div className='Style_Data_Table_Create_Order'>
                            <div className='Style_Heading_Group'>
                              <div className='Style_Heading' style={{ width: '10%' }}>
                                STT
                              </div>
                              <div className='Style_Heading' style={{ width: '20%' }}>
                                Mã tracking
                              </div>
                              <div className='Style_Heading' style={{ width: '15%' }}>
                                Tổng trọng lượng
                              </div>
                              <div className='Style_Heading' style={{ width: '20%' }}>
                                Dịch vụ cộng thêm
                              </div>
                              <div className='Style_Heading' style={{ width: '25%' }}>
                                Ghi chú
                              </div>
                              <div className='Style_Heading' style={{ width: '10%' }}>
                                Action
                              </div>
                            </div>
                            {trackingData.map((item: any, tIndex: number) => {
                              // const packs = item.packages;
                              // let weightToShow = 0;
                              // console.log(packs);
                              // if (packs && packs.length > 0) {
                              //   packs.forEach((p: any) => (weightToShow = weightToShow + Number(p.weight)));
                              // }
                              // console.log(weightToShow);
                              return (
                                <React.Fragment key={item.trackingCode}>
                                  <div className='Style_Row'>
                                    <div className='Style_Cell' style={{ width: '10%' }}>
                                      {tIndex + 1}
                                    </div>
                                    <div className='Style_Cell' style={{ width: '20%' }}>
                                      <input className='Input_Tracking_Code' value={item.trackingCode} readOnly />
                                    </div>
                                    <div className='Style_Cell' style={{ width: '15%' }}>
                                      {/* <div
                                        className='Style_Total'
                                        style={{
                                          fontWeight: '700',
                                          backgroundColor: '#EFF1F4',
                                          padding: '12px 16px',
                                          display: 'inline-flex',
                                        }}
                                      >
                                        {weightToShow} kg
                                      </div> */}
                                      <input type="number" className='Input_Tracking_Code' defaultValue={item.weight} placeholder='Nhập tổng trọng lượng' 
                                      // onChange={(value) => setTotalWeight(value, item.trackingCode)}

                                      />
                                    </div>
                                    <div className='Style_Cell' style={{ width: '20%' }}>
                                      <div
                                        className='Style_Additional_Services'
                                        style={{
                                          border: '1px solid #D1D5DB',
                                          borderRadius: '4px',
                                          display: 'flex',
                                          gap: '20px',
                                          padding: '10px',
                                          justifyContent: 'space-between',
                                          alignItems: 'center',
                                          verticalAlign: 'center',
                                        }}
                                      >
                                        {item.services.length > 0 ? (
                                          <div style={{ display: 'flex', gap: '8px', flexWrap: 'wrap' }}>
                                            {services
                                              .filter((service: any) => item.services.includes(service.id))
                                              .map((service: any, sIndex: number) => (
                                                <div key={sIndex} className='Style_Service'>
                                                  {service.name}
                                                </div>
                                              ))}
                                          </div>
                                        ) : (
                                          <div
                                            style={{
                                              cursor: 'pointer',
                                            }}
                                            onClick={() => handleTogglePopover(item.trackingCode)}
                                          >
                                            Chọn dịch vụ
                                          </div>
                                        )}
                                        <div className='Style_Popover_Button'>
                                          <Popover
                                            active={activePopover === item.trackingCode}
                                            activator={
                                              <div className='Style_Button_Popover'>
                                                <div
                                                  onClick={() => handleTogglePopover(item.trackingCode)}
                                                  style={{ cursor: 'pointer' }}
                                                >
                                                  <IconArrowService />
                                                </div>
                                              </div>
                                            }
                                            onClose={() => setActivePopover(null)}
                                            preferredAlignment='right'
                                            preferredPosition='below'
                                          >
                                            <div className='Popover_Content'>
                                              <div style={{ display: 'flex', flexDirection: 'column', gap: '8px' }}>
                                                {services.map((service: any) => (
                                                  <Checkbox
                                                    key={service.id}
                                                    label={service.name}
                                                    checked={item.services.includes(service.id)}
                                                    onChange={() => handleCheckboxChange(service.id, item.trackingCode)}
                                                  />
                                                ))}
                                              </div>
                                            </div>
                                          </Popover>
                                        </div>
                                      </div>
                                    </div>
                                    {/* Ghi chú */}
                                    <div className='Style_Cell' style={{ width: '25%' }}>
                                      <input
                                        value={item.note}
                                        className='Input_Tracking_Code'
                                        placeholder='Nhập ghi chú...'
                                        onChange={(e) => setNoteForTracking(e.target.value, item.trackingCode)}
                                      ></input>
                                    </div>
                                    <div className='Style_Cell' style={{ width: '10%' }}>
                                      <div style={{ display: 'flex', gap: '16px', justifyContent: 'center' }}>
                                        <div
                                          className='Style_Icon_Edit_Delete'
                                          onClick={() => handleEdit(item.trackingCode)}
                                        >
                                          <IconEdit />
                                        </div>
                                        <div className='Style_Icon_Edit_Delete' onClick={() => handleDelete(tIndex)}>
                                          <IconDelete />
                                        </div>
                                      </div>
                                    </div>
                                  </div>

                                  {expandedItem === item.trackingCode && (
                                    <div
                                      style={{
                                        borderTop: '1px dashed #D1D5DB',
                                      }}
                                    >
                                      <div
                                        style={{
                                          margin: '16px 0',
                                          border: '1px dashed #D1D5DB',
                                          width: '100%',
                                        }}
                                      >
                                        <div
                                          style={{
                                            display: 'flex',
                                            padding: '16px 20px',
                                            justifyContent: 'space-between',
                                            backgroundColor: '#0B3558',
                                            color: '#FFFFFF',
                                          }}
                                        >
                                          <div style={{ display: 'flex', gap: '16px', fontWeight: 600 }}>
                                            Tracking No. <div>{item.trackingCode}</div>
                                          </div>
                                          <div style={{ fontWeight: 600 }}></div>
                                        </div>

                                        {item.packages.map((pkg: any, pIndex: number) => (
                                          <div key={pIndex} className='Package_Item'>
                                            {/* <div
                                              style={{
                                                display: 'flex',
                                                borderBottom: '1px dashed #D1D5DB',
                                                justifyContent: 'space-between',
                                                borderTop: '1px dashed #D1D5DB',
                                              }}
                                            >
                                              <div style={{ display: 'flex' }}>
                                                <div
                                                  style={{
                                                    borderRight: '1px dashed #D1D5DB',
                                                    padding: '10px',
                                                    borderLeft: 'unset',
                                                    display: 'flex',
                                                    alignItems: 'center',
                                                  }}
                                                >
                                                  <div
                                                    className='Icon_Arrow_Expand'
                                                    onClick={() => handleTogglePackageDetails(pIndex)}
                                                  >
                                                    {expandedItemPackage === pIndex ? (
                                                      <IconArrowUp />
                                                    ) : (
                                                      <IconArrowDown />
                                                    )}
                                                  </div>
                                                </div>
                                                <div
                                                  style={{
                                                    padding: '20px',
                                                    display: 'flex',
                                                    alignItems: 'center',
                                                    fontWeight: '700',
                                                  }}
                                                >
                                                  Package #{pIndex + 1}
                                                </div>
                                              </div>
                                              <div style={{ padding: '20px' }}>
                                                <Button
                                                  icon={PolarisIcons.DeleteMinor}
                                                  destructive
                                                  onClick={() => handleRemovePackage(item.trackingCode, pIndex)}
                                                >
                                                  Xóa kiện hàng
                                                </Button>
                                              </div>
                                            </div> */}

                                            {/* {expandedItemPackage === pIndex && ( */}
                                            <div>
                                              <table className='Table_Package_Detail'>
                                                <tbody>
                                                  <tr>
                                                    {/* <td  rowSpan={pkg.packageProducts.length-1}></td> */}
                                                    <td>#</td>
                                                    <td>Tên sản phẩm</td>
                                                    {/* <td>Loại sản phẩm</td> */}
                                                    <td style={{ width: '200px' }}>Số lượng</td>
                                                    {/* <td>Trọng lượng (kg)</td> */}
                                                    <td>Giá trị</td>
                                                    <td></td>
                                                  </tr>

                                                  {pkg.packageProducts.map((pp: any, ppIndex: number) => {
                                                    return (
                                                      <tr key={ppIndex}>
                                                        {/* <td></td> */}
                                                        <td>{ppIndex + 1}</td>
                                                        <td
                                                          style={{
                                                            display: 'flex',
                                                            alignItems: 'center',
                                                            justifyContent: 'center',
                                                            padding: '20px',
                                                          }}
                                                        >
                                                          {expandedItem === item.trackingCode &&
                                                          expandedItemPackage === pIndex &&
                                                          completedProducts.includes(ppIndex) ? (
                                                            <p>{pp.name}</p>
                                                          ) : (
                                                            <input
                                                              type='text'
                                                              value={pp.name}
                                                              placeholder='Nhập tên sản phẩm'
                                                              onChange={(e) => {
                                                                let tmp: any = [...trackingData];
                                                                tmp[tIndex]['packages'][pIndex]['packageProducts'][
                                                                  ppIndex
                                                                ].name = e.target.value;
                                                                setTrackingData(tmp);
                                                              }}
                                                              className='Style_Input_Product'
                                                            />
                                                          )}
                                                        </td>
                                                        {/* <td>
                                                            <div className='Style_AutoComplete_Products'>
                                                              {expandedItem === item.trackingCode &&
                                                              expandedItemPackage === pIndex &&
                                                              completedProducts.includes(ppIndex) ? (
                                                                <p>{pp.nameCustom}</p>
                                                              ) : (
                                                                <ProductTypeField
                                                                  selectedValue={pp.nameCustom}
                                                                  callback={(value: string) => {
                                                                    let tmp: any = [...trackingData];
                                                                    tmp[tIndex]['packages'][pIndex]['packageProducts'][
                                                                      ppIndex
                                                                    ].nameCustom = value;
                                                                    setTrackingData(tmp);
                                                                  }}
                                                                />
                                                              )}
                                                            </div>
                                                          </td> */}
                                                        <td>
                                                          {expandedItem === item.trackingCode &&
                                                          expandedItemPackage === pIndex &&
                                                          completedProducts.includes(ppIndex) ? (
                                                            <p>{`${pp.qty}`}</p>
                                                          ) : (
                                                            <input
                                                              value={pp.qty}
                                                              onChange={(e) => {
                                                                let tmp = [...trackingData];
                                                                tmp[tIndex]['packages'][pIndex]['packageProducts'][
                                                                  ppIndex
                                                                ]['qty'] = e.target.value;
                                                                setTrackingData(tmp);
                                                              }}
                                                              onBlur={(e) => {
                                                                let numVal = parseInt(e.target.value);
                                                                if (numVal < 1) {
                                                                  numVal = 1;
                                                                }
                                                                let tmp = [...trackingData];
                                                                tmp[tIndex]['packages'][pIndex]['packageProducts'][
                                                                  ppIndex
                                                                ]['qty'] = `${numVal}`;
                                                                setTrackingData(tmp);
                                                              }}
                                                              min={1}
                                                              type='number'
                                                              className='Style_Input_Product'
                                                            />
                                                          )}
                                                        </td>
                                                        {/* <td>
                                                            {expandedItem === item.trackingCode &&
                                                            expandedItemPackage === pIndex &&
                                                            completedProducts.includes(ppIndex) ? (
                                                              <p>{`${pp.weight}`}</p>
                                                            ) : (
                                                              <input
                                                                placeholder=''
                                                                type='number'
                                                                value={pp.weight}
                                                                onChange={(e) => {
                                                                  let tmp = [...trackingData];
                                                                  tmp[tIndex]['packages'][pIndex]['packageProducts'][
                                                                    ppIndex
                                                                  ]['weight'] = e.target.value;
                                                                  setTrackingData(tmp);
                                                                }}
                                                                onBlur={(e) => {
                                                                  let numVal = Number(e.target.value);
                                                                  if (numVal <= 0) {
                                                                    numVal = 0;
                                                                  }
                                                                  let tmp = [...trackingData];
                                                                  tmp[tIndex]['packages'][pIndex]['packageProducts'][
                                                                    ppIndex
                                                                  ]['weight'] = `${numVal}`;
                                                                  let totalPackWeight = 0;
                                                                  tmp[tIndex]['packages'][pIndex][
                                                                    'packageProducts'
                                                                  ].forEach(
                                                                    (packageProduct: any) =>
                                                                      (totalPackWeight =
                                                                        totalPackWeight +
                                                                        Number(packageProduct.weight)),
                                                                  );
                                                                  tmp[tIndex]['packages'][pIndex]['weight'] =
                                                                    totalPackWeight;
                                                                  setTrackingData(tmp);
                                                                }}
                                                                min={0}
                                                                className='Style_Input_Product'
                                                              />
                                                            )}
                                                          </td> */}
                                                        <td>
                                                          <div
                                                            style={{
                                                              display: 'flex',
                                                              alignItems: 'center',
                                                              justifyContent: 'center',
                                                            }}
                                                          >
                                                            {expandedItem === item.trackingCode &&
                                                            expandedItemPackage === pIndex &&
                                                            completedProducts.includes(ppIndex) ? (
                                                              <p>
                                                                {pp.price}{' '}
                                                                {getCurrencySymbol(exchangeRate().currencyCode)}
                                                              </p>
                                                            ) : (
                                                              <div style={{ display: 'flex' }}>
                                                                <input
                                                                  type='number'
                                                                  value={pp.price}
                                                                  min={0}
                                                                  onChange={(e) => {
                                                                    let tmp = [...trackingData];
                                                                    tmp[tIndex]['packages'][pIndex]['packageProducts'][
                                                                      ppIndex
                                                                    ]['price'] = e.target.value;
                                                                    setTrackingData(tmp);
                                                                  }}
                                                                  onBlur={(e) => {
                                                                    let numVal = Number(e.target.value);
                                                                    if (numVal <= 0) {
                                                                      numVal = 0;
                                                                    }
                                                                    let tmp = [...trackingData];
                                                                    tmp[tIndex]['packages'][pIndex]['packageProducts'][
                                                                      ppIndex
                                                                    ]['price'] = `${numVal}`;
                                                                    setTrackingData(tmp);
                                                                  }}
                                                                  className='Style_Input_Product'
                                                                  style={{
                                                                    width: '80px',
                                                                    borderRadius: '4px 0 0 4px',
                                                                  }}
                                                                />
                                                                <div
                                                                  style={{
                                                                    padding: '8px 12px',
                                                                    border: '1px solid #D1D5DB',
                                                                    borderLeft: 'unset',
                                                                    borderRadius: '0 4px 4px 0',
                                                                    display: 'flex',
                                                                    justifyContent: 'center',
                                                                    alignItems: 'center',
                                                                  }}
                                                                >
                                                                  {getCurrencySymbol(exchangeRate().currencyCode)}
                                                                </div>
                                                              </div>
                                                            )}
                                                          </div>
                                                        </td>
                                                        <td>
                                                          <div
                                                            style={{
                                                              display: 'flex',
                                                              gap: '4px',
                                                              alignItems: 'center',
                                                              justifyContent: 'center',
                                                            }}
                                                          >
                                                            <div
                                                              className='Style_Icon_Edit_Delete'
                                                              onClick={() => {
                                                                handleSaveProduct(item.trackingCode, pIndex, ppIndex);
                                                              }}
                                                            >
                                                              {completedProducts.includes(ppIndex) ? (
                                                                <Icon
                                                                  source={PolarisIcons.EditMajor}
                                                                  color={'highlight'}
                                                                />
                                                              ) : (
                                                                <Icon
                                                                  source={PolarisIcons.CircleTickMajor}
                                                                  color={'success'}
                                                                />
                                                              )}
                                                            </div>
                                                            <div
                                                              className='Style_Icon_Edit_Delete'
                                                              onClick={() =>
                                                                handleDeleteProduct(ppIndex, pIndex, item.trackingCode)
                                                              }
                                                            >
                                                              <Icon
                                                                source={PolarisIcons.DeleteMinor}
                                                                color={'critical'}
                                                              />
                                                            </div>
                                                          </div>
                                                        </td>
                                                      </tr>
                                                    );
                                                  })}
                                                </tbody>
                                              </table>
                                              <div
                                                onClick={() => {
                                                  handleAddProduct(pIndex, item.trackingCode);
                                                }}
                                                style={{
                                                  display: 'flex',
                                                  justifyContent: 'center',
                                                  alignItems: 'center',
                                                  margin: '0 auto',
                                                  padding: '8px 0 20px 0',
                                                  width: 'fit-content',
                                                  textAlign: 'center',
                                                  cursor: 'pointer',
                                                  borderRadius: '8px',
                                                }}
                                              >
                                                <Button icon={PolarisIcons.AddProductMajor}>Thêm sản phẩm</Button>
                                              </div>
                                            </div>
                                            {/* )} */}
                                          </div>
                                        ))}
                                        {/* <div
                                          style={{
                                            display: 'flex',
                                            justifyContent: 'flex-end',
                                            alignItems: 'center',
                                            padding: '8px',
                                            borderTop: '1px dashed #D1D5DB',
                                          }}
                                        >
                                          <div
                                            style={{
                                              margin: '0 auto',
                                            }}
                                          >
                                            <Button
                                              icon={PolarisIcons.SandboxMajor}
                                              primary
                                              onClick={() => handleAddPackage(item.trackingCode)}
                                            >
                                              Thêm kiện hàng
                                            </Button>
                                          </div>
                                        </div> */}
                                      </div>
                                    </div>
                                  )}
                                </React.Fragment>
                              );
                            })}
                          </div>
                        </div>
                      )}
                    </div>

                    <div style={{ position: 'absolute' }}>
                      <div className='Create_Input_Tracking_Code'>
                        <div style={{ color: '#85C0FF', whiteSpace: 'nowrap' }}>{trackingData.length} Tracking</div>
                        <div style={{ display: 'flex', gap: '20px', alignItems: 'center' }}>
                          <div style={{ color: '#FFFFFF', cursor: 'pointer' }}>
                            <Link url='/don-hang-van-chuyen' removeUnderline monochrome>
                              Hủy
                            </Link>
                          </div>
                          <div
                            className='Active_Button'
                            // onClick={() => {
                            //   let packs: Array<any> = [];
                            //   let products: Array<any> = [];
                            //   trackingData.forEach((t) => {
                            //     const packages = t.packages;
                            //     if (packages.length > 0) {
                            //       packs = packs.concat(packages);
                            //     }
                            //   });
                            //   if (packs.length > 0) {
                            //     packs.forEach((p) => {
                            //       const productsFind = p.packageProducts;
                            //       if (productsFind.length > 0) {
                            //         products = products.concat(productsFind);
                            //       }
                            //     });
                            //     if (products.length > 0) {
                            //       let isDone = true;
                            //       products.forEach((product) => {
                            //         if (
                            //           product.name.trim() === '' ||
                            //           product.nameCustom.trim() === '' ||
                            //           product.qty <= 0 ||
                            //           product.weight <= 0 ||
                            //           product.price <= 0
                            //         ) {
                            //           isDone = false;
                            //         }
                            //       });
                            //       if (isDone) {
                            //         handleSelectPageChange(2);
                            //       } else {
                            //         showToast('Hãy nhập đủ thông tin tất cả sản phẩm', 'warning');
                            //       }
                            //     } else {
                            //       showToast('Không có sản phẩm nào được chọn', 'warning');
                            //     }
                            //   } else {
                            //     showToast('Không có kiện hàng nào', 'warning');
                            //   }
                            // }}
                            onClick={() => {
                              if (trackingData && trackingData.length > 0) {
                                handleSelectPageChange(2);
                              } else {
                                showToast('Hãy nhập mã tracking', 'info');
                              }
                            }}
                          >
                            <Button>Tiếp tục</Button>
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>
                )}

                {selected === 2 && (
                  <div>
                    <FormLayout>
                      <FormLayout.Group>
                        <table className='Info_Table_Shipping_Orders'>
                          <thead>
                            <tr>
                              <th colSpan={2}>Thông tin vận chuyển</th>
                            </tr>
                          </thead>
                          <tbody>
                            <tr>
                              <td style={{ width: '30%' }}>Tuyến vận chuyển</td>
                              <td style={{ width: '70%' }}>{changeRouteName(activeCountry)}</td>
                            </tr>
                            <tr>
                              <td>Kho nhận hàng</td>
                              <td>{warehouseName}</td>
                            </tr>
                          </tbody>
                        </table>

                        <table className='Info_Table_Shipping_Orders'>
                          <thead>
                            <tr>
                              <th colSpan={2}>Thông tin giao hàng</th>
                            </tr>
                          </thead>
                          <tbody>
                            {selectedAddress &&
                              (() => {
                                const selectedAdd = shippingOrdersState.address.find(
                                  (add: any) => add.id === selectedAddress,
                                );
                                return selectedAdd ? (
                                  <>
                                    <tr>
                                      <td style={{ width: '30%' }}>Người nhận</td>
                                      <td style={{ width: '70%' }}>
                                        {selectedAdd.name} - {selectedAdd.phone}
                                      </td>
                                    </tr>
                                    <tr>
                                      <td>Địa chỉ</td>
                                      <td>{selectedAdd.fullAddress}</td>
                                    </tr>
                                  </>
                                ) : null;
                              })()}
                          </tbody>
                        </table>
                      </FormLayout.Group>
                    </FormLayout>
                    {/* danh sách tracking */}
                    <div className='Data_Table_Verify_Request'>
                      <DataTable
                        columnContentTypes={['text', 'text', 'text', 'text', 'text']}
                        headings={['Danh sách tracking', '', '', '', '']}
                        rows={rows2}
                      />
                    </div>
                    <div>
                      {/* <div className='Style_Payment_Method'>
                        <div
                          className='Style_Item_Payment'
                          style={paymentMethod == 'COD' ? { backgroundColor: '#A91116' } : {}}
                          onClick={() => setPaymentMethod('COD')}
                        >
                          COD - Thanh toán khi nhận hàng
                        </div>
                        <div
                          className='Style_Item_Payment'
                          style={paymentMethod == 'WALLET' ? { backgroundColor: '#A91116' } : {}}
                          onClick={() => setPaymentMethod('WALLET')}
                        >
                          Thanh toán bằng ví
                        </div>
                        <div
                          className='Style_Item_Payment'
                          style={paymentMethod == 'BANK' ? { backgroundColor: '#A91116' } : {}}
                          onClick={() => setPaymentMethod('BANK')}
                        >
                          Chuyển khoản ngân hàng
                        </div>
                      </div> */}
                    </div>
                    {/* Active */}
                    <div style={{ position: 'absolute' }}>
                      <div className='Verify_Request'>
                        <div style={{ color: '#85C0FF' }}> {trackingData.length} Tracking</div>
                        <div style={{ display: 'flex', gap: '28px', alignItems: 'center' }}>
                          <div style={{ color: '#FFFFFF', cursor: 'pointer' }}>
                            <Link url='/don-hang-van-chuyen' removeUnderline monochrome>
                              Hủy
                            </Link>
                          </div>
                          <div
                            className='Active_Button'
                            onClick={() => {
                              handleRequest();
                            }}
                          >
                            <Button>Gửi yêu cầu</Button>
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>
                )}
                {selected === 3 && (
                  <div className='Verify_Reuquest_Successed'>
                    {/* trạng thái thành công */}
                    <div className='Icon_Successed'>
                      <div>
                        <IconSuccessed />
                      </div>
                      <div className='Title_Verify_Request'>
                        <div className='Font_Title'>Quý khách đã tạo yêu cầu thành công</div>
                        {orderDate && <div>({formatDate(orderDate)})</div>}
                      </div>
                    </div>

                    {/* Danh sách tracking */}
                    <div style={{ position: 'relative', marginTop: '68px' }}>
                      <div
                        style={{
                          padding: '16px 20px',
                          backgroundColor: '#D1D5DB',
                          fontWeight: '700',
                          fontSize: '14px',
                          lineHeight: '17.8px',
                        }}
                      >
                        Đơn hàng đã tạo
                      </div>
                      <div className='Data_Table_Verify_Request_Succeed'>
                        <DataTable
                          columnContentTypes={['text', 'text', 'text', 'text', 'text', 'text']}
                          headings={['#', 'Mã đơn', 'Tracking', 'Trọng lượng', 'Dịch vụ cộng thêm', 'Ghi chú']}
                          rows={rows3}
                        />
                      </div>

                      {/* <div className='Icon_Print_Information'>
            <IconPrintSuccessed /> In Thông tin
          </div> */}
                    </div>

                    {/* Quản lý & tạo yêu cầu */}
                    <div
                      style={{
                        display: 'flex',
                        justifyContent: 'center',
                        alignItems: 'center',
                        gap: '20px',
                        marginTop: '48px',
                        flexWrap: 'wrap',
                      }}
                    >
                      <div className='Button_Order_Management'>
                        <Button url='/don-hang-van-chuyen' monochrome removeUnderline>
                          Quản lý đơn hàng
                        </Button>
                      </div>
                      <div className='Button_Create_Request'>
                        <Button onClick={() => handleCreateNew()}>Tạo yêu cầu đơn mới</Button>
                      </div>
                    </div>
                  </div>
                )}
              </LegacyCard.Section>
            </LegacyCard>
          </Layout.Section>
        </Layout>
      </Page>
    </div>
  );
};

export default CreateShippingOrders;

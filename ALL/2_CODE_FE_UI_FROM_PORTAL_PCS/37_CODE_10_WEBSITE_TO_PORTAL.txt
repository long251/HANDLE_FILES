import { Button, DataTable, Icon, Layout, LegacyCard, Page, TabProps, Tabs, TextField } from 'pcs-polaris';
import React, { useCallback, useEffect, useState } from 'react';
import { debounce } from 'lodash';
import { useLocation, useNavigate } from 'react-router-dom';
import { IconMagnifyingGlass } from './Icon';
import TitleBreadcrumbs from '../../components/Breadcrumb/TitleBreadcrumb.tsx';
import { useDispatch, useSelector } from 'react-redux';
import { AppState } from '../../store/index.ts';
import { websiteAction } from '../../store/reducers/websiteReducer/index.ts';

const Website = () => {
  //----------Connect API-------------------------
  const dispatch = useDispatch();
  const websiteState = useSelector((state: AppState)=> state.website);

  const [searchValue, setSearchValue] = useState<string>('');
  const [currentPage, setCurrentPage] = useState<number>(1);

  const debounceFetchData = useCallback(
    debounce((data:any) => dispatch(websiteAction.fetchData(data)), 400),
    [dispatch]
  );

  useEffect(() => {
    setCurrentPage(1);
    debounceFetchData({
      keyword: searchValue,
      route: null,
      sorts: [
        {
          sortBy: "Id",
          sortDirection: "DESC"
        }
      ],
      pageIndex: currentPage,
      pageSize: totalItems
    });
  }, [searchValue, debounceFetchData]);

  const rows = websiteState.data.map((item) => {
    return [item.orderType, item.domain, item.routes];
  });
  //----------Pagination----------
  const itemsPerPage = 10;
  const totalItems = websiteState.data_length;
  const total = Math.ceil(totalItems / itemsPerPage);
  const startIndex = (currentPage - 1) * itemsPerPage;
  const endIndex = Math.min(startIndex + itemsPerPage, totalItems);
  const paginatedRows = rows.slice(startIndex, endIndex);
  //----------Tabs----------
  const [itemStrings] = useState([
    { label: 'Tất cả', value: 'TAT_CA' },
    {
      label: 'Mỹ',
      value: 'MY',
    },
    { label: 'Đức', value: 'DUC' },
    {
      label: 'Anh',
      value: 'ANH',
    },
    { label: 'Nhật', value: 'NHAT' },
    { label: 'Hàn', value: 'HAN' },
  ]);
  const itemIndex = ['TAT_CA', 'MY', 'DUC', 'ANH', 'NHAT', 'HAN'];
  const [activeTab, setActiveTab] = useState('TAT_CA');
  const [activeTabIndex, setActiveTabIndex] = useState(0);
  const getTabCount = (type: string) => {
    let badge = 0;
    // let badge = '';
    switch (type) {
      case 'TAT_CA':
        badge = websiteState.data_length;
        // badge = `${fakeDataShoppingWebsite.length}`;
        break;
      case 'MY':
      case 'DUC':
      case 'ANH':
      case 'NHAT':
      case 'HAN':
        badge = websiteState.data.filter((item) => item.originValue === type).length;
        break;
      default:
        break;
    }
    return badge.toString();
  };
  const navigate = useNavigate();
  const location = useLocation();
  const searchParams = new URLSearchParams(location.search);
  const tabs: TabProps[] = itemStrings.map((item, index) => ({
    content: item.label,
    badge: getTabCount(item.value),
    index,
    onAction: () => {
      setActiveTab(item.value);
      setActiveTabIndex(index);
    },
    id: `${item.value}-${index}`,
  }));
  useEffect(() => {
    let typeParam: string = searchParams.get('type') ?? 'TAT_CA';
    setActiveTab(typeParam);
    setActiveTabIndex(itemIndex.indexOf(typeParam));
  }, []);

  const updateUrl = (key: string, value: string) => {
    searchParams.set(key, value);
    navigate({ search: searchParams.toString() });
  };
  //----------Tab Mobile----------
  const getTabCountMobile = (type: string) => {
    switch (type) {
      case 'TAT_CA':
        return websiteState.data_length.toString();
      default:
        return websiteState.data.filter((item) => item.originValue === type).length.toString();
    }
  };
  useEffect(() => {
    const typeParam = new URLSearchParams(window.location.search).get('type') || 'TAT_CA';
    setActiveTab(typeParam);
  }, []);

  const [tabMobile, setTabMobile] = useState(window.innerWidth <= 930);
  useEffect(() => {
    const handleResize = () => {
      setTabMobile(window.innerWidth <= 930);
    };
    handleResize(); // Call once to set initial value
    window.addEventListener('resize', handleResize);
    return () => {
      window.removeEventListener('resize', handleResize);
    };
  }, []);

  const handleTabClick = (type: string) => {
    setActiveTab(type);
    const searchParams = new URLSearchParams(window.location.search);
    searchParams.set('type', type);
    window.history.replaceState(null, '', `?${searchParams.toString()}`);
  };
  const renderTabs = () => {
    const tabs = [
      { label: 'Tất cả', value: 'TAT_CA' },
      { label: 'Mỹ', value: 'MY' },
      { label: 'Đức', value: 'DUC' },
      { label: 'Anh', value: 'ANH' },
      { label: 'Nhật', value: 'NHAT' },
      { label: 'Hàn', value: 'HAN' },
    ];

    return tabs.map((tab, index) => (
      <div
        key={`${tab.value}-${index}`}
        onClick={() => handleTabClick(tab.value)}
        style={{
          padding: '8px',
          backgroundColor: activeTab === tab.value ? '#EFF1F4' : 'white',
          cursor: 'pointer',
        }}
      >
        {tab.label} <span>({getTabCount(tab.value)})</span>
      </div>
    ));
  };

  //----------Tab Mobile Search---------
  const [isMobileSearch, setIsMobileSearch] = useState(window.innerWidth <= 1300);
  useEffect(() => {
    const handleResizeSearch = () => {
      setIsMobileSearch(window.innerWidth <= 1300);
    };
    window.addEventListener('resize', handleResizeSearch);
    return () => {
      window.removeEventListener('resize', handleResizeSearch);
    };
  }, []);
  return (
    <div className='Polaris-Custom'>
      <Page
        //@ts-ignore
        title={
          <TitleBreadcrumbs
            breadcrumbs={[
              {
                title: 'Website mua hàng',
                url: '',
              },
            ]}
          />
        }
      >
        <Layout>
          <Layout.Section>
            <LegacyCard>
              <div className='Website_Container'>
                {/* <LegacyCard.Section> */}
                <div className='Tabs_Custom'>
                  {tabMobile ? (
                    <div style={{ display: 'flex', flexWrap: 'wrap', marginLeft: '20px' }}>{renderTabs()}</div>
                  ) : (
                    <Tabs
                      tabs={tabs}
                      selected={activeTabIndex}
                      onSelect={(selectedTabIndex) => {
                        setActiveTabIndex(selectedTabIndex);
                        setActiveTab(itemIndex[selectedTabIndex]);
                        updateUrl('type', itemIndex[selectedTabIndex]);
                      }}
                    />
                  )}
                  {activeTab === 'TAT_CA' || 'MY' || 'DUC' || 'ANH' || 'NHAT' || 'HAN' ? (
                    isMobileSearch ? (
                      <div className='Website_TextField_Mobile'>
                        <TextField
                          label=''
                          value={searchValue}
                          onChange={(value)=> setSearchValue(value)}
                          placeholder='Nhập nội dung tìm kiếm'
                          autoComplete='off'
                          prefix={<Icon source={IconMagnifyingGlass} />}
                        />
                      </div>
                    ) : (
                      <div className='Website_TextField'>
                        <TextField
                          label=''
                          value={searchValue}
                          onChange={(value)=> setSearchValue(value)}
                          placeholder='Nhập nội dung tìm kiếm'
                          autoComplete='off'
                          prefix={<Icon source={IconMagnifyingGlass} />}
                        />
                      </div>
                    )
                  ) : (
                    ''
                  )}
                </div>
                {activeTab === 'TAT_CA' || 'MY' || 'DUC' || 'ANH' || 'NHAT' || 'HAN' ? (
                  <div>
                    <div className='Website_DataTable'>
                      <DataTable
                        columnContentTypes={['text', 'text', 'text']}
                        headings={['Nhãn hiệu', 'Địa chỉ website', 'Quốc gia']}
                        rows={paginatedRows}
                      />
                    </div>
                    {/* phân trang */}
                    <div className='Website_Pagination'>
                      {/* nút trờ về trước */}
                      <div className='div1'>
                        <div className='Button-Custom--PaginationPrevNext'>
                          <Button disabled={currentPage === 1} onClick={() => setCurrentPage(currentPage - 1)}>
                            Prev
                          </Button>
                        </div>
                      </div>
                      {/* từ CP = 3 mới hiện nút trang 1 - div2, set mặc định luôn hiển thị trang 1 */}
                      {currentPage > 2 ? (
                        <div className={`div2`}>
                          <div className='Button-Custom--PaginationCurrent'>
                            <Button onClick={() => setCurrentPage(1)}>1</Button>
                          </div>
                        </div>
                      ) : null}
                      {/* CP=2,3,4,... hiển thị div3 với cp-1 */}
                      {currentPage > 1 ? (
                        <div className={`div3`}>
                          <div className='Button-Custom--PaginationCurrent'>
                            <Button onClick={() => setCurrentPage(currentPage - 1)}>{`${currentPage - 1}`}</Button>
                          </div>
                        </div>
                      ) : null}
                      {/* CP=page hiển thị trang hiện tại */}
                      <div className={`div4`}>
                        <div className='Button-Custom--PaginationCurrentPage'>
                          <Button>{`${currentPage}`}</Button>
                        </div>
                      </div>
                      {/* hiển thị các trang nhỏ hơn tổng -1 vì số cuối của tổng sẽ là disabled */}
                      {currentPage < total - 1 ? (
                        <div className='div5'>
                          <div className='Button-Custom--PaginationCurrent'>
                            <Button onClick={() => setCurrentPage(currentPage + 1)}>{`${currentPage + 1}`}</Button>
                          </div>
                        </div>
                      ) : null}

                      {currentPage < total - 2 ? (
                        <div className='div6' style={{ padding: '10px 10px' }}>
                          ...
                        </div>
                      ) : null}

                      {currentPage < total ? (
                        <div className='div7'>
                          <div className='Button-Custom--PaginationCurrent'>
                            <Button onClick={() => setCurrentPage(total)}>{`${total}`}</Button>
                          </div>
                        </div>
                      ) : null}

                      <div className={`div8`}>
                        <div className='Button-Custom--PaginationPrevNext'>
                          <Button onClick={() => setCurrentPage(currentPage + 1)} disabled={currentPage === total}>
                            Next
                          </Button>
                        </div>
                      </div>
                    </div>
                  </div>
                ) : (
                  ''
                )}
              </div>
            </LegacyCard>
          </Layout.Section>
        </Layout>
      </Page>
    </div>
  );
};

export default Website;

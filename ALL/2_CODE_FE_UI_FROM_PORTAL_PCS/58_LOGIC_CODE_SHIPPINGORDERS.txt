const dispatch = useDispatch();
  const shippingOrdersState = useSelector((state: AppState) => state.shippingOrders);
  // Pagination
  const [currentPage, setCurrentPage] = useState(1);
  // Search
  const [orderCode, setOrderCode] = useState('');
  const [trackingCode, setTrackingCode] = useState('');
  // Search Picked Date Range
  const [dateRangeActive, setDateRangeActive] = useState(false);
  const [{ month, year }, setDate] = useState({ month: new Date().getMonth(), year: new Date().getFullYear() });
  const [selectedDates, setSelectedDates] = useState({
    start: moment().subtract(30, 'days').toDate(),
    end: moment().toDate(),
  });
  const handleMonthChange = useCallback((month: number, year: number) => setDate({ month, year }), []);
  const [dateInputValue, setDateInputValue] = useState(
    `${moment(selectedDates.start).format('DD/MM/yyyy')} - ${moment(selectedDates.end).format('DD/MM/yyyy')}`,
  );
  const [rangeSelected, setRangeSelected] = useState<string[]>([]);
  const takeDate = (type: 'start' | 'end') => {
    let splitDate = dateInputValue.split(' - ');
    return type == 'start' ? splitDate[0] : splitDate[1];
  };
  // activeTab
  const [activeTab, setActiveTab] = useState('KHO_QT_CHUA_NHAN');
const debounceFetchDataFun = useCallback(
    debounce((data: any) => dispatch(shippingOrdersAction.fetchData(data)), 400),
    [],
  );
  const debounceFetchDataTotalFun = useCallback(
    debounce((data: any) => dispatch(shippingOrdersAction.fetchDataTotal(data)), 400),
    [],
  );
  // goToPage
  const goToPage = (pageNumber: number) => {
    setCurrentPage(pageNumber);
    console.log("goi page")
    updateUrl('page', `${pageNumber}`)
  };
  useEffect(() => {
    console.log("goi dependences")
    debounceFetchDataFun({
      keyWord: '',
      orderCode: orderCode,
      tracking: trackingCode,
      trackingCode: '',
      orderType: 'TRANSPORT',
      status: formatActive(activeTab),
      fromDate: moment(takeDate('start'), 'DD/MM/yyyy').toDate(),
      toDate: moment(takeDate('end'), 'DD/MM/yyyy').add(1, 'd').toDate(),
      sorts: [{ sortBy: 'OrderDate', sortDirection: 'DESC' }],
      pageIndex: currentPage,
      pageSize: pageSize,
    });
  }, [currentPage, orderCode, trackingCode, activeTab, dateInputValue]);
  useEffect(() => {
    debounceFetchDataTotalFun({
      trackingCode: trackingCode,
      orderCode: orderCode,
      fromDate: moment(takeDate('start'), 'DD/MM/yyyy').toDate(),
      toDate: moment(takeDate('end'), 'DD/MM/yyyy').add(1, 'd').toDate(),
    });
  }, [orderCode, trackingCode, dateInputValue]);
  //
  // Tab
  const [itemStrings] = useState([
    { label: 'Kho QT chưa nhận', value: 'KHO_QT_CHUA_NHAN' },
    {
      label: 'Kho QT đã nhận',
      value: 'KHO_QT_DA_NHAN',
    },
    { label: 'Đang vận chuyển về VN', value: 'DANG_VAN_CHUYEN_VE_VN' },
    {
      label: 'Đã về VN',
      value: 'DA_VE_VN',
    },
    { label: 'Đã giao', value: 'DA_GIAO' },
  ]);
  const itemIndex = ['KHO_QT_CHUA_NHAN', 'KHO_QT_DA_NHAN', 'DANG_VAN_CHUYEN_VE_VN', 'DA_VE_VN', 'DA_GIAO'];
  const [activeTabIndex, setActiveTabIndex] = useState(0);
  const getTabCount = (type: string) => {
    let badge = 0;
    switch (type) {
      case 'KHO_QT_CHUA_NHAN':
        badge = shippingOrdersState.notRecWH_QT;
        break;
      case 'KHO_QT_DA_NHAN':
        badge = shippingOrdersState.recWHQT;
        break;
      case 'DANG_VAN_CHUYEN_VE_VN':
        badge = shippingOrdersState.transportToVN;
        break;
      case 'DA_VE_VN':
        badge = shippingOrdersState.recWHVN;
        break;
      case 'DA_GIAO':
        badge = shippingOrdersState.delivery;
        break;
      default:
        break;
    }
    return badge.toString();
  };
  const navigate = useNavigate();
  const location = useLocation();
  const searchParams = new URLSearchParams(location.search);
  const tabs: TabProps[] = itemStrings.map((item, index) => ({
    content: item.label,
    badge: getTabCount(item.value),
    index,
    onAction: () => {
      setActiveTab(item.value);
      setActiveTabIndex(index);
      updateUrl('type', item.value);
      updateUrl('page', '1');
    },
    id: `${item.value}-${index}`,
  }));
  useEffect(() => {
    const searchParams = new URLSearchParams(window.location.search);
    let typeParam = searchParams.get('type') ?? 'KHO_QT_CHUA_NHAN';
    setActiveTab(typeParam);
    setActiveTabIndex(itemIndex.indexOf(typeParam));
  
    const pageParam = searchParams.get('page');
    if (pageParam) {
        setCurrentPage(Number(pageParam));
    } else {
        setCurrentPage(1);
    }
    
    let dateTime = searchParams.get('dateTime') ?? '';
    if (dateTime) {
      const [start, end] = dateTime.split(' - ').map((date) => moment(date, 'DD/MM/yyyy').toDate());
      setSelectedDates({ start, end });
      setDateInputValue(dateTime);
    } else {
      const start = moment().subtract(30, 'days').toDate();
      const end = moment().toDate();
      setSelectedDates({ start, end });
      setDateInputValue(`${moment(start).format('DD/MM/yyyy')} - ${moment(end).format('DD/MM/yyyy')}`);
    }
    debounceFetchDataFun({
      keyWord: '',
      orderCode: orderCode,
      tracking: trackingCode,
      trackingCode: '',
      orderType: 'TRANSPORT',
      status: formatActive(typeParam),
      fromDate: moment(takeDate('start'), 'DD/MM/yyyy').toDate(),
      toDate: moment(takeDate('end'), 'DD/MM/yyyy').add(1, 'd').toDate(),
      sorts: [{ sortBy: 'OrderDate', sortDirection: 'DESC' }],
      pageIndex: Number(pageParam),
      pageSize: pageSize,
    });
  }, []);
  
  const updateUrl = (key: string, value: string) => {
    searchParams.set(key, value);
    navigate({ search: searchParams.toString() });
  };
  const resourceIDResolver = (item: any) => {
    return item.orderCode;
  };
  const { selectedResources, allResourcesSelected, handleSelectionChange, clearSelection } = useIndexResourceState(
    shippingOrdersState.data,
    { resourceIDResolver },
  );
 const [openActionId, setOpenActionId] = useState<number | null>(null);
  const [openModalCancelId, setOpenModalCancelId] = useState<number | null>(null);
  const handleCancel = (orderCode: string) => {
    setOpenModalCancelId(null);
    setCurrentPage(1);
    let payload = {
      orderCode: orderCode,
      dataNew: {
        keyWord: '',
        orderCode: '',
        tracking: '',
        trackingCode: '',
        orderType: 'TRANSPORT',
        status: [0],
        fromDate: moment(takeDate('start'), 'DD/MM/yyyy').toDate(),
        toDate: moment(takeDate('end'), 'DD/MM/yyyy').add(1, 'd').toDate(),
        sorts: [{ sortBy: 'OrderDate', sortDirection: 'DESC' }],
        pageIndex: 1,
        pageSize: pageSize,
      },
      dataTotalNew: {
        trackingCode: '',
        orderCode: '',
        fromDate: moment(takeDate('start'), 'DD/MM/yyyy').toDate(),
        toDate: moment(takeDate('end'), 'DD/MM/yyyy').add(1, 'd').toDate(),
      },
    };
    dispatch(shippingOrdersAction.deleteData(payload));
  };
const handleView = (item: any) => {
  updateUrl('page', `${currentPage}`);
  updateUrl('type', activeTab);
  navigate(`/don-hang-van-chuyen/${item.orderCode}`);
};
  const rowMarkup = shippingOrdersState.data.map((item, index) => {
    return (
      <IndexTable.Row
        onClick={() => {}}
        id={item.orderCode}
        key={index}
        selected={selectedResources.includes(item.orderCode)}
        position={index}
      >
        <IndexTable.Cell>{item.orderCode}</IndexTable.Cell>
        <IndexTable.Cell>{item.trackingCode}</IndexTable.Cell>

        <IndexTable.Cell>{formatShippingRouteCode(item.shippingRouteCode)}</IndexTable.Cell>
        <IndexTable.Cell>{formatWeight(item.productWeight)}</IndexTable.Cell>
        <IndexTable.Cell>{formatDate(item.orderDate)}</IndexTable.Cell>
        <IndexTable.Cell>
          <div className='Style_Action'>
            <Button
              onClick={() => handleView(item)}
              icon={PolarisIcons.ViewMinor}
            >
              View
            </Button>

            {/* {(activeTab === 'KHO_QT_CHUA_NHAN' || activeTab === 'KHO_QT_DA_NHAN' || activeTab === 'DANG_VAN_CHUYEN_VE_VN' || activeTab === 'DA_VE_VN' || activeTab === 'DA_GIAO') && ( */}
            {activeTab === '' && (
              <div className='Style_Popover'>
                <Popover
                  active={openActionId === item.orderCode}
                  preferredAlignment={'right'}
                  activator={
                    <Button
                      icon={PolarisIcons.CaretDownMinor}
                      onClick={() => setOpenActionId(openActionId === item.orderCode ? null : item.orderCode)}
                    />
                  }
                  onClose={() => {
                    setOpenActionId(null);
                  }}
                >
                  <Button
                    onClick={() => setOpenModalCancelId(item.orderCode)}
                    textAlign={'left'}
                    fullWidth
                    icon={PolarisIcons.CircleCancelMajor}
                  >
                    Hủy đơn hàng
                  </Button>
                </Popover>
                <Modal
                  open={openModalCancelId === item.orderCode}
                  primaryAction={{
                    content: 'Huỷ đơn',
                    onAction: () => handleCancel(item.orderCode),
                  }}
                  secondaryActions={[
                    {
                      content: 'Hủy bỏ yêu cầu',
                      onAction: () => {
                        setOpenModalCancelId(null);
                        setOpenActionId(null);
                      },
                    },
                  ]}
                  title={'Yêu cầu huỷ đơn hàng'}
                  onClose={() => setOpenModalCancelId(null)}
                >
                  <Modal.Section>
                    <div className='Style_Modal_Text'>Bạn có chắc chắn muốn hủy đơn hàng?</div>
                  </Modal.Section>
                </Modal>
              </div>
            )}
          </div>
        </IndexTable.Cell>
      </IndexTable.Row>
    );
  });
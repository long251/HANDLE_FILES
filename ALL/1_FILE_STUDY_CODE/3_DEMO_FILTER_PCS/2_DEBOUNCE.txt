let dispatchRedux = useDispatch();
-----------------------------------------------------
const handleFilterName = (value: string) => {
    setName(value);
    // debouncedFetchData(value);
  };
---------------------------------------------------
const debouncedFetchData = useCallback(
    debounce(fetchData, 300), [name, currentPage, language1]
  )
-> fetchData: ở đây là dữ liệu API web
useEffect(() => {
    debouncedFetchData();
  }, [debouncedFetchData]);
----------------------------------------------------
return
--------
<div style={{display: "flex", gap: "20px"}}>
        <TextField
          label="Search tên phim"
          type="text"
          value={name}
          onChange={handleFilterName}
          autoComplete="off"
        />
--------------------------------------------------------------------------------------------------------------
import React, { useCallback, useEffect, useState } from "react";
import { Container } from "reactstrap";
import { useDispatch } from "react-redux";
import AccountTextFilter from "../Components/Account/AccountTextField";
import AccountTableFilter from "../Components/Account/AccountTableFilter";
import { actionFetchListAccountAPI } from "../Redux/Action/AccountAction";
import { debounce } from "lodash";

function AccountLogic() {
  let [search, setSearch] = useState<string>("");
  let [currentPage, setCurrentPage] = useState<number>(1);

  // Sử dụng useDispatch để gọi action từ Redux
  let dispatchRedux = useDispatch();

  // Khai báo hàm debounce với thời gian là 1000ms
  const debouncedFetchData = useCallback(
    debounce(() => {
      dispatchRedux(actionFetchListAccountAPI(currentPage, search));
    }, 1000),
    [currentPage, search, dispatchRedux]
  );

  // Hàm xử lý khi người dùng thay đổi giá trị tìm kiếm
  const handleFilterName = (value: string) => {
    setSearch(value);
    setCurrentPage(1);
  };

  // Khi search hoặc currentPage thay đổi, gọi hàm debouncedFetchData
  useEffect(() => {
    debouncedFetchData();
  }, [debouncedFetchData]);

  return (
    <Container>
      <AccountTextFilter
        search={search}
        setSearch={setSearch}
        debounceFun={handleFilterName}
      />
      <AccountTableFilter
        currentPage={currentPage}
        setCurrentPage={setCurrentPage}
      />
    </Container>
  );
}

export default AccountLogic;
------------------------------------------------------------------------------------------------------------
import {TextField} from '@shopify/polaris';
import {useState, useCallback} from 'react';
import React from 'react';
import {debounce} from 'lodash';

function AccountTextFilter(props: any) {
  const {search, setSearch, debounceFun} = props;

  const handleSearch = (value: string) => {
    setSearch(value);
    debounceFun(value); // Gọi hàm debounce từ props khi thay đổi giá trị
  }

  return (
    <TextField
      label="Search Username"
      value={search}
      onChange={handleSearch}
      autoComplete="off"
    />
  );
}

export default AccountTextFilter;
---------------------------------------------------------------------------------------------------------------
import React, { useEffect, useState, useCallback } from "react";
import { useDispatch } from "react-redux";
import { actionFetchListAccountAPI } from "../Redux/Action/AccountAction";
import { debounce } from "lodash";

function AccountLogic() {
  const [search, setSearch] = useState<string>("");
  const [currentPage, setCurrentPage] = useState<number>(1);
  const [gender, setGender] = useState<string>("");
  const [createdDate, setCreatedDate] = useState<string>("");
  const [minDate, setMinDate] = useState<string>("2020-01-01");
  const [maxDate, setMaxDate] = useState<string>(formatDateToYYYYMMDD(new Date()));

  const dispatchRedux = useDispatch();
  
  // Sử dụng useCallback để memoize và debounce hàm xử lý tìm kiếm
  const debouncedFetchData = useCallback(
    debounce(() => {
      dispatchRedux(actionFetchListAccountAPI(currentPage, search, gender, createdDate, minDate, maxDate));
    }, 300),
    [currentPage, search, gender, createdDate, minDate, maxDate, dispatchRedux]
  );

  useEffect(() => {
    // Gọi hàm debouncedFetchData khi có sự thay đổi trong các dependency
    debouncedFetchData();
  }, [debouncedFetchData]);

  // Các phần còn lại của component
}

export default AccountLogic;


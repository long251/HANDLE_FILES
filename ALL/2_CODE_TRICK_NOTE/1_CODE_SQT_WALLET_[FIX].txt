import React, { useCallback, useEffect, useRef, useState } from 'react';
import {
  Button,
  DataTable,
  DatePicker,
  Layout,
  LegacyCard,
  LegacyStack,
  Modal,
  OptionList,
  Page,
  PolarisIcons,
  Popover,
  TextContainer,
} from 'pcs-polaris';
import {
  IconArrange,
  IconArrange_Hover,
  IconExpand,
  IconExpand_Hover,
  IconRecharge_Payment,
  IconWithdraw_Payment,
} from '../PaymentRequest/Icon';
import { SharedDivider } from '../../components/Breadcrumb/SharedDivider';
import {
  IconAgribankCreate,
  IconAgribankHover,
  IconBIDVCreate,
  IconBIDVHover,
  IconMBBankCreate,
  IconMBBankHover,
  IconTechcombankCreate,
  IconTechcombankHover,
  IconVietcombankCreate,
  IconVietcombankHover,
} from '../../components/Icons';
import { ToastContainer } from 'react-toastify';
import { IconExcel, IconPDF, IconPrint } from './IconSQTWallet';
import { showToast } from '../../helpers/toast';
import TitleBreadcrumbs from '../../components/Breadcrumb/TitleBreadcrumb.tsx';
import { useDispatch, useSelector } from 'react-redux';
import { AppState } from '../../store';
import { moneyAction } from '../../store/reducers/moneyReducer';
import { formatMoney } from '../../helpers/currency.ts';
import { IconPayment, IconRefund } from '../Home/_components/Icons.tsx';
import { sqtWalletAction } from '../../store/reducers/sqtWalletReducer/index.ts';
import { debounce } from 'lodash';
import NumberPagination from '../../components/NumberPagination/index.tsx';
import moment from 'moment';
import MaskedInput from 'react-text-mask';
import { useLocation, useNavigate } from 'react-router-dom';

const pageSize = 20;

const SQTWallet = () => {
  const dispatch = useDispatch();
  const sqtWalletState = useSelector((state: AppState) => state.sqtWallet);
  const debounceFetchDataFun = useCallback(
    debounce((data: any) => dispatch(sqtWalletAction.fetchData(data)), 400),
    [],
  );
  // Pagination
  const [currentPage, setCurrentPage] = useState(1);
  // search date range
  const [dateRangeActive, setDateRangeActive] = useState(false);
  const [{ month, year }, setDate] = useState({ month: new Date().getMonth(), year: new Date().getFullYear() });
  const [selectedDates, setSelectedDates] = useState({
    start: moment().subtract(30, 'days').toDate(),
    end: moment().toDate(),
  });
  const handleMonthChange = useCallback((month: number, year: number) => setDate({ month, year }), []);
  const [dateInputValue, setDateInputValue] = useState(
    `${moment(selectedDates.start).format('DD/MM/yyyy')} - ${moment(selectedDates.end).format('DD/MM/yyyy')}`,
  );
  const [rangeSelected, setRangeSelected] = useState<string[]>([]);
  const takeDate = (type: 'start' | 'end') => {
    let splitDate = dateInputValue.split(' - ');
    return type == 'start' ? splitDate[0] : splitDate[1];
  };
  // goToPage
  const goToPage = (pageNumber:number) => {
    setCurrentPage(pageNumber);
    updateUrl('page', `${pageNumber}`);
    debounceFetchDataFun({
      fromDate: moment(takeDate('start'), 'DD/MM/yyyy').toDate(),
      toDate: moment(takeDate('end'), 'DD/MM/yyyy').add(1, 'd').toDate(),
      sorts: [{ sortBy: 'CreatedDate', sortDirection: 'DESC' }],
      pageIndex: pageNumber,
      pageSize: pageSize,
    })
  };
  // logic date picked range 
  const handleInputDate = (event: any) => {
    setDateInputValue(event.target.value);
    const [startDateStr, endDateStr] = event.target.value.split(' - ');
    if (moment(startDateStr, 'DD/MM/yyyy').isValid() && moment(endDateStr, 'DD/MM/yyyy').isValid()) {
      const startDate = moment(startDateStr, 'DD/MM/yyyy').toDate();
      const endDate = moment(endDateStr, 'DD/MM/yyyy').toDate();
      setSelectedDates({ start: startDate, end: endDate });
      setDate({
        month: moment(endDateStr, 'DD/MM/yyyy').month(),
        year: moment(endDateStr, 'DD/MM/yyyy').year(),
      });
      const dateTime = `${startDateStr} - ${endDateStr}`;
      updateUrl('dateTime', dateTime);
      setCurrentPage(1);
      updateUrl('page', '1');
      debounceFetchDataFun({
        fromDate: startDate,
        toDate: moment(endDate).add(1, 'd').toDate(),
        sorts: [{ sortBy: 'CreatedDate', sortDirection: 'DESC' }],
        pageIndex: 1,
        pageSize: pageSize,
      });
    }
  };
  const applyDateRange = () => {
    const startDate = selectedDates.start;
    const endDate = selectedDates.end;
    const startDateStr = moment(startDate).format('DD/MM/yyyy');
    const endDateStr = moment(endDate).format('DD/MM/yyyy');

    if (moment(startDateStr, 'DD/MM/yyyy').isValid() && moment(endDateStr, 'DD/MM/yyyy').isValid()) {
      const dateTime = `${startDateStr} - ${endDateStr}`;
      setDateInputValue(dateTime);
      updateUrl('dateTime', dateTime);
      setCurrentPage(1);
      updateUrl('page', '1');
      setDateRangeActive(false);

      debounceFetchDataFun({
        fromDate: moment(startDateStr, 'DD/MM/yyyy').toDate(),
        toDate: moment(endDateStr, 'DD/MM/yyyy').add(1, 'd').toDate(),
        sorts: [{ sortBy: 'CreatedDate', sortDirection: 'DESC' }],
        pageIndex: 1,
        pageSize: pageSize,
      });
    }
  };
  // dữ liệu bảng
  const rows = sqtWalletState.data.map((item) => {
    return [
      // getIcon(item.icon),
      // getAmount(item.icon, item.amount),
      // item.createdDate,
      // item.content,
      item.type,
      item.amount,
      item.createdDateString,
      item.description,
    ];
  });
  // update url
  const navigate = useNavigate();
  const location = useLocation();
  const searchParams = new URLSearchParams(location.search);
  const updateUrl = (key: string, value: string) => {
    searchParams.set(key, value);
    navigate({ search: searchParams.toString() });
  };
  useEffect(() => {
    const pageParam = searchParams.get('page');
    if (pageParam) {
      setCurrentPage(Number(pageParam));
    } else {
      setCurrentPage(1);
    }

    const dateTime = searchParams.get('dateTime') ?? '';
    let fromDate, toDate;
    if (dateTime) {
      const [start, end] = dateTime.split(' - ').map((date) => moment(date, 'DD/MM/yyyy').toDate());
      setSelectedDates({ start, end });
      setDateInputValue(dateTime);
      fromDate = start;
      toDate = end;
    } else {
      fromDate = moment().subtract(30, 'days').toDate();
      toDate = moment().toDate();
      setSelectedDates({ start: fromDate, end: toDate });
      setDateInputValue(`${moment(fromDate).format('DD/MM/yyyy')} - ${moment(toDate).format('DD/MM/yyyy')}`);
    }
    console.log('gọi lần 1');
    debounceFetchDataFun({
      fromDate: fromDate,
      toDate: moment(toDate).add(1, 'd').toDate(),
      sorts: [{ sortBy: 'CreatedDate', sortDirection: 'DESC' }],
      pageIndex: Number(pageParam),
      pageSize: pageSize,
    });
  }, []);
  ////////////////////////////////////
  const getIcon = (icon: string) => {
    if (icon === 'NẠP') {
      return <IconRefund />;
    } else if (icon === 'RÚT') {
      return <IconPayment />;
    } else {
      return null;
    }
  };
  const fakeIconBank = [
    { id: 1, name: 'Techcombank' },
    { id: 2, name: 'BIDV' },
    { id: 3, name: 'Vietcombank' },
    { id: 4, name: 'MBBank' },
    { id: 5, name: 'Agribank' },
  ];
  const [activeBank, setActiveBank] = useState<string | null>(null);
  const [hoveredBank, setHoveredBank] = useState<string | null>(null);

  const handleMouseEnterBank = (bankName: string) => {
    if (activeBank !== bankName) {
      setHoveredBank(bankName);
    }
  };

  const handleMouseLeaveBank = () => {
    setHoveredBank(null);
  };

  const handleClickBank = (bankName: string) => {
    setActiveBank(bankName);
  };

  const getBankIcon = (bankName: string) => {
    if (activeBank === bankName) {
      switch (bankName) {
        case 'Techcombank':
          return <IconTechcombankCreate />;
        case 'BIDV':
          return <IconBIDVCreate />;
        case 'Vietcombank':
          return <IconVietcombankCreate />;
        case 'MBBank':
          return <IconMBBankCreate />;
        case 'Agribank':
          return <IconAgribankCreate />;
        default:
          return null;
      }
    } else if (hoveredBank === bankName) {
      switch (bankName) {
        case 'Techcombank':
          return <IconTechcombankCreate />;
        case 'BIDV':
          return <IconBIDVCreate />;
        case 'Vietcombank':
          return <IconVietcombankCreate />;
        case 'MBBank':
          return <IconMBBankCreate />;
        case 'Agribank':
          return <IconAgribankCreate />;
        default:
          return null;
      }
    } else {
      switch (bankName) {
        case 'Techcombank':
          return <IconTechcombankHover />;
        case 'BIDV':
          return <IconBIDVHover />;
        case 'Vietcombank':
          return <IconVietcombankHover />;
        case 'MBBank':
          return <IconMBBankHover />;
        case 'Agribank':
          return <IconAgribankHover />;
        default:
          return null;
      }
    }
  };
  const getBankName = (bankName: string) => {
    switch (bankName) {
      case 'Techcombank':
        return 'Ngân hàng Thương mại cổ phần Kỹ Thương Việt Nam';
      case 'MBBank':
        return 'Ngân hàng Thương mại cổ phần Quân Đội';
      case 'Vietcombank':
        return 'Ngân hàng Thương mại cổ phần Ngoại Thương Việt Nam';
      case 'VPBank':
        return 'Ngân hàng Thương mại cổ phần Việt Nam Thịnh Vượng';
      case 'VIB':
        return 'Ngân hàng Thương mại cổ phần Quốc tế Việt Nam';
      case 'ACB':
        return 'Ngân hàng Thương mại cổ phần Á Châu';
      case 'BIDV':
        return 'Ngân hàng Thương mại cổ phần Đầu tư và Phát triển Việt Nam';
      case 'TPBank':
        return 'Ngân hàng Thương mại cổ phần Tiên Phong';
      case 'Agribank':
        return 'Ngân hàng Nông Nghiệp & Phát triển Nông thôn Việt Nam';
      default:
        return '';
    }
  };
  const fakeBankAccount = [
    {
      id: 1,
      accountNumber: '0011004099865',
      accountName: 'TA THI HONG HANH',
      bankName: 'Ngân hàng Thương mại cổ phần Kỹ thương Việt Nam',
      accountOwner: 'Tạ Thị Hồng Hạnh',
      money: '12,500,000',
    },
    {
      id: 2,
      accountNumber: '0011000256458',
      accountName: 'TA THI HONG HANH',
      bankName: 'Ngân hàng Thương mại cổ phần Kỹ thương Việt Nam',
      accountOwner: 'Tạ Thị Hồng Hạnh',
      money: '50,500,000',
    },
    {
      id: 3,
      accountNumber: '0012000256456',
      accountName: 'TA HONG HANH',
      bankName: 'Ngân hàng Thương mại cổ phần Kỹ thương Việt Nam',
      accountOwner: 'Tạ Hồng Hạnh',
      money: '120,500,000',
    },
  ];
  const [selectedOption, setSelectedOption] = useState('');
  const [withdrawAmount, setWithdrawAmount] = useState('');
  const [error, setError] = useState('');
  useEffect(() => {
    if (selectedOption) {
      const initialWithdrawAmount = fakeBankAccount[parseInt(selectedOption) - 1].money;
      setWithdrawAmount(initialWithdrawAmount);
    }
  }, [selectedOption]);

  const handleWithdrawAmountChange = (e: any) => {
    const value = e.target.value;
    const money = parseInt(fakeBankAccount[parseInt(selectedOption) - 1].money.replace(/,/g, ''));

    if (value < 50000) {
      setError('Số tiền rút tối thiểu là 50,000 đ');
    } else if (value > money) {
      setError('Số tiền rút không được vượt quá số dư tài khoản');
    } else {
      setError('');
    }

    setWithdrawAmount(value);
  };

  const getAmount = (icon: string, amount: string) => {
    if (icon === 'NẠP') {
      return <span className='Deposit_Amount'>{amount}</span>;
    } else if (icon === 'RÚT') {
      return <span className='Withdraw_Amount'>{amount}</span>;
    } else {
      return amount;
    }
  };
  //------------Checkbox--------------------
  const [showCheckboxTable, setShowCheckboxTable] = useState(false);
  const [checkedItems, setCheckedItems] = useState<{ [key: string]: boolean }>({
    '1': false,
    '2': false,
  });
  const handleCheckboxChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    const { name, checked } = event.target;
    setCheckedItems({ ...checkedItems, [name]: checked });
  };
  const [isHovered, setIsHovered] = useState(false);
  const handleMouseEnter = () => {
    setIsHovered(true);
  };
  const handleMouseLeave = () => {
    setIsHovered(false);
  };

  const [showOptions, setShowOptions] = useState(false);
  const wrapperRef = useRef<HTMLDivElement>(null);

  const toggleOptions = () => {
    setShowOptions(!showOptions);
  };

  const handleClickOutside = (event: MouseEvent) => {
    if (wrapperRef.current && !wrapperRef.current.contains(event.target as Node)) {
      setShowOptions(false);
    }
  };

  useEffect(() => {
    document.addEventListener('mousedown', handleClickOutside);
    return () => {
      document.removeEventListener('mousedown', handleClickOutside);
    };
  }, []);
  // Nút ấn
  const handleButtonClick = () => {
    toggleOptions();
    setShowCheckboxTable(!showCheckboxTable);
  };

  //---------------------------------------------
  const [showCheckboxTableStatus, setShowCheckboxTableStatus] = useState(false);
  const [checkedItemsStatus, setCheckedItemsStatus] = useState<{ [key: string]: boolean }>({
    '1': false,
    '2': false,
    '3': false,
  });

  const handleCheckboxChangeStatus = (event: React.ChangeEvent<HTMLInputElement>) => {
    const { name, checked } = event.target;
    setCheckedItemsStatus({ ...checkedItemsStatus, [name]: checked });
  };

  const [isHoveredStatus, setIsHoveredStatus] = useState(false);

  const handleMouseEnterStatus = () => {
    setIsHoveredStatus(true);
  };

  const handleMouseLeaveStatus = () => {
    setIsHoveredStatus(false);
  };

  const [showCheckboxStatus, setShowCheckboxStatus] = useState(false);
  const wrapperRefStatus = useRef<HTMLDivElement>(null);

  const toggleOptionsStatus = () => {
    setShowCheckboxTableStatus(!showCheckboxTableStatus);
    setShowCheckboxStatus(!showCheckboxStatus);
  };

  const handleClickOutsideStatus = (event: MouseEvent) => {
    if (wrapperRefStatus.current && !wrapperRefStatus.current.contains(event.target as Node)) {
      setShowCheckboxTableStatus(false);
      setShowCheckboxStatus(false);
    }
  };

  useEffect(() => {
    document.addEventListener('mousedown', handleClickOutsideStatus);
    return () => {
      document.removeEventListener('mousedown', handleClickOutsideStatus);
    };
  }, []);

  // NÚT ẤN
  const handleButtonClickStatus = () => {
    toggleOptionsStatus();
  };

  //----------Modal show and close form Deposit Money----------
  const [activeDeposit, setActiveDeposit] = useState(false);
  const toggleModalDeposit = useCallback(() => setActiveDeposit((activeDeposit) => !activeDeposit), []);
  const [activeWithdraw, setActiveWithdraw] = useState(false);
  const toggleModalWithdraw = useCallback(() => setActiveWithdraw((activeWithdraw) => !activeWithdraw), []);
  //----------Toastify----------
  const notify = () => showToast('Tạo yêu cầu thành công', 'success');
  //----------Create Request----------
  const handleCreateRequest = () => {
    const url = '/sqt-wallet/1';
    window.location.href = url;
  };
  return (
    <div className='Polaris-Custom'>
      <Page
        //@ts-ignore
        title={<TitleBreadcrumbs breadcrumbs={[{ title: 'Tài khoản ví SHIPQUOCTE', url: '' }]} />}
      >
        <Layout>
          <Layout.Section>
            <LegacyCard>
              <LegacyCard.Section>
                <div className='Transaction_Block'>
                  <div className='Transaction_Display'>
                    <div className='Block_1'>
                      <div className='Block_Title'>Số dư ví</div>
                      <div className='Block_Money'>{'10 điểm'}</div>
                    </div>
                    <div className='Block_2'>
                      <div className='Block_Title'>Tiền nạp trong tháng</div>
                      <div className='Block_Money'>
                        2,186,109 <span className='Block_Currency'>đ</span>
                      </div>
                    </div>
                    <div className='Block_3'>
                      <div className='Block_Title'>Tiêu dùng trong tháng</div>
                      <div className='Block_Money'>
                        7,186,109 <span className='Block_Currency'>đ</span>
                      </div>
                    </div>
                  </div>

                  <div className='Block_Icon'>
                    {/* <button className='Block_Icon_Withdraw' onClick={toggleModalWithdraw}>
                      <IconWithdraw_Payment />
                      Rút tiền
                    </button> */}
                    <button className='Block_Icon_Recharge' onClick={toggleModalDeposit}>
                      <IconRecharge_Payment />
                      Nạp tiền
                    </button>
                  </div>
                </div>

                <div style={{ marginTop: '24px' }}>
                  <SharedDivider />
                </div>

                <div style={{ marginTop: '24px', position: 'relative' }}>
                  <div className='Transaction_Data'>
                    <div className='Data_Title'>Lịch sử giao dịch</div>
                    <div className='Data_Feature'>
                      <div style={{ marginTop: '-4px' }}>
                        <div className={'TextField--Mask'}>
                          <div className='Polaris-Labelled__LabelWrapper'>
                            <div className='Polaris-Label'>
                              <label
                                id={'PolarisTextField6Label'}
                                htmlFor={'PolarisTextField6'}
                                className='Polaris-Label__Text'
                              >
                                {/* Thời gian */}
                              </label>
                            </div>
                          </div>
                          <div className='Polaris-Connected'>
                            <div className='Polaris-Connected__Item Polaris-Connected__Item--primary'>
                              <div className='Polaris-TextField Polaris-TextField--hasValue'>
                                <MaskedInput
                                  mask={[
                                    /\d/,
                                    /\d/,
                                    '/',
                                    /\d/,
                                    /\d/,
                                    '/',
                                    /\d/,
                                    /\d/,
                                    /\d/,
                                    /\d/,
                                    ' ',
                                    '-',
                                    ' ',
                                    /\d/,
                                    /\d/,
                                    '/',
                                    /\d/,
                                    /\d/,
                                    '/',
                                    /\d/,
                                    /\d/,
                                    /\d/,
                                    /\d/,
                                  ]}
                                  className='Polaris-TextField__Input'
                                  placeholder='dd/mm/yyyy - dd/mm/yyyy'
                                  guide
                                  value={dateInputValue}
                                  placeholderChar={'_'}
                                  keepCharPositions
                                  id='PolarisTextField6'
                                  // onChange={(event: any) => {
                                  //   setDateInputValue(event.target.value);
                                  //   goToPage(1);
                                  // }}
                                  onChange={handleInputDate}
                                  aria-labelledby={'PolarisTextField6Label'}
                                  aria-invalid={false}
                                />
                                <div className='Polaris-TextField__Backdrop' />
                                <div className='Polaris-TextField__Suffix'>
                                  <Popover
                                    fluidContent
                                    active={dateRangeActive}
                                    activator={
                                      <Button
                                        onClick={() => {
                                          setRangeSelected([]);
                                          setDateRangeActive(!dateRangeActive);
                                          let splitDate = dateInputValue.split(' - ');
                                          let startDateStr = splitDate[0];
                                          let endDateStr = splitDate[1];
                                          if (
                                            moment(startDateStr, 'DD/MM/yyyy').isValid() &&
                                            moment(endDateStr, 'DD/MM/yyyy').isValid()
                                          ) {
                                            setSelectedDates({
                                              start: moment(startDateStr, 'DD/MM/yyyy').toDate(),
                                              end: moment(endDateStr, 'DD/MM/yyyy').toDate(),
                                            });
                                            setDate({
                                              month: moment(endDateStr, 'DD/MM/yyyy').month(),
                                              year: moment(endDateStr, 'DD/MM/yyyy').year(),
                                            });
                                          }
                                        }}
                                        plain
                                        icon={PolarisIcons.CalendarMajor}
                                      />
                                    }
                                    onClose={() => setDateRangeActive(false)}
                                  >
                                    <div className='Custom-DatePicker'>
                                      <div className='date_range'>
                                        <div className='pre_option'>
                                          <div className='list_option'>
                                            <div className='list_content'>
                                              <OptionList
                                                title=''
                                                onChange={(selected) => {
                                                  setRangeSelected(selected);
                                                  if (selected[0] == 'today') {
                                                    setSelectedDates({
                                                      start: moment().toDate(),
                                                      end: moment().toDate(),
                                                    });
                                                    setDate({ month: moment().month(), year: moment().year() });
                                                  } else if (selected[0] == 'yesterday') {
                                                    setSelectedDates({
                                                      start: moment().subtract(1, 'day').toDate(),
                                                      end: moment().subtract(1, 'day').toDate(),
                                                    });
                                                    setDate({
                                                      month: moment().subtract(1, 'day').month(),
                                                      year: moment().subtract(1, 'day').year(),
                                                    });
                                                  } else if (selected[0] == 'last_7_days') {
                                                    setSelectedDates({
                                                      start: moment().subtract(7, 'day').toDate(),
                                                      end: moment().toDate(),
                                                    });
                                                    setDate({
                                                      month: moment().subtract(7, 'day').month(),
                                                      year: moment().subtract(7, 'day').year(),
                                                    });
                                                  } else if (selected[0] == 'last_30_days') {
                                                    setSelectedDates({
                                                      start: moment().subtract(30, 'day').toDate(),
                                                      end: moment().toDate(),
                                                    });
                                                    setDate({
                                                      month: moment().subtract(30, 'day').month(),
                                                      year: moment().subtract(30, 'day').year(),
                                                    });
                                                  } else if (selected[0] == 'last_90_days') {
                                                    setSelectedDates({
                                                      start: moment().subtract(90, 'day').toDate(),
                                                      end: moment().toDate(),
                                                    });
                                                    setDate({
                                                      month: moment().subtract(90, 'day').month(),
                                                      year: moment().subtract(90, 'day').year(),
                                                    });
                                                  }
                                                }}
                                                options={[
                                                  { value: 'today', label: 'Hôm nay' },
                                                  { value: 'yesterday', label: 'Hôm qua' },
                                                  { value: 'last_7_days', label: '7 ngày trước' },
                                                  { value: 'last_30_days', label: '30 ngày trước' },
                                                  { value: 'last_90_days', label: '90 ngày trước' },
                                                ]}
                                                selected={rangeSelected}
                                              />
                                            </div>
                                          </div>
                                        </div>
                                        <div className='pick_date'>
                                          <DatePicker
                                            disableDatesAfter={new Date()}
                                            weekStartsOn={1}
                                            month={month}
                                            year={year}
                                            onChange={setSelectedDates}
                                            onMonthChange={handleMonthChange}
                                            selected={selectedDates}
                                            multiMonth
                                            allowRange
                                          />
                                        </div>
                                      </div>
                                      <div className='actions'>
                                        <LegacyStack distribution={'trailing'}>
                                          <Button onClick={() => setDateRangeActive(false)}>Đóng</Button>
                                          <Button primary onClick={applyDateRange}>
                                            Áp dụng
                                          </Button>
                                        </LegacyStack>
                                      </div>
                                    </div>
                                  </Popover>
                                </div>
                              </div>
                            </div>
                          </div>
                        </div>
                      </div>
                      <div style={{ display: 'flex', gap: '20px' }}>
                        <div
                          style={{ cursor: 'pointer', userSelect: 'none' }}
                          onClick={handleButtonClick}
                          onMouseEnter={handleMouseEnter}
                          onMouseLeave={handleMouseLeave}
                        >
                          {showCheckboxTable ? (
                            <IconArrange_Hover />
                          ) : isHovered ? (
                            <IconArrange_Hover />
                          ) : (
                            <IconArrange />
                          )}
                        </div>

                        <div
                          style={{ cursor: 'pointer', userSelect: 'none' }}
                          onClick={handleButtonClickStatus}
                          onMouseEnter={handleMouseEnterStatus}
                          onMouseLeave={handleMouseLeaveStatus}
                        >
                          {showCheckboxTableStatus ? (
                            <IconExpand_Hover />
                          ) : isHoveredStatus ? (
                            <IconExpand_Hover />
                          ) : (
                            <IconExpand />
                          )}
                        </div>
                      </div>
                    </div>

                    {/* đoạn show bảng checkbox */}
                    {showOptions && (
                      <div ref={wrapperRef} className='Checkbox_Table'>
                        <label className='Checkbox_Table_Title'>Loại giao dịch</label>
                        <div style={{ marginTop: '8px' }}>
                          <div className='Checkbox_Row'>
                            <input
                              type='checkbox'
                              id='checkbox1'
                              name='1'
                              checked={checkedItems['1']}
                              onChange={handleCheckboxChange}
                            />
                            <label>Rút tiền</label>
                          </div>
                          <div className='Checkbox_Row'>
                            <input
                              type='checkbox'
                              id='checkbox2'
                              name='2'
                              checked={checkedItems['2']}
                              onChange={handleCheckboxChange}
                            />
                            <label>Nạp tiền</label>
                          </div>
                        </div>
                      </div>
                    )}

                    {showCheckboxStatus && (
                      <div ref={wrapperRefStatus} className='Checkbox_Table_Status'>
                        <label className='Checkbox_Table_Title'>Trạng thái</label>
                        <div style={{ marginTop: '8px' }}>
                          <div className='Checkbox_Row'>
                            <div className='Checkbox_Row_Status'>
                              <IconPrint /> Print
                            </div>
                          </div>
                          <div className='Checkbox_Row'>
                            <div className='Checkbox_Row_Status'>
                              <IconExcel /> Excel
                            </div>
                          </div>
                          <div className='Checkbox_Row'>
                            <div className='Checkbox_Row_Status' style={{ marginBottom: '0px' }}>
                              <IconPDF /> PDF
                            </div>
                          </div>
                        </div>
                      </div>
                    )}
                  </div>

                  {/* Data table */}
                  <div className='SQTWallet_Data_Table'>
                    <DataTable
                      columnContentTypes={['text', 'text', 'text', 'text']}
                      headings={['', 'Số tiền', 'Thời gian', 'Nội dung']}
                      rows={rows}
                    />

                    {/* phân trang */}
                    <div className='Ecommerce_Pagination'>
                      <NumberPagination
                        totalItems={sqtWalletState.data_length}
                        currentPage={currentPage}
                        goToPage={(pageNumber) => goToPage(pageNumber)}
                        pageSize={pageSize}
                      />
                    </div>
                  </div>

                  {/* Modal Deposit Money */}
                  <Modal open={activeDeposit} onClose={toggleModalDeposit} title='Nạp tiền vào tài khoản'>
                    <Modal.Section>
                      <LegacyStack vertical>
                        <LegacyStack.Item>
                          <TextContainer>
                            <div className='Modal_Deposit'>
                              <p className='Modal_Text'>
                                Để nạp điểm vào tài khoản, quý khách vui lòng lựa chọn và chuyển khoản cho SHIPQUOCTE
                                theo thông tin dưới đây.
                              </p>
                              <div style={{ marginBottom: '20px' }}>
                                <SharedDivider />
                              </div>
                              <div>
                                <p className='Modal_Title'>Chọn ngân hàng</p>
                                <div style={{ display: 'flex', flexWrap: 'wrap', gap: '12px' }}>
                                  {fakeIconBank.map((bank) => (
                                    <div
                                      key={bank.id}
                                      className='Block_Bank'
                                      onMouseEnter={() => handleMouseEnterBank(bank.name)}
                                      onMouseLeave={handleMouseLeaveBank}
                                      onClick={() => handleClickBank(bank.name)}
                                      style={{
                                        backgroundColor:
                                          activeBank === bank.name
                                            ? '#D1D5DB'
                                            : hoveredBank === bank.name
                                            ? '#D1D5DB'
                                            : 'transparent',
                                      }}
                                    >
                                      {getBankIcon(bank.name)}
                                    </div>
                                  ))}
                                </div>
                                <div style={{ marginTop: '20px' }}>
                                  {activeBank && (
                                    <div>
                                      <p className='Modal_Title_1'>Tên ngân hàng:</p>
                                      <div
                                        style={{
                                          marginTop: '8px',
                                          marginBottom: '12px',
                                          border: 'none',
                                          backgroundColor: '#EFF1F4',
                                          padding: '10px',
                                          borderRadius: '5px',
                                          width: '100%',
                                        }}
                                      >
                                        {getBankName(activeBank)}
                                      </div>
                                    </div>
                                  )}
                                </div>
                                {activeBank && (
                                  <div style={{ position: 'relative', width: '100%', height: '44px' }}>
                                    <select
                                      style={{
                                        width: '100%',
                                        height: '100%',
                                        padding: '10px',
                                        appearance: 'none',
                                        backgroundColor: 'transparent',
                                        // border: 'none',
                                        outline: 'none',
                                      }}
                                      value={selectedOption || ''}
                                      onChange={(e) => setSelectedOption(e.target.value)}
                                    >
                                      <option className='Option_Text' value=''>
                                        Chọn tài khoản
                                      </option>
                                      <option className='Option_Text' value='1'>
                                        Tài khoản 1
                                      </option>
                                      <option className='Option_Text' value='2'>
                                        Tài khoản 2
                                      </option>
                                      <option className='Option_Text' value='3'>
                                        Tài khoản 3
                                      </option>
                                    </select>
                                    <div
                                      style={{
                                        position: 'absolute',
                                        top: '60%',
                                        right: '10px',
                                        transform: 'translateY(-50%)',
                                      }}
                                    >
                                      <svg
                                        xmlns='http://www.w3.org/2000/svg'
                                        width='20'
                                        height='20'
                                        viewBox='0 0 24 24'
                                        fill='none'
                                        stroke='currentColor'
                                        strokeWidth='2'
                                        strokeLinecap='round'
                                        strokeLinejoin='round'
                                      >
                                        <polyline points='6 9 12 15 18 9'></polyline>
                                      </svg>
                                    </div>
                                  </div>
                                )}
                                <div style={{ marginTop: '20px', marginBottom: '20px' }}>
                                  {selectedOption === '1' && (
                                    <div style={{ display: 'flex', gap: '20px' }}>
                                      <div
                                        style={{
                                          backgroundColor: '#EFF1F4',
                                          padding: '10px',
                                          borderRadius: '5px',
                                          flex: '1',
                                          display: 'flex',
                                          alignItems: 'center',
                                        }}
                                      >
                                        <div style={{}}>{fakeBankAccount[0].accountNumber}</div>
                                      </div>
                                      <div
                                        style={{
                                          backgroundColor: '#EFF1F4',
                                          padding: '10px',
                                          borderRadius: '5px',
                                          flex: '1',
                                        }}
                                      >
                                        <div>{fakeBankAccount[0].accountName}</div>
                                      </div>
                                    </div>
                                  )}

                                  {selectedOption === '2' && (
                                    <div style={{ display: 'flex', gap: '20px' }}>
                                      <div
                                        style={{
                                          backgroundColor: '#EFF1F4',
                                          padding: '10px',
                                          borderRadius: '5px',
                                          flex: '1',
                                        }}
                                      >
                                        <div style={{}}>{fakeBankAccount[1].accountNumber}</div>
                                      </div>
                                      <div
                                        style={{
                                          backgroundColor: '#EFF1F4',
                                          padding: '10px',
                                          borderRadius: '5px',
                                          flex: '1',
                                        }}
                                      >
                                        <div>{fakeBankAccount[1].accountName}</div>
                                      </div>
                                    </div>
                                  )}

                                  {selectedOption === '3' && (
                                    <div style={{ display: 'flex', gap: '20px' }}>
                                      <div
                                        style={{
                                          backgroundColor: '#EFF1F4',
                                          padding: '10px',
                                          borderRadius: '5px',
                                          flex: '1',
                                        }}
                                      >
                                        <div style={{}}>{fakeBankAccount[2].accountNumber}</div>
                                      </div>
                                      <div
                                        style={{
                                          backgroundColor: '#EFF1F4',
                                          padding: '10px',
                                          borderRadius: '5px',
                                          flex: '1',
                                        }}
                                      >
                                        <div>{fakeBankAccount[2].accountName}</div>
                                      </div>
                                    </div>
                                  )}
                                </div>
                                <div style={{ display: 'flex', gap: '20px', justifyContent: 'flex-end' }}>
                                  <div onClick={toggleModalDeposit}>
                                    <button className='Modal_Button_1'>Huỷ</button>
                                  </div>
                                  <div>
                                    <button className='Modal_Button_2' onClick={handleCreateRequest}>
                                      Tạo yêu cầu
                                    </button>
                                    {/* <ToastContainer style={{ borderRadius: '12px', border: '1px solid #9FE6AA' }} /> */}
                                  </div>
                                </div>
                              </div>
                            </div>
                          </TextContainer>
                        </LegacyStack.Item>
                      </LegacyStack>
                    </Modal.Section>
                  </Modal>

                  <Modal open={activeWithdraw} onClose={toggleModalWithdraw} title='Rút tiền từ tài khoản'>
                    <Modal.Section>
                      <LegacyStack vertical>
                        <LegacyStack.Item>
                          <TextContainer>
                            <div className='Modal_Deposit'>
                              <p className='Modal_Text'>
                                Để rút tiền từ tài khoản, quý khách vui lòng lựa chọn và điền đầy đủ các thông tin dưới
                                đây. SHIPQUOCTE sẽ xác minh và thực hiện chuyển tiền cho Quý khách trong vòng 24h.
                              </p>
                              <div style={{ marginBottom: '20px' }}>
                                <SharedDivider />
                              </div>
                              <div>
                                <div className='Modal_Item'>
                                  <div>
                                    <label>Tài khoản ngân hàng</label>
                                  </div>
                                  <div style={{ position: 'relative', width: '100%', flex: '1' }}>
                                    <select
                                      className='Modal_Select'
                                      value={selectedOption}
                                      onChange={(e) => {
                                        setSelectedOption(e.target.value);
                                        setWithdrawAmount('');
                                        setError('');
                                      }}
                                      style={{ border: '1px solid #D1D5DB', borderRadius: '4px' }}
                                    >
                                      <option className='Option_Text' value=''>
                                        Chọn tài khoản
                                      </option>
                                      <option className='Option_Text' value='1'>
                                        Tài khoản 1
                                      </option>
                                      <option className='Option_Text' value='2'>
                                        Tài khoản 2
                                      </option>
                                      <option className='Option_Text' value='3'>
                                        Tài khoản 3
                                      </option>
                                    </select>
                                    <div className='Modal_SVG'>
                                      <svg
                                        xmlns='http://www.w3.org/2000/svg'
                                        width='20'
                                        height='20'
                                        viewBox='0 0 24 24'
                                        fill='none'
                                        stroke='currentColor'
                                        strokeWidth='2'
                                        strokeLinecap='round'
                                        strokeLinejoin='round'
                                      >
                                        <polyline points='6 9 12 15 18 9'></polyline>
                                      </svg>
                                    </div>
                                  </div>
                                </div>
                                <div style={{ marginTop: '20px', marginBottom: '20px' }}>
                                  {selectedOption && (
                                    <div>
                                      <div style={{ display: 'flex', flexDirection: 'column', gap: '16px' }}>
                                        <div
                                          style={{
                                            gap: '56px',
                                          }}
                                          className='Modal_Item'
                                        >
                                          <label>Tên ngân hàng</label>
                                          <div className='Modal_Input'>
                                            {fakeBankAccount[parseInt(selectedOption) - 1].bankName}
                                          </div>
                                        </div>
                                        <div
                                          className='Modal_Item'
                                          style={{
                                            gap: '60px',
                                          }}
                                        >
                                          <label>Chủ tài khoản</label>
                                          <div className='Modal_Input'>
                                            {fakeBankAccount[parseInt(selectedOption) - 1].accountOwner}
                                          </div>
                                        </div>
                                        <div
                                          className='Modal_Item'
                                          style={{
                                            gap: '70px',
                                          }}
                                        >
                                          <label>Số tài khoản</label>
                                          <div className='Modal_Input'>
                                            {fakeBankAccount[parseInt(selectedOption) - 1].accountNumber}
                                          </div>
                                        </div>
                                        <div style={{ display: 'flex', gap: '50px' }} className='Modal_Input_'>
                                          <label style={{ marginTop: '10px' }}>Số dư tài khoản</label>
                                          <div
                                            style={{ display: 'flex', flexDirection: 'column', flex: '1', gap: '8px' }}
                                          >
                                            <input
                                              className='Modal_Input_Withdraw'
                                              type='number'
                                              value={withdrawAmount}
                                              onChange={handleWithdrawAmountChange}
                                              style={{
                                                border: error ? '1px solid red' : '1px solid #ccc',
                                              }}
                                              placeholder={` ${fakeBankAccount[parseInt(selectedOption) - 1].money} đ`}
                                              max={parseInt(
                                                fakeBankAccount[parseInt(selectedOption) - 1].money.replace(/,/g, ''),
                                              )}
                                            />
                                            {error && <p style={{ color: 'red' }}>{error}</p>}
                                          </div>
                                        </div>
                                      </div>
                                    </div>
                                  )}
                                </div>
                                <div style={{ display: 'flex', gap: '20px', justifyContent: 'flex-end' }}>
                                  <div onClick={toggleModalWithdraw}>
                                    <button className='Modal_Button_1'>Huỷ</button>
                                  </div>
                                  <div>
                                    <div className='button-container'>
                                      <button
                                        className='Modal_Button_2'
                                        onClick={notify}
                                        disabled={!selectedOption || !withdrawAmount || !!error}
                                      >
                                        Tạo yêu cầu
                                      </button>
                                    </div>
                                    <ToastContainer />
                                  </div>
                                </div>
                              </div>
                            </div>
                          </TextContainer>
                        </LegacyStack.Item>
                      </LegacyStack>
                    </Modal.Section>
                  </Modal>
                </div>
              </LegacyCard.Section>
            </LegacyCard>
          </Layout.Section>
        </Layout>
      </Page>
    </div>
  );
};

export default SQTWallet;

// Tạo ánh xạ giữa QuoteId và QuoteCode
const quoteIdToCodeMap = dataOut.reduce((map: { [key: string]: string }, delivery: any) => {
  map[delivery.QuoteId] = delivery.QuoteCode;
  return map;
}, {});

const exportQuote = async (quoteCode: string) => {
  try {
    const response = await apiClient.post('/api/PackageDetailQuote/ExportQuotes', { quoteCode }, {
      responseType: 'blob',
    });
    // Tạo liên kết để tải xuống file
    const url = window.URL.createObjectURL(new Blob([response.data]));
    const link = document.createElement('a');
    link.href = url;
    link.setAttribute('download', `${quoteCode}.xlsx`); // Đặt tên file
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
  } catch (error) {
    console.error(`Error exporting quote ${quoteCode}:`, error);
    showToast('Có lỗi xảy ra khi xuất file Excel.', 'error');
  }
};

const getBulkSelect = () => {
  return [
    {
      content: `Xuất ${selectedResources.length} phiếu xuất kho`,
      onAction: async () => {
        if (selectedResources.length === 0) {
          showToast('Không có phiếu xuất kho nào được chọn.', 'error');
          return;
        }

        showToast('Đang xuất các file Excel...', 'info');

        // Gọi API xuất file cho từng quoteCode
        await Promise.all(selectedResources.map(async (id) => {
          const quoteCode = quoteIdToCodeMap[id];
          if (quoteCode) {
            await exportQuote(quoteCode);
          } else {
            console.warn(`QuoteCode not found for QuoteId ${id}`);
          }
        }));
      },
    },
  ];
};

import React, { useState } from 'react';
import {
  Autocomplete,
  Button,
  DropZone,
  FormLayout,
  Icon,
  Layout,
  LegacyCard,
  LegacyStack,
  PolarisIcons,
  Select,
  Spinner,
  Text,
  TextField,
  Thumbnail,
  Tooltip,
} from 'pcs-polaris';
import { apiClient, shopApiClient } from '../../utils/api.ts';
import { countryFromRoute, currencyCodeRoute, routeCurrencySymbol } from '../../helpers/currency.ts';
import { parseInt } from 'lodash';
import { useDispatch, useSelector } from 'react-redux';
import { AppState } from '../../store';
import { CreateForm, ecommerceOrderAction, ProductOption } from '../../store/reducers/ecommerceOrderReducer';
import { cloneVar } from '../../helpers/generic.ts';

const allRegionOptions = [
  {
    label: 'Chọn tuyến',
    value: '',
  },
  {
    label: 'Tuyến Mỹ',
    value: 'US-VN',
  },
  {
    label: 'Tuyến Nhật Bản',
    value: 'JP-VN',
  },
  {
    label: 'Tuyến Hàn Quốc',
    value: 'KR-VN',
  },
  {
    label: 'Tuyến Anh',
    value: 'UK-VN',
  },
  {
    label: 'Tuyến Đức',
    value: 'DE-VN',
  },
  {
    label: 'Tuyến Canada',
    value: 'CA-VN',
  },
  {
    label: 'Tuyến Trung Quốc',
    value: 'CN-VN',
  },
];
const allTransportOptions = [
  { label: 'Chọn hình thức vận chuyển', value: '' },
  { label: 'AIR', value: 'A' },
  { label: 'SEA', value: 'S' },
];
const allDestinationOptions = [
  { label: 'Chọn điểm đến', value: '' },
  { label: 'Hà Nội', value: 'HAN' },
  { label: 'Hồ Chí Minh', value: 'SGN' },
];

type Props = {
  index: number;
};

const ItemCreate = (props: Props) => {
  const ecommerceOrderState = useSelector((state: AppState) => state.ecommerceOrder);
  const reduxDispatch = useDispatch();
  let product: CreateForm = ecommerceOrderState.create_forms[props.index];

  const updateState = (key: string, value: any) => {
    reduxDispatch(
      ecommerceOrderAction.updateFormField({
        data: {
          index: props.index,
          field: key,
          value: value,
        },
      }),
    );
  };

  const [regionOptions, setRegionOptions] = useState(allRegionOptions);
  const [transportOptions, setTransportOptions] = useState(allTransportOptions);
  const [destinationOptions, setDestinationOptions] = useState(allDestinationOptions);

  const [tmpImage, setTmpImage] = useState('');
  const [loadingUpload, setLoadingUpload] = useState(false);
  const handleDropImage = async (_droppedFiles: File[], acceptedFiles: File[], _: File[]) => {
    if (loadingUpload) {
      return;
    }
    let file = acceptedFiles[0];
    const formData = new FormData();
    formData.append('file', file);
    setLoadingUpload(true);
    try {
      const response = await apiClient.post('api/File/UploadImage', formData, {
        headers: {
          'Content-Type': 'multipart/form-data',
        },
      });
      console.log(response);
      let tmp: any = cloneVar(product.images);
      if (response.data.status) {
        tmp.push(response.data.fullUrl);
      }
      updateState('images', tmp);
    } catch (e) {
      console.log(e);
    }
    setLoadingUpload(false);
  };

  const [loadingFetchEbay, setLoadingFetchEbay] = useState(false);
  const [currentLink, setCurrentLink] = useState('');

  const handleFetchUrl = async (forceRefresh = false, urlStr?: string) => {
    let processUrl = urlStr ? urlStr : product.url;
    if (loadingFetchEbay || (processUrl == currentLink && !forceRefresh)) {
      return;
    }
    setCurrentLink(processUrl);
    updateState('outOfStock', false);
    updateState('productData', null);
    updateState('options', []);
    updateState('variants', []);
    updateState('extraOption', 3);
    if (processUrl.includes('http')) {
      setLoadingFetchEbay(true);
      if (processUrl.includes('ebay.com')) {
        updateState('images', []);
        let tmp = [];
        for (let i = 0; i < product.options.length; i++) {
          if (!Array.isArray(product.options[i].options)) {
            tmp.push(product.options[i]);
          }
        }
        updateState('options', tmp);
        try {
          let response = await shopApiClient.get(`/api/ebay/find-item?url=${processUrl}`);
          if (response.data) {
            let data = response.data;
            updateState('productData', data);
            if (data.image) {
              updateState('images', [data.image]);
            }
            updateState('price', data.price ?? '');
            updateState('outOfStock', !data.isStocking);
            updateState('name', data.name);
            if (data.image) {
              updateState('images', [data.image]);
            }
            updateState('route', 'US-VN');
            updateState('searchRoute', 'Tuyến Mỹ');

            if (data.selectMenu) {
              let menuItemMap = data.menuItemMap;
              let selectMenu = data.selectMenu;
              let tmp = [];
              for (let i = 0; i < selectMenu.length; i++) {
                let options = [];
                let menuItemValueIds = selectMenu[i].menuItemValueIds;
                for (let j = 0; j < menuItemValueIds.length; j++) {
                  let option = {};
                  for (let key in menuItemMap) {
                    if (menuItemValueIds[j] == menuItemMap[key].valueId) {
                      option = {
                        label: menuItemMap[key].valueName,
                        value: `${menuItemMap[key].valueId}`,
                      };
                      break;
                    }
                  }
                  options.push(option);
                }

                tmp.push({
                  label: selectMenu[i].displayLabel,
                  options: options,
                  selected: {
                    label: '',
                    value: '',
                  },
                });
              }
              updateState('options', tmp);
            }

            if (Array.isArray(data.variationsMap)) {
              let tmp: any = [];
              let variantsMap = cloneVar(data.variationsMap);
              let variationCombinations = data.variationCombinations;
              let variationCombinationsArr = Object.keys(variationCombinations).map((key: string) => {
                return { key: key, value: variationCombinations[key] };
              });
              for (let i = 0; i < variantsMap.length; i++) {
                let variantId = variantsMap[i]['variationId'];
                for (let j = 0; j < variationCombinationsArr.length; j++) {
                  if (variationCombinationsArr[j]['value'].toString() == variantId) {
                    variantsMap[i]['option'] = variationCombinationsArr[j]['key'];
                    break;
                  }
                }
                tmp.push(variantsMap[i]);
              }
              updateState('variants', tmp);
            }
            updateState('extraOption', 0);
            updateState('setOption1Label', '');
            updateState('setOption1Value', '');
            updateState('setOption2Label', '');
            updateState('setOption2Value', '');
            updateState('setOption3Label', '');
            updateState('setOption3Value', '');
          } else {
            updateState('options', []);
            updateState('variants', []);
            updateState('productData', null);
            updateState('name', '');
            updateState('price', '0');
            updateState('route', '');
            updateState('searchRoute', 'Chọn tuyến');
          }
        } catch (e) {
          console.log(e);
          updateState('options', []);
          updateState('variants', []);
          updateState('productData', null);
          updateState('name', '');
          updateState('price', '0');
          updateState('route', '');
          updateState('searchRoute', 'Chọn tuyến');
        }
      } else {
        try {
          updateState('variants', []);
          updateState('productData', null);
          let response = await apiClient.post('/api/Order/GetProductUrl', {
            url: processUrl,
          });
          if (response.data.status && response.data.data) {
            let data = response.data.data;
            updateState('images', data.images);
            updateState('price', data.price);
            updateState('name', data.name.trim());
            let route = currencyCodeRoute(data.currency);
            updateState('route', route);
            if (route) {
              updateState('searchRoute', countryFromRoute(route));
            }
          }
        } catch (e) {
          updateState('variants', []);
          updateState('productData', null);
        }
      }
      setLoadingFetchEbay(false);
    }
  };

  const changeOption = (newOptions: any[]) => {
    let outOfStock = false;
    for (let i = 0; i < newOptions.length; i++) {
      let selectedValue = newOptions[i].selected.value;
      if (product.productData.menuItemMap[selectedValue].outOfStock) {
        outOfStock = true;
        break;
      }
    }
    updateState('outOfStock', outOfStock);
    updateState('price', product.productData.price);

    let selectedOptionArr = [];
    for (let i = 0; i < newOptions.length; i++) {
      let selectedValue = newOptions[i].selected.value;
      selectedOptionArr.push(selectedValue);
      let selectedOptionStr = selectedOptionArr.join('_');
      for (let j = 0; j < product.variants.length; j++) {
        if (product.variants[j]['option'] == selectedOptionStr) {
          updateState('price', product.variants[j]['price']);
          updateState('outOfStock', product.variants[j]['outOfStock']);
          break;
        }
      }
    }

    let imageIndex = 0;
    let menuItemPictureIndexMap = product.productData.menuItemPictureIndexMap;
    for (let i = 0; i < selectedOptionArr.length; i++) {
      let optionValue = selectedOptionArr[i];
      let imageIndexes = menuItemPictureIndexMap[optionValue];
      if (Array.isArray(imageIndexes) && imageIndexes.length) {
        imageIndex = imageIndexes[0];
        break;
      }
    }
    if (Array.isArray(product.productData.images) && product.productData.images.length > imageIndex) {
      updateState('images', [product.productData.images[imageIndex]]);
    }
  };

  const handleAddOption = () => {
    if (product.extraOption < 3) {
      updateState('extraOption', product.extraOption + 1);
    }
  };

  return (
    <>
      {product ? (
        <>
          <Layout.Section>
            <LegacyCard
              title={`Thông tin sản phẩm ${ecommerceOrderState.create_forms.length > 1 ? props.index + 1 : ''}`}
              // @ts-ignore
              actions={
                ecommerceOrderState.create_forms.length > 1
                  ? [
                      {
                        content: <Button icon={PolarisIcons.DeleteMajor} destructive plain />,
                        onAction() {
                          reduxDispatch(
                            ecommerceOrderAction.deleteForm({
                              data: {
                                position: props.index,
                              },
                            }),
                          );
                        },
                      },
                    ]
                  : []
              }
            >
              <LegacyCard.Section>
                <FormLayout>
                  <FormLayout.Group>
                    <div
                      onKeyDown={(event) => {
                        if (event.key == 'Enter') {
                          handleFetchUrl(true);
                        }
                      }}
                    >
                      <TextField
                        error={product.errors.includes('url') ? 'Vui lòng nhập URL sản phẩm' : false}
                        label={'URL sản phẩm'}
                        onBlur={() => {
                          handleFetchUrl();
                        }}
                        requiredIndicator
                        autoComplete={'off'}
                        value={product.url}
                        onChange={(value) => updateState('url', value)}
                        connectedRight={
                          loadingFetchEbay ? (
                            <div
                              style={{
                                width: 30,
                                height: '100%',
                                display: 'flex',
                                alignItems: 'center',
                                justifyContent: 'center',
                              }}
                            >
                              <Spinner size={'small'} />
                            </div>
                          ) : null
                        }
                      />
                    </div>
                    <TextField
                      error={product.errors.includes('name') ? 'Vui lòng nhập tên sản phẩm' : false}
                      label={'Tên sản phẩm'}
                      disabled={product.productData}
                      requiredIndicator
                      autoComplete={'off'}
                      value={product.name}
                      onChange={(value) => updateState('name', value)}
                    />
                  </FormLayout.Group>
                  <FormLayout.Group>
                    <TextField
                      error={product.errors.includes('price') ? 'Vui lòng nhập đơn giá' : false}
                      type={'number'}
                      label={'Đơn giá'}
                      requiredIndicator
                      autoComplete={'off'}
                      value={product.price}
                      min={0}
                      suffix={routeCurrencySymbol(product.route)}
                      onChange={(value) => {
                        updateState('price', value);
                      }}
                      onBlur={() => {
                        let valueStr = product.price;
                        let numValue = Number(valueStr);
                        if (numValue >= 0) {
                          updateState('price', `${numValue}`);
                        } else {
                          updateState('price', `0`);
                        }
                      }}
                    />
                    <TextField
                      error={product.errors.includes('quantity') ? 'Vui lòng nhập số lượng' : false}
                      type={'number'}
                      label={'Số lượng'}
                      requiredIndicator
                      autoComplete={'off'}
                      value={product.quantity}
                      min={1}
                      onChange={(value) => updateState('quantity', value)}
                      onBlur={() => {
                        let valueStr = product.quantity;
                        let numValue = parseInt(valueStr);
                        if (numValue > 0) {
                          updateState('quantity', `${numValue}`);
                        } else {
                          updateState('quantity', '1');
                        }
                      }}
                    />
                  </FormLayout.Group>
                  <LegacyStack vertical>
                    <LegacyStack.Item>
                      <LegacyStack spacing={'none'}>
                        <Text as={'p'} variant={'bodyMd'}>
                          Phân loại sản phẩm
                        </Text>
                        <Tooltip
                          persistOnClick
                          content={'Kiểu dáng, mẫu mã của sản phẩm. Ví dụ Size, Color, Material...'}
                          dismissOnMouseOut
                        >
                          <Icon source={PolarisIcons.QuestionMarkMajor} color={'subdued'} />
                        </Tooltip>
                      </LegacyStack>
                    </LegacyStack.Item>
                    {product.options.length ? (
                      <LegacyStack vertical>
                        {product.options.map((option: any, idx: number) => {
                          let listOptions = [
                            {
                              label: 'Vui lòng chọn mẫu mã',
                              value: '',
                            },
                          ];
                          listOptions = listOptions.concat(option.options);
                          return (
                            <LegacyStack.Item key={idx}>
                              <LegacyStack distribution={'fillEvenly'}>
                                <LegacyStack.Item>
                                  <TextField
                                    label={''}
                                    placeholder={'VD: Color'}
                                    value={option.label}
                                    autoComplete={'off'}
                                    prefix={
                                      <Tooltip content={'Giá trị này cố định'}>
                                        <Icon source={PolarisIcons.LockMajor} />
                                      </Tooltip>
                                    }
                                  />
                                </LegacyStack.Item>
                                <LegacyStack.Item>
                                  <Select
                                    error={product.errors.includes(`option_${idx}`) ? 'Vui lòng chọn giá trị' : false}
                                    label={''}
                                    value={option.selected.value}
                                    onChange={(selected) => {
                                      let tmp: ProductOption[] = cloneVar(product.options);
                                      console.log(tmp);
                                      tmp[idx]['selected']['value'] = selected;
                                      for (let i = 0; i < listOptions.length; i++) {
                                        if (listOptions[i]['value'] == selected) {
                                          tmp[idx]['selected']['label'] = listOptions[i]['label'];
                                          break;
                                        }
                                      }
                                      updateState('options', tmp);
                                      changeOption(tmp);
                                    }}
                                    options={listOptions}
                                  />
                                </LegacyStack.Item>
                              </LegacyStack>
                            </LegacyStack.Item>
                          );
                        })}
                      </LegacyStack>
                    ) : null}

                    {product.extraOption >= 1 ? (
                      <LegacyStack.Item>
                        <LegacyStack distribution={'fill'}>
                          <TextField
                            label={''}
                            placeholder={'Tên phân loại 1 (Ví dụ: Color, Size, Material...)'}
                            value={product.option1Label}
                            error={product.errors.includes('option1_label') ? 'Vui lòng nhập giá trị' : false}
                            autoComplete={'off'}
                            onChange={(value) => updateState('option1Label', value)}
                          />
                          <TextField
                            label={''}
                            placeholder={'Ví dụ: Red'}
                            value={product.option1Value}
                            error={product.errors.includes('option1_value') ? 'Vui lòng nhập giá trị' : false}
                            autoComplete={'off'}
                            onChange={(value) => updateState('option1Value', value)}
                          />
                        </LegacyStack>
                      </LegacyStack.Item>
                    ) : null}
                    {product.extraOption >= 2 ? (
                      <LegacyStack.Item>
                        <LegacyStack distribution={'fill'}>
                          <TextField
                            label={''}
                            placeholder={'Tên phân loại 2 (Ví dụ: Color, Size, Material...)'}
                            error={product.errors.includes('option2_label') ? 'Vui lòng nhập giá trị' : false}
                            value={product.option2Label}
                            autoComplete={'off'}
                            onChange={(value) => updateState('option2Label', value)}
                          />
                          <TextField
                            label={''}
                            placeholder={'VD: M'}
                            error={product.errors.includes('option2_value') ? 'Vui lòng nhập giá trị' : false}
                            value={product.option2Value}
                            autoComplete={'off'}
                            onChange={(value) => updateState('option2Value', value)}
                          />
                        </LegacyStack>
                      </LegacyStack.Item>
                    ) : null}
                    {product.extraOption == 3 ? (
                      <LegacyStack.Item>
                        <LegacyStack distribution={'fill'}>
                          <TextField
                            label={''}
                            placeholder={'Tên phân loại 3 (Ví dụ: Color, Size, Material...)'}
                            error={product.errors.includes('option3_label') ? 'Vui lòng nhập giá trị' : false}
                            value={product.option3Label}
                            autoComplete={'off'}
                            onChange={(value) => updateState('option3Label', value)}
                          />
                          <TextField
                            label={''}
                            placeholder={'VD: Iron'}
                            error={product.errors.includes('option3_value') ? 'Vui lòng nhập giá trị' : false}
                            value={product.option3Value}
                            autoComplete={'off'}
                            onChange={(value) => updateState('option3Value', value)}
                          />
                        </LegacyStack>
                      </LegacyStack.Item>
                    ) : null}
                    {product.extraOption < 3 ? (
                      <LegacyStack.Item>
                        <Button icon={PolarisIcons.AddMajor} onClick={() => handleAddOption()}>
                          Thêm loại
                        </Button>
                      </LegacyStack.Item>
                    ) : null}
                    {product.outOfStock ? (
                      <LegacyStack.Item>
                        <Text as={'p'} variant={'bodyMd'} color={'critical'} fontWeight={'semibold'}>
                          Sản phẩm đã hết hàng
                        </Text>
                      </LegacyStack.Item>
                    ) : null}
                  </LegacyStack>
                  <LegacyStack>
                    <LegacyStack.Item fill>
                      <div
                        onKeyDown={(event: any) => {
                          if (event.key == 'Enter') {
                            let tmp: any = cloneVar(product.images);
                            let value = event.target.value;
                            if (value) {
                              tmp.push(value);
                              updateState('images', tmp);
                              setTmpImage('');
                            }
                          }
                        }}
                      >
                        <TextField
                          onBlur={(event: any) => {
                            let value = event.target.value;
                            if (value) {
                              let tmp: any = cloneVar(product.images);
                              tmp.push(value);
                              updateState('images', tmp);
                              setTmpImage('');
                            }
                          }}
                          disabled={product.productData && product.images.length}
                          error={product.errors.includes('images') ? 'Vui lòng tải lên hình ảnh' : false}
                          placeholder={'Nhập URL hình ảnh và nhấn Enter'}
                          label={'Hình ảnh sản phẩm'}
                          requiredIndicator
                          autoComplete={'off'}
                          value={tmpImage}
                          onChange={(value) => {
                            setTmpImage(value);
                          }}
                          connectedRight={
                            <div
                              style={{
                                width: 30,
                                height: '100%',
                                display: 'flex',
                                alignItems: 'center',
                                justifyContent: 'center',
                              }}
                            >
                              {loadingUpload ? (
                                <Spinner size={'small'} />
                              ) : (
                                <DropZone
                                  disabled={product.productData && product.images.length}
                                  allowMultiple={false}
                                  accept='image/*'
                                  type='image'
                                  onDrop={handleDropImage}
                                >
                                  <DropZone.FileUpload />
                                </DropZone>
                              )}
                            </div>
                          }
                        />
                      </div>
                    </LegacyStack.Item>
                  </LegacyStack>
                  <LegacyStack spacing={'tight'}>
                    {product.images.map((item: string, index: number) => {
                      return (
                        <div
                          style={{
                            border: '1px solid #eff1f4',
                            padding: 4,
                            borderRadius: 4,
                            position: 'relative',
                          }}
                          key={index}
                        >
                          {!product.productData ? (
                            <div
                              style={{
                                position: 'absolute',
                                right: 0,
                                top: 0,
                                zIndex: 10,
                                cursor: 'pointer',
                              }}
                              onClick={() => {
                                let tmp: any = [];
                                for (let i = 0; i < product.images.length; i++) {
                                  if (i != index) {
                                    tmp.push(product.images[i]);
                                  }
                                }
                                updateState('images', tmp);
                              }}
                            >
                              <Icon color={'critical'} source={PolarisIcons.DeleteMajor} />
                            </div>
                          ) : null}

                          <div>
                            <Thumbnail size={'large'} source={item} alt={''} />
                          </div>
                        </div>
                      );
                    })}
                  </LegacyStack>
                </FormLayout>
              </LegacyCard.Section>
            </LegacyCard>
          </Layout.Section>
          <Layout.Section secondary>
            <LegacyCard>
              <LegacyCard.Section>
                <FormLayout>
                  <Autocomplete
                    options={regionOptions}
                    selected={[product.route]}
                    onSelect={(selected) => {
                      updateState('route', selected[0]);
                      const selectedText = selected.map((selectedItem) => {
                        const matchedOption = regionOptions.find((option) => {
                          return option['value'] == selectedItem;
                        });
                        if (matchedOption) {
                          return `${matchedOption['label']}`;
                        }
                        return '';
                      });
                      updateState('searchRoute', selectedText[0]);
                    }}
                    textField={
                      <Autocomplete.TextField
                        error={product.errors.includes('route') ? 'Vui lòng chọn tuyến' : false}
                        value={product.searchRoute}
                        onChange={(value) => {
                          updateState('searchRoute', value);
                          if (value) {
                            let tmp: any = [];
                            for (let i = 0; i < allRegionOptions.length; i++) {
                              let label: any = allRegionOptions[i]['label'];
                              if (label.toLowerCase().includes(value.toLowerCase())) {
                                tmp.push(allRegionOptions[i]);
                              }
                            }
                            setRegionOptions(tmp);
                          } else {
                            setRegionOptions(allRegionOptions);
                          }
                        }}
                        requiredIndicator
                        suffix={<Icon source={PolarisIcons.CaretDownMinor} />}
                        autoComplete={'off'}
                        label={'Tuyến'}
                        disabled={product.productData}
                      />
                    }
                  />
                  {product.route == 'JP-VN' ? (
                    <FormLayout.Group>
                      <Autocomplete
                        options={transportOptions}
                        selected={[product.transport]}
                        onSelect={(selected) => {
                          updateState('transport', selected[0]);
                          const selectedText = selected.map((selectedItem) => {
                            const matchedOption = transportOptions.find((option) => {
                              return option['value'] == selectedItem;
                            });
                            if (matchedOption) {
                              return `${matchedOption['label']}`;
                            }
                            return '';
                          });
                          updateState('searchTransport', selectedText[0]);
                        }}
                        textField={
                          <Autocomplete.TextField
                            error={product.errors.includes('transport') ? 'Vui lòng chọn hình thức vận chuyển' : false}
                            value={product.searchTransport}
                            onChange={(value) => {
                              updateState('searchTransport', value);
                              if (value) {
                                let tmp: any = [];
                                for (let i = 0; i < allTransportOptions.length; i++) {
                                  let label: any = allTransportOptions[i]['label'];
                                  if (label.toLowerCase().includes(value.toLowerCase())) {
                                    tmp.push(allTransportOptions[i]);
                                  }
                                }
                                setTransportOptions(tmp);
                              } else {
                                setTransportOptions(allTransportOptions);
                              }
                            }}
                            suffix={<Icon source={PolarisIcons.CaretDownMinor} />}
                            autoComplete={'off'}
                            requiredIndicator
                            label={'Hình thức vận chuyển'}
                          />
                        }
                      />
                      {product.transport == 'S' ? (
                        <Autocomplete
                          options={destinationOptions}
                          selected={[product.destination]}
                          onSelect={(selected) => {
                            updateState('destination', selected[0]);
                            const selectedText = selected.map((selectedItem) => {
                              const matchedOption = destinationOptions.find((option) => {
                                return option['value'] == selectedItem;
                              });
                              if (matchedOption) {
                                return `${matchedOption['label']}`;
                              }
                              return '';
                            });
                            updateState('searchDestination', selectedText[0]);
                          }}
                          textField={
                            <Autocomplete.TextField
                              error={product.errors.includes('destination') ? 'Vui lòng chọn điểm đến' : false}
                              value={product.searchDestination}
                              onChange={(value) => {
                                updateState('searchDestination', value);
                                if (value) {
                                  let tmp: any = [];
                                  for (let i = 0; i < allDestinationOptions.length; i++) {
                                    let label: any = allDestinationOptions[i]['label'];
                                    if (label.toLowerCase().includes(value.toLowerCase())) {
                                      tmp.push(allDestinationOptions[i]);
                                    }
                                  }
                                  setDestinationOptions(tmp);
                                } else {
                                  setDestinationOptions(allDestinationOptions);
                                }
                              }}
                              suffix={<Icon source={PolarisIcons.CaretDownMinor} />}
                              autoComplete={'off'}
                              requiredIndicator
                              label={'Điểm đến'}
                            />
                          }
                        />
                      ) : null}
                    </FormLayout.Group>
                  ) : null}
                  <TextField
                    type={'number'}
                    label={'Thuế'}
                    suffix={'%'}
                    autoComplete={'off'}
                    value={product.tax}
                    min={0}
                    onChange={(value) => updateState('tax', value)}
                    onBlur={() => {
                      let valueStr = product.tax;
                      let numValue = Number(valueStr);
                      if (numValue >= 0) {
                        updateState('tax', `${numValue}`);
                      } else {
                        updateState('tax', `0`);
                      }
                    }}
                  />
                  <TextField
                    type={'number'}
                    label={'Phí vận chuyển nội địa tạm tính'}
                    autoComplete={'off'}
                    value={product.shippingFee}
                    min={0}
                    onChange={(value) => updateState('shippingFee', value)}
                    suffix={routeCurrencySymbol(product.route)}
                    onBlur={() => {
                      let valueStr = product.shippingFee;
                      let numValue = Number(valueStr);
                      if (numValue >= 0) {
                        updateState('shippingFee', `${numValue}`);
                      } else {
                        updateState('shippingFee', `0`);
                      }
                    }}
                  />
                  <TextField
                    type={'number'}
                    label={'Trọng lượng'}
                    autoComplete={'off'}
                    value={product.weight}
                    min={0}
                    suffix={'kg'}
                    onChange={(value) => updateState('weight', value)}
                    onBlur={() => {
                      let valueStr = product.weight;
                      let numValue = Number(valueStr);
                      if (numValue >= 0) {
                        updateState('weight', `${numValue}`);
                      } else {
                        updateState('weight', `0`);
                      }
                    }}
                  />
                  {product.url.includes('https://') &&
                  product.url.includes('yahoo') &&
                  product.url.includes('auction') ? (
                    <TextField
                      requiredIndicator
                      error={product.errors.includes('auction') ? 'Vui lòng nhập nick đấu' : false}
                      label={'Nick đấu'}
                      autoComplete={'off'}
                      value={product.auctionNick}
                      onChange={(value) => updateState('auctionNick', value)}
                    />
                  ) : null}
                  <TextField
                    label={'Ghi chú'}
                    autoComplete={'off'}
                    multiline={5}
                    value={product.note}
                    onChange={(value) => updateState('note', value)}
                  />
                </FormLayout>
              </LegacyCard.Section>
            </LegacyCard>
          </Layout.Section>
        </>
      ) : null}
    </>
  );
};

export default ItemCreate;

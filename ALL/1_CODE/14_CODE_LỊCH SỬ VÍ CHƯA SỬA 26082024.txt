import React, { useCallback, useEffect, useState } from 'react';
import {
  Autocomplete,
  Button,
  DatePicker,
  Grid,
  Icon,
  IndexTable,
  Layout,
  LegacyCard,
  LegacyStack,
  OptionList,
  Page,
  PolarisIcons,
  Popover,
  Spinner,
  Text,
} from 'pcs-polaris';
import TitleBreadcrumbs from '../../components/Breadcrumb/TitleBreadcrumb.tsx';
import MaskedInput from 'react-text-mask';
import moment from 'moment';
import { useLocation, useNavigate } from 'react-router-dom';
import { debounce } from 'lodash';
import { moneyAction } from '../../store/reducers/moneyReducer';
import { apiClient } from '../../utils/api.ts';
import { useDispatch, useSelector } from 'react-redux';
import { AppState } from '../../store';
import { IconPayment, IconRefund } from '../Home/_components/Icons.tsx';
import NumberPagination from '../../components/NumberPagination';
import { formatMoney } from '../../helpers/currency.ts';
import { datetimeFormat } from '../../helpers/date.ts';

const limit = 20;
const paymentTypeOptions = [
  {
    label: 'Tất cả',
    value: '',
  },
  {
    label: 'Đã thanh toán',
    value: 'da_thanh_toan',
  },
  {
    label: 'Chờ thanh toán',
    value: 'cho_thanh_toan',
  },
  {
    label: 'Đã hoàn tiền',
    value: 'da_hoan_tien',
  },
];

const PaymentHistory = () => {
  const dispatch = useDispatch();
  const moneyState = useSelector((state: AppState) => state.money);

  useEffect(() => {
    dispatch(moneyAction.fetchWallet());
    fetchTotalThisMonth();
  }, []);

  const [searchPaymentType, setSearchPaymentType] = useState('Tất cả');
  const [paymentType, setPaymentType] = useState('');

  const [dateRangeActive, setDateRangeActive] = useState(false);
  const [{ month, year }, setDate] = useState({ month: new Date().getMonth(), year: new Date().getFullYear() });
  const [selectedDates, setSelectedDates] = useState({
    start: moment().subtract(30, 'days').toDate(),
    end: moment().toDate(),
  });

  const handleMonthChange = useCallback((month: number, year: number) => setDate({ month, year }), []);

  const [dateInputValue, setDateInputValue] = useState(
    `${moment(selectedDates.start).format('DD/MM/yyyy')} - ${moment(selectedDates.end).format('DD/MM/yyyy')}`,
  );
  const [rangeSelected, setRangeSelected] = useState<string[]>([]);

  const [page, setPage] = useState(1);
  const navigate = useNavigate();
  const location = useLocation();
  const searchParams = new URLSearchParams(location.search);
  const updateUrl = (key: string, value: string) => {
    searchParams.set(key, value);
    navigate({ search: searchParams.toString() });
  };
  const goToPage = (pageNumber: number) => {
    setPage(pageNumber);
    updateUrl('page', `${pageNumber}`);
  };

  const debounceFetchDataFun = useCallback(
    debounce((data: any) => {
      dispatch(moneyAction.fetchPaymentHistories(data));
    }, 300),
    [],
  );
  const takeDate = (type: 'start' | 'end') => {
    let splitDate = dateInputValue.split(' - ');
    return type == 'start' ? splitDate[0] : splitDate[1];
  };

  useEffect(() => {
    let pageParam: string = searchParams.get('page') ?? '1';
    setPage(Number(pageParam));

    let typeParam: string = searchParams.get('type') ?? '';
    setPaymentType(typeParam);
    for (let i = 0; i < paymentTypeOptions.length; i++) {
      if (paymentTypeOptions[i]['value'] == typeParam) {
        setSearchPaymentType(paymentTypeOptions[i]['label']);
        break;
      }
    }
  }, []);

  useEffect(() => {
    let payload: any = {
      fromDate: moment(takeDate('start'), 'DD/MM/yyyy').toDate(),
      toDate: moment(takeDate('end'), 'DD/MM/yyyy').add(1, 'd').toDate(),
      pageIndex: page,
      pageSize: limit,
      isRefund: null,
      status: null,
      sorts: [
        {
          sortBy: 'CreatedDate',
          sortDirection: 'DESC',
        },
      ],
    };
    if (paymentType == 'da_thanh_toan') {
      payload['isRefund'] = false;
      payload['status'] = 1;
    } else if (paymentType == 'cho_thanh_toan') {
      payload['isRefund'] = false;
      payload['status'] = 3;
    } else if (paymentType == 'da_hoan_tien') {
      payload['isRefund'] = true;
      payload['status'] = 1;
    }
    debounceFetchDataFun(payload);
  }, [page, paymentType, dateInputValue]);

  const [totalPaymentThisMonth, setTotalPaymentThisMonth] = useState(0);
  const [totalRefundThisMonth, setTotalRefundThisMonth] = useState(0);
  const [loadingTotalThisMonth, setLoadingTotalThisMonth] = useState(false);

  const fetchTotalThisMonth = async () => {
    setLoadingTotalThisMonth(true);
    let startThisMonth = moment().startOf('month');
    let endThisMonth = moment().endOf('month');
    let paymentThisMonth = 0;
    let refundThisMonth = 0;
    try {
      let response = await apiClient.post(`/api/Payment/GetPaymentTransactionHistory`, {
        fromDate: startThisMonth.toDate(),
        toDate: endThisMonth.toDate(),
        pageIndex: 1,
        pageSize: 100,
        sorts: [
          {
            sortBy: 'CreatedDate',
            sortDirection: 'DESC',
          },
        ],
      });
      if (response.data.status) {
        let data = response.data.data;
        for (let i = 0; i < data.length; i++) {
          let payments = data[i].payments;
          for (let j = 0; j < payments.length; j++) {
            if (payments[j].refund) {
              refundThisMonth += payments[j].amount;
            } else {
              paymentThisMonth += payments[j].amount;
            }
          }
        }
      }
    } catch (e) {
      console.log(e);
    }
    setTotalPaymentThisMonth(paymentThisMonth);
    setTotalRefundThisMonth(refundThisMonth);
    setLoadingTotalThisMonth(false);
  };

  const getLabelStatus = (item: any) => {
    let text = 'Chờ thanh toán';
    let bgColor = '#FFB703';
    let pad = '4px 12px';
    if (!item.refund && item.status == 1) {
      text = 'Đã thanh toán';
      bgColor = '#0050A6';
      pad = '4px 16px'
    } else if (item.refund && item.status == 1) {
      text = 'Đã hoàn tiền';
      bgColor = '#238832';
      pad = '4 17px'
    }
    return (
      <div style={{ display: 'flex' }}>
        <div style={{ padding: pad, color: '#fff', backgroundColor: bgColor, borderRadius: '4px',fontSize: '12px' }}>{text}</div>
      </div>
    );
  };

  const [rows, setRows] = useState<any>([]);
  useEffect(() => {
    let tmp = [];
    let histories = moneyState.payment_histories;
    for (let i = 0; i < histories.length; i++) {
      let payments = histories[i].payments;
      for (let j = 0; j < payments.length; j++) {
        tmp.push(payments[j]);
      }
    }
    setRows(tmp);
  }, [moneyState.payment_histories]);

  return (
    <div className={'Polaris-Custom'}>
      <Page
        //@ts-ignore
        title={<TitleBreadcrumbs breadcrumbs={[{ title: 'Lịch sử giao dịch', url: '' }]} />}
      >
        <Layout>
          <Layout.Section>
            <LegacyCard>
              <LegacyCard.Section>
                <Grid>
                  <Grid.Cell columnSpan={{ xs: 6, sm: 3, md: 3, lg: 4, xl: 4 }}>
                    <div
                      style={{
                        backgroundColor: '#eaf0f7',
                        padding: '20px 20px 0px 20px',
                        borderRadius: 8,
                      }}
                    >
                      <div
                        style={{
                          borderBottom: '3px solid #ffb703',
                          paddingBottom: 20,
                        }}
                      >
                        <LegacyStack vertical>
                          <LegacyStack.Item>
                            <Text as={'p'} variant={'bodyLg'} alignment={'center'}>
                              Số dư ví
                            </Text>
                          </LegacyStack.Item>
                          <Text as={'p'} variant={'headingLg'} alignment={'center'}>
                            {loadingTotalThisMonth ? (
                              <Spinner size={'small'} />
                            ) : (
                              formatMoney(moneyState.wallet?.cash ?? 0, 'VND')
                            )}
                          </Text>
                        </LegacyStack>
                      </div>
                    </div>
                  </Grid.Cell>
                  <Grid.Cell columnSpan={{ xs: 6, sm: 3, md: 3, lg: 4, xl: 4 }}>
                    <div
                      style={{
                        backgroundColor: '#eaf0f7',
                        padding: '20px 20px 0px 20px',
                        borderRadius: 8,
                      }}
                    >
                      <div
                        style={{
                          borderBottom: '3px solid #0050a6',
                          paddingBottom: 20,
                        }}
                      >
                        <LegacyStack vertical>
                          <Text as={'p'} variant={'bodyLg'} alignment={'center'}>
                            Chi tiêu trong tháng
                          </Text>
                          <Text as={'p'} variant={'headingLg'} alignment={'center'}>
                            {loadingTotalThisMonth ? (
                              <Spinner size={'small'} />
                            ) : (
                              formatMoney(totalPaymentThisMonth, 'VND')
                            )}
                          </Text>
                        </LegacyStack>
                      </div>
                    </div>
                  </Grid.Cell>
                  <Grid.Cell columnSpan={{ xs: 6, sm: 3, md: 3, lg: 4, xl: 4 }}>
                    <div
                      style={{
                        backgroundColor: '#eaf0f7',
                        padding: '20px 20px 0px 20px',
                        borderRadius: 8,
                      }}
                    >
                      <div
                        style={{
                          borderBottom: '3px solid #a91116',
                          paddingBottom: 20,
                        }}
                      >
                        <LegacyStack vertical>
                          <Text as={'p'} variant={'bodyLg'} alignment={'center'}>
                            Tiền nạp trong tháng
                          </Text>
                          <Text as={'p'} variant={'headingLg'} alignment={'center'}>
                            {loadingTotalThisMonth ? (
                              <Spinner size={'small'} />
                            ) : (
                              formatMoney(totalRefundThisMonth, 'VND')
                            )}
                          </Text>
                        </LegacyStack>
                      </div>
                    </div>
                  </Grid.Cell>
                </Grid>
              </LegacyCard.Section>
            </LegacyCard>
          </Layout.Section>
          <Layout.Section>
            <LegacyCard
              title={
                <LegacyStack distribution={'center'} alignment={'center'}>
                  <LegacyStack.Item fill>
                    <Text as={'h2'} variant={'bodyLg'} fontWeight={'semibold'}>
                      Lịch sử giao dịch
                    </Text>
                  </LegacyStack.Item>
                  <LegacyStack.Item>
                    <LegacyStack alignment={'trailing'}>
                      <div className={'TextField--Mask'}>
                        <div className='Polaris-Labelled__LabelWrapper'>
                          <div className='Polaris-Label'>
                            <label
                              id={'PolarisTextField6Label'}
                              htmlFor={'PolarisTextField6'}
                              className='Polaris-Label__Text'
                            ></label>
                          </div>
                        </div>
                        <div className='Polaris-Connected'>
                          <div className='Polaris-Connected__Item Polaris-Connected__Item--primary'>
                            <div className='Polaris-TextField Polaris-TextField--hasValue'>
                              <MaskedInput
                                mask={[
                                  /\d/,
                                  /\d/,
                                  '/',
                                  /\d/,
                                  /\d/,
                                  '/',
                                  /\d/,
                                  /\d/,
                                  /\d/,
                                  /\d/,
                                  ' ',
                                  '-',
                                  ' ',
                                  /\d/,
                                  /\d/,
                                  '/',
                                  /\d/,
                                  /\d/,
                                  '/',
                                  /\d/,
                                  /\d/,
                                  /\d/,
                                  /\d/,
                                ]}
                                className='Polaris-TextField__Input'
                                placeholder='dd/mm/yyyy - dd/mm/yyyy'
                                guide
                                value={dateInputValue}
                                placeholderChar={'_'}
                                keepCharPositions
                                id='PolarisTextField6'
                                onChange={(event: any) => {
                                  setDateInputValue(event.target.value);
                                  goToPage(1);
                                }}
                                aria-labelledby={'PolarisTextField6Label'}
                                aria-invalid={false}
                              />
                              <div className='Polaris-TextField__Backdrop' />
                              <div className='Polaris-TextField__Suffix'>
                                <Popover
                                  fluidContent
                                  active={dateRangeActive}
                                  activator={
                                    <Button
                                      onClick={() => {
                                        setRangeSelected([]);
                                        setDateRangeActive(!dateRangeActive);
                                        let splitDate = dateInputValue.split(' - ');
                                        let startDateStr = splitDate[0];
                                        let endDateStr = splitDate[1];
                                        console.log(moment(startDateStr, 'DD/MM/yyyy').toDate());
                                        if (
                                          moment(startDateStr, 'DD/MM/yyyy').isValid() &&
                                          moment(endDateStr, 'DD/MM/yyyy').isValid()
                                        ) {
                                          setSelectedDates({
                                            start: moment(startDateStr, 'DD/MM/yyyy').toDate(),
                                            end: moment(endDateStr, 'DD/MM/yyyy').toDate(),
                                          });
                                          setDate({
                                            month: moment(endDateStr, 'DD/MM/yyyy').month(),
                                            year: moment(endDateStr, 'DD/MM/yyyy').year(),
                                          });
                                        }
                                      }}
                                      plain
                                      icon={PolarisIcons.CalendarMajor}
                                    />
                                  }
                                  onClose={() => setDateRangeActive(false)}
                                >
                                  <div className='Custom-DatePicker'>
                                    <div className='date_range'>
                                      <div className='pre_option'>
                                        <div className='list_option'>
                                          <div className='list_content'>
                                            <OptionList
                                              title=''
                                              onChange={(selected) => {
                                                setRangeSelected(selected);
                                                if (selected[0] == 'today') {
                                                  setSelectedDates({
                                                    start: moment().toDate(),
                                                    end: moment().toDate(),
                                                  });
                                                  setDate({ month: moment().month(), year: moment().year() });
                                                } else if (selected[0] == 'yesterday') {
                                                  setSelectedDates({
                                                    start: moment().subtract(1, 'day').toDate(),
                                                    end: moment().subtract(1, 'day').toDate(),
                                                  });
                                                  setDate({
                                                    month: moment().subtract(1, 'day').month(),
                                                    year: moment().subtract(1, 'day').year(),
                                                  });
                                                } else if (selected[0] == 'last_7_days') {
                                                  setSelectedDates({
                                                    start: moment().subtract(7, 'day').toDate(),
                                                    end: moment().toDate(),
                                                  });
                                                  setDate({
                                                    month: moment().subtract(7, 'day').month(),
                                                    year: moment().subtract(7, 'day').year(),
                                                  });
                                                } else if (selected[0] == 'last_30_days') {
                                                  setSelectedDates({
                                                    start: moment().subtract(30, 'day').toDate(),
                                                    end: moment().toDate(),
                                                  });
                                                  setDate({
                                                    month: moment().subtract(30, 'day').month(),
                                                    year: moment().subtract(30, 'day').year(),
                                                  });
                                                } else if (selected[0] == 'last_90_days') {
                                                  setSelectedDates({
                                                    start: moment().subtract(90, 'day').toDate(),
                                                    end: moment().toDate(),
                                                  });
                                                  setDate({
                                                    month: moment().subtract(90, 'day').month(),
                                                    year: moment().subtract(90, 'day').year(),
                                                  });
                                                }
                                              }}
                                              options={[
                                                { value: 'today', label: 'Hôm nay' },
                                                { value: 'yesterday', label: 'Hôm qua' },
                                                { value: 'last_7_days', label: '7 ngày trước' },
                                                { value: 'last_30_days', label: '30 ngày trước' },
                                                { value: 'last_90_days', label: '90 ngày trước' },
                                              ]}
                                              selected={rangeSelected}
                                            />
                                          </div>
                                        </div>
                                      </div>
                                      <div className='pick_date'>
                                        <DatePicker
                                          disableDatesAfter={new Date()}
                                          weekStartsOn={1}
                                          month={month}
                                          year={year}
                                          onChange={setSelectedDates}
                                          onMonthChange={handleMonthChange}
                                          selected={selectedDates}
                                          multiMonth
                                          allowRange
                                        />
                                      </div>
                                    </div>
                                    <div className='actions'>
                                      <LegacyStack distribution={'trailing'}>
                                        <Button onClick={() => setDateRangeActive(false)}>Đóng</Button>
                                        <Button
                                          primary
                                          onClick={() => {
                                            let startDate = selectedDates.start;
                                            let endDate = selectedDates.end;
                                            let startDateStr = moment(startDate).format('DD/MM/yyyy');
                                            let endDateStr = moment(endDate).format('DD/MM/yyyy');
                                            setDateInputValue(`${startDateStr} - ${endDateStr}`);
                                            goToPage(1);
                                            setDateRangeActive(false);
                                          }}
                                        >
                                          Áp dụng
                                        </Button>
                                      </LegacyStack>
                                    </div>
                                  </div>
                                </Popover>
                              </div>
                            </div>
                          </div>
                        </div>
                      </div>
                      <Autocomplete
                        options={paymentTypeOptions}
                        selected={[paymentType]}
                        onSelect={(selected) => {
                          setPaymentType(selected[0]);
                          goToPage(1);
                          updateUrl('type', selected[0]);
                          const selectedText = selected.map((selectedItem) => {
                            const matchedOption = paymentTypeOptions.find((option) => {
                              return option['value'] == selectedItem;
                            });
                            if (matchedOption) {
                              return `${matchedOption['label']}`;
                            }
                            return '';
                          });
                          setSearchPaymentType(selectedText[0]);
                        }}
                        textField={
                          <Autocomplete.TextField
                            value={searchPaymentType}
                            onChange={(value) => {
                              setSearchPaymentType(value);
                            }}
                            suffix={<Icon source={PolarisIcons.CaretDownMinor} />}
                            autoComplete={'off'}
                            label={''}
                          />
                        }
                      />
                    </LegacyStack>
                  </LegacyStack.Item>
                </LegacyStack>
              }
            >
              <LegacyCard.Section>
                {moneyState.payment_histories_loading ? (
                  <LegacyStack distribution={'center'}>
                    <Spinner size={'small'} />
                  </LegacyStack>
                ) : (
                  <div className={'Payment_History_Data IndexTable--NoSticky'}>
                    <IndexTable
                      selectable={false}
                      loading={moneyState.payment_histories_loading}
                      headings={[
                        { title: '' },
                        { title: 'Mã giao dịch' },
                        { title: 'Số tiền' },
                        { title: 'Thời gian' },
                        { title: 'Nội dung' },
                        { title: 'Trạng thái' },
                      ]}
                      itemCount={rows.length}
                    >
                      {rows.map((item: any, index: number) => {
                        return (
                          <IndexTable.Row key={index} id={`${index}`} position={index}>
                            <IndexTable.Cell>{item.refund ? <IconRefund /> : <IconPayment />}</IndexTable.Cell>
                            <IndexTable.Cell>{item.refCode}</IndexTable.Cell>
                            <IndexTable.Cell>{formatMoney(item.amount, 'VND')}</IndexTable.Cell>
                            <IndexTable.Cell>{datetimeFormat(item.createdDate)}</IndexTable.Cell>
                            <IndexTable.Cell>
                              <div
                                style={{
                                  wordWrap: 'break-word',
                                  // maxWidth: 200,    
                                  whiteSpace: 'normal',
                                }}
                              >
                                {item.description}
                              </div>
                            </IndexTable.Cell>
                            <IndexTable.Cell>
                              <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center' }}>
                                {getLabelStatus(item)}
                              </div>
                            </IndexTable.Cell>
                          </IndexTable.Row>
                        );
                      })}
                    </IndexTable>
                  </div>
                )}
              </LegacyCard.Section>

              {moneyState.payment_histories_length ? (
                <LegacyCard.Section>
                  <NumberPagination
                    pageSize={limit}
                    totalItems={moneyState.payment_histories_length}
                    currentPage={page}
                    goToPage={(pageNumber) => goToPage(pageNumber)}
                  />
                </LegacyCard.Section>
              ) : null}
            </LegacyCard>
          </Layout.Section>
        </Layout>
      </Page>
    </div>
  );
};

export default PaymentHistory;

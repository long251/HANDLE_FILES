import React, { useCallback, useEffect, useRef, useState } from 'react';
import Page from '@/components/Page';
import { useLocation, useNavigate } from 'react-router-dom';
import type { FormProps, PaginationProps, TableProps } from 'antd';
import {
  AutoComplete,
  Button,
  ConfigProvider,
  DatePicker,
  Form,
  Input,
  Modal,
  Pagination,
  Select,
  Table,
} from 'antd';
import dayjs, { Dayjs } from 'dayjs';
import randomNumber from '@/helpers/randomNumber';
import { useDispatch, useSelector } from 'react-redux';
import { AppDispatch, RootState } from '@/store/store';
import { apiClient } from '@/utils/api';
import { debounce } from 'lodash';
import { CustomerExpenseAction } from '@/store/reducers/CustomerExpenseReducer';
import { DashboardAction } from '@/store/reducers/DashboardReducer';
import { toast } from 'react-toastify';

import AddNewIcon from '@/components/Icon/AddNewIcon';
import SearchIcon from '@/components/Icon/SearchIcon';
import ChevronDown from '@/components/Icon/ChevronDownIcon';
import DatePickerIconWithoutBackground from '@/components/Icon/DatePickerIconWithoutBackground';
import SuccessIcon from '@/components/Icon/SuccessIcon';
import Spinner from '@/components/Spinner';
import NoData from '@/components/NoData';
import ErrorIcon from '@/components/Icon/ErrorIcon';

type ColumnsType<T extends object> = TableProps<T>['columns'];

interface AddNewExpense {
  customerName: string;
  expenseType: string;
  amount: string;
  expenseContent: string;
}

// config selection row của antd viết
const rowSelection = {
  onChange: (selectedRowKeys: React.Key[], selectedRows: any[]) => {
    console.log(
      `selectedRowKeys: ${selectedRowKeys}`,
      'selectedRows: ',
      selectedRows,
    );
  },
};

// config render của Pagination
const itemRender: PaginationProps['itemRender'] = (
  _,
  type,
  originalElement,
) => {
  if (type === 'prev') {
    return (
      <a role='button' tabIndex={0} className='text-size-14'>
        Prev
      </a>
    );
  }
  if (type === 'next') {
    return (
      <a role='button' tabIndex={0} className='text-size-14'>
        Next
      </a>
    );
  }
  return originalElement;
};

const { RangePicker } = DatePicker;
const { TextArea } = Input;

const CustomerExpenseList: React.FC = () => {
  const navigate = useNavigate();
  const location = useLocation();

  const [openModal, setOpenModal] = useState(false);
  const [form] = Form.useForm();
  const [accountId, setAccountId] = useState('');
  const [selectedAccountId, setSelectedAccountId] = useState<string>('');
  const [selectedExpenseTypeId, setSelectedExpenseTypeId] = useState<number>(0);
  const [searchKeyword, setSearchKeyword] = useState('');
  const [currentPage, setCurrentPage] = useState(1);
  const [pageSize, setPageSize] = useState(10);
  const [selectedExpenseType, setSelectedExpenseType] = useState<
    string | undefined
  >('');
  const [selectedModalExpenseTypeId, setSelectedModalExpenseTypeId] =
    useState<number>(0);

  const today = dayjs();
  const oneMonthsAgo = dayjs().subtract(1, 'month');
  const [selectedDates, setSelectedDates] = useState<
    [Dayjs | null, Dayjs | null]
  >([oneMonthsAgo, today]);

  const CustomerExpenseState = useSelector(
    (state: RootState) => state.Customer,
  );
  const DashboardState = useSelector((state: RootState) => state.Dashboard);
  const dispatch = useDispatch<AppDispatch>();

  const debounceFetchData = useCallback(
    debounce((data: any) => {
      dispatch(CustomerExpenseAction.fetchData(data));
    }, 300),
    [],
  );
  const debounceSearchDataByCustomerName = useCallback(
    debounce((data: any) => {
      dispatch(CustomerExpenseAction.searchExpenseByCustomerName(data));
    }, 300),
    [],
  );
  // update url, xử lý F5
  const searchParams = new URLSearchParams(location.search);
  const updateUrl = (key: string, value: string) => {
    searchParams.set(key, value);
    navigate({ search: searchParams.toString() });
  };

  const testRef = useRef(null);

  useEffect(() => {
    
    const pageParam: string = searchParams.get('page') ?? '1';
    setCurrentPage(Number(pageParam));

    const pageSizeParam: string = searchParams.get('pageSize') ?? '10';
    setPageSize(Number(pageSizeParam));

    const expenseTypeParam: string = searchParams.get('expenseType') ?? '0';
    setSelectedExpenseTypeId(Number(expenseTypeParam));

    const keywordSearchParams: string = searchParams.get('keywordSearch') ?? '';
    setSearchKeyword(keywordSearchParams);
    
    testRef.current.input.value = "123123";
    let el = document.querySelector("#test");

    setTimeout(function() {
      el.value = keywordSearchParams;
      // testRef.current.input.value = "123123";
    }, 1000);

    const fromDateParams = searchParams.get('fromDate');
    const toDateParams = searchParams.get('toDate');
    // kiểm tra chuyển đổi thành Dayjs
    const newFromDate = fromDateParams ? dayjs(fromDateParams) : oneMonthsAgo;
    const newToDate = toDateParams ? dayjs(toDateParams) : today;

    setSelectedDates([newFromDate, newToDate]);

    if (selectedDates[0] && selectedDates[1]) {
      debounceFetchData({
        accountId: '',
        costsType: Number(expenseTypeParam),
        search: keywordSearchParams,
        fromDate: newFromDate.toISOString(),
        toDate: newToDate.toISOString(),
        pageIndex: Number(pageParam),
        pageSize: Number(pageSizeParam),
      });
    }
  }, [location]);

  useEffect(() => {
    dispatch(CustomerExpenseAction.fetchExpenseType(null));
    dispatch(DashboardAction.fetchData());
  }, []);

  // các hàm đóng mở modal, drawer, etc
  // hàm mở chi tiết chi phí xem nhanh
  // const showView = (record: any) => {
  //   setCurrentRecord(record);
  //   setOpenViewModal(true);
  //   setOpen(true);
  // };
  // // hàm đóng chi tiết chi phí xem nhanh
  // const closeView = () => {
  //   setOpenViewModal(false);
  //   setOpen(false);
  //   setCurrentRecord(null);
  // };
  // hàm mở modal tạo mới khiếu nại
  const showModal = () => {
    setOpenModal(true);
  };

  // lấy danh sách khách hàng
  const expenseDataCustomerNameOptions =
    CustomerExpenseState.search_expense.map((item: any) => ({
      label: `${item.fullname} [${item.username}]`,
      value: `${item.fullname} [${item.username}]`,
      accountId: item.accountId,
    }));
  // search theo danh sách khách hàng
  const handleSearchByCustomerName = (value: string) => {
    if (value != '') {
      debounceSearchDataByCustomerName({
        keyword: value,
      });
    } else if (selectedDates[0] && selectedDates[1]) {
      setSelectedAccountId('');
      setCurrentPage(1);
      const payload = {
        accountId: '',
        costsType: selectedExpenseTypeId,
        search: searchKeyword,
        fromDate: selectedDates[0].toISOString(),
        toDate: selectedDates[1].toISOString(),
        pageIndex: 1,
        pageSize: pageSize,
      };
      debounceFetchData(payload);
    }
  };
  const handleSelectSearchByCustomerName = (id: any) => {
    setSelectedAccountId(id);
    setCurrentPage(1);
    updateUrl('page', '1');
    if (selectedDates[0] && selectedDates[1]) {
      const payload = {
        accountId: id,
        costsType: selectedExpenseTypeId,
        search: searchKeyword,
        fromDate: selectedDates[0].toISOString(),
        toDate: selectedDates[1].toISOString(),
        pageIndex: 1,
        pageSize: pageSize,
      };
      debounceFetchData(payload);
    }
  };

  // search theo thời gian
  const handleSearchExpenseByTime = (
    values: [Dayjs | null, Dayjs | null] | null,
  ) => {
    if (!values || !values[0] || !values[1]) {
      setSelectedDates([oneMonthsAgo, today]);
      updateUrl('fromDate', `${oneMonthsAgo}`);
      updateUrl('toDate', `${today}`);
      updateUrl('page', '1');
      setCurrentPage(1);
    } else {
      setSelectedDates(values);
      setCurrentPage(1);
      updateUrl('fromDate', `${values[0]}`);
      updateUrl('toDate', `${values[1]}`);
      updateUrl('page', '1');
      if (selectedDates[0] && selectedDates[1]) {
        const payload = {
          accountId: selectedAccountId,
          costsType: selectedExpenseTypeId,
          search: searchKeyword,
          fromDate: values[0].toISOString(),
          toDate: values[1].toISOString(),
          pageIndex: 1,
          pageSize: pageSize,
        };
        debounceFetchData(payload);
      }
    }
  };

  // option loại chi phí
  const expenseTypeOptionsWithoutAll = CustomerExpenseState.expense_type.map(
    (item: any) => ({
      label: item.cdName,
      value: item.cdName,
      idVal: item.cdVal,
    }),
  );
  const expenseTypeOptionsWithAll = [
    {
      label: 'Tất cả',
      value: 'Tất cả',
      idVal: 0,
    },
    ...expenseTypeOptionsWithoutAll,
  ];
  // search theo loại chi phí
  const handleSelectSearchByExpenseType = (value: string, id: any) => {
    setSelectedExpenseTypeId(id);
    setSelectedExpenseType(value);
    updateUrl('expenseType', `${id}`);
    updateUrl('page', '1');
    setCurrentPage(1);
    if (selectedDates[0] && selectedDates[1]) {
      const payload = {
        accountId: selectedAccountId,
        costsType: id,
        search: searchKeyword,
        fromDate: selectedDates[0].toISOString(),
        toDate: selectedDates[1].toISOString(),
        pageIndex: 1,
        pageSize: pageSize,
      };
      debounceFetchData(payload);
    }
  };
  // cập nhật loại chi phí
  useEffect(() => {
    const data = CustomerExpenseState.expense_type;
    const urlExpenseTypeId = searchParams.get('expenseType');
    if (data.length && urlExpenseTypeId) {
      const newValue = expenseTypeOptionsWithAll.find(
        (option) => option.idVal == urlExpenseTypeId,
      )?.value;
      setSelectedExpenseType(newValue);
    } else {
      setSelectedExpenseType(expenseTypeOptionsWithAll[0].value);
    }
  }, [CustomerExpenseState.expense_type, location.search]);

  // search theo keyword
  const handleSearchByKeyword = (keyword: string) => {
    if (keyword.trim() != '') {
      setSearchKeyword(keyword.trim());
      setCurrentPage(1);
      updateUrl('page', '1');
      updateUrl('keywordSearch', `${keyword.trim()}`);
      if (selectedDates[0] && selectedDates[1]) {
        const payload = {
          accountId: selectedAccountId,
          costsType: selectedExpenseTypeId,
          search: keyword.trim(),
          fromDate: selectedDates[0].toISOString(),
          toDate: selectedDates[1].toISOString(),
          pageIndex: 1,
          pageSize: pageSize,
        };
        debounceFetchData(payload);
      }
    } else {
      setSearchKeyword('');
      setCurrentPage(1);
      updateUrl('page', '1');
      updateUrl('keywordSearch', '');
      if (selectedDates[0] && selectedDates[1]) {
        const payload = {
          accountId: selectedAccountId,
          costsType: selectedExpenseTypeId,
          search: searchKeyword,
          fromDate: selectedDates[0].toISOString(),
          toDate: selectedDates[1].toISOString(),
          pageIndex: currentPage,
          pageSize: pageSize,
        };
        debounceFetchData(payload);
      }
    }
  };

  // hàm đóng modal và gửi tạo chi phí lên BE
  const handleSendCustomerExpense: FormProps<AddNewExpense>['onFinish'] =
    async (values) => {
      try {
        const payload = {
          accountId: accountId,
          costsType: selectedModalExpenseTypeId,
          ccDetails: values.expenseContent,
          amount: values.amount,
        };
        const response = await apiClient.post(
          '/api/Feedback/AddCustomerCosts',
          payload,
        );
        if (response.data.status) {
          if (selectedDates[0] && selectedDates[1]) {
            setSelectedAccountId('');
            setCurrentPage(1);
            const payload = {
              accountId: accountId,
              costsType: selectedExpenseTypeId,
              search: searchKeyword,
              fromDate: selectedDates[0].toISOString(),
              toDate: selectedDates[1].toISOString(),
              pageIndex: 1,
              pageSize: pageSize,
            };
            debounceFetchData(payload);
          }
          toast.success('Tạo chi phí thành công', {
            icon: <SuccessIcon />,
            autoClose: 2000,
          });
        } else {
          toast.error('Tạo chi phí thất bại', {
            icon: <ErrorIcon />,
            autoClose: 2000,
          });
        }
      } catch (e) {
        toast.error('Tạo chi phí thất bại', {
          icon: <ErrorIcon />,
          autoClose: 2000,
        });
      }
      form.resetFields();
      setOpenModal(false);
    };
  // hàm đóng nhưng không submit
  const handleCanceled = () => {
    form.resetFields();
    setOpenModal(false);
  };

  // columns của bảng
  const columnsTableFields: ColumnsType<any> = [
    {
      title: 'Mã chi phí',
      dataIndex: 'expenseCode',
      key: randomNumber(),
      align: 'center',
      render: (_: any, record: any) => (
        <div className='text-size-14'>
          <span>{record.costsType}</span>
        </div>
      ),
      className: 'min-max-width-180',
    },
    {
      title: 'Loại chi phí',
      dataIndex: 'expenseType',
      key: randomNumber(),
      align: 'center',
      render: (_: any, record: any) => (
        <div className='text-size-14'>
          <span>{record.costsTypeName}</span>
        </div>
      ),
      className: 'min-max-width-148',
    },
    {
      title: 'Mã KH',
      dataIndex: 'customerCode',
      key: randomNumber(),
      align: 'center',
      render: (_: any, record: any) => (
        <div className='text-size-14'>
          <span>{record.customerCode}</span>
        </div>
      ),
      className: 'min-max-width-100',
    },
    {
      title: 'Tên khách hàng',
      dataIndex: 'customerName',
      key: randomNumber(),
      align: 'center',
      render: (_: any, record: any) => (
        <div className='text-size-14'>
          <span>{record.customerName}</span>
        </div>
      ),
      className: 'min-max-width-218 ',
    },
    {
      title: 'Nội dung chi',
      dataIndex: 'expenseContent',
      key: randomNumber(),
      render: (_: any, record: any) => (
        <div className='text-size-14'>
          <span>{record.details}</span>
        </div>
      ),
      className: 'min-max-width-260',
    },
    {
      title: 'Số tiền',
      dataIndex: 'amount',
      key: randomNumber(),
      align: 'right',
      render: (_: any, record: any) => (
        // <div className='text-size-14'>
        //   <span>{record.amount}</span>
        // </div>
        <div className='text-size-14'>
          {Number(record.amount).toLocaleString('vi-VN').replace(/\./g, ',') +
            'đ'}
        </div>
      ),
      className: 'min-max-width-160',
    },
    {
      title: 'Mã tham chiếu',
      dataIndex: 'referenceCode',
      key: randomNumber(),
      align: 'center',
      render: (_: any, record: any) => (
        <div className='text-size-14'>
          <span>{record.refNo}</span>
        </div>
      ),
      className: 'min-max-width-200',
    },
    {
      title: 'Ngày tạo',
      dataIndex: 'expenseTime',
      key: randomNumber(),
      align: 'center',
      render: (_: any, record: any) => (
        <div className='text-size-14'>
          <span>{record.createdDate}</span>
        </div>
      ),
      className: 'min-max-width-170',
    },
    {
      title: 'Người tạo',
      dataIndex: 'expenseCreator',
      key: randomNumber(),
      align: 'center',
      render: (_: any, record: any) => (
        <div
          className={`text-size-14 ${record.createdByName === 'System' ? 'base-red-not-important' : ''}`}>
          <span>{record.createdByName}</span>
        </div>
      ),
      className: 'min-max-width-170',
    },
    // {
    //   title: 'Action',
    //   dataIndex: 'action',
    //   key: randomNumber(),
    //   align: 'center',
    //   fixed: 'right',
    //   render: (_: any, record: any) => {
    //     // Tạo menu items bên trong render
    //     const items: MenuProps['items'] = [
    //       {
    //         label: (
    //           <Link className='link-wrapper' to={'#'}>
    //             <div className='dropdown-wrap'>
    //               <div className='icon-styles color01-not-important'>
    //                 <EyeIcon />
    //               </div>
    //               <span className='text-size-13 color01-not-important'>
    //                 Xem chi tiết chi phí
    //               </span>
    //             </div>
    //           </Link>
    //         ),
    //         key: randomNumber(),
    //       },
    //       // {
    //       //   label: (
    //       //     <div className='dropdown-wrap'>
    //       //       <div className='icon-styles color01-not-important'>
    //       //         <TrackNTraceIcon />
    //       //       </div>
    //       //       <span className='text-size-13 color01-not-important'>
    //       //         Track & Trace
    //       //       </span>
    //       //     </div>
    //       //   ),
    //       //   key: randomNumber(),
    //       // },
    //       // {
    //       //   label: (
    //       //     <div
    //       //       onClick={() => {
    //       //         copyToClipboard(record.expenseCode);
    //       //       }}
    //       //       className='dropdown-wrap'>
    //       //       <div className='icon-styles color01-not-important'>
    //       //         <CopyIcon />
    //       //       </div>
    //       //       <span className='text-size-13 color01-not-important'>
    //       //         Sao chép chi phí
    //       //       </span>
    //       //     </div>
    //       //   ),
    //       //   key: randomNumber(),
    //       // },
    //       // {
    //       //   label: (
    //       //     <div className='dropdown-wrap'>
    //       //       <div className='icon-styles color01-not-important'>
    //       //         <PrintIcon />
    //       //       </div>
    //       //       <span className='text-size-13 color01-not-important'>
    //       //         Xem thử bản in
    //       //       </span>
    //       //     </div>
    //       //   ),
    //       //   key: randomNumber(),
    //       // },
    //       // {
    //       //   label: (
    //       //     <div className='dropdown-wrap'>
    //       //       <div className='icon-styles color01-not-important'>
    //       //         <RefreshIcon />
    //       //       </div>
    //       //       <span className='text-size-13 color01-not-important'>
    //       //         Tải lại vận đơn
    //       //       </span>
    //       //     </div>
    //       //   ),
    //       //   key: randomNumber(),
    //       // },
    //       // {
    //       //   label: (
    //       //     <div className='dropdown-wrap'>
    //       //       <div className='icon-styles color01-not-important'>
    //       //         <RefreshInvoiceIcon />
    //       //       </div>
    //       //       <span className='text-size-13 color01-not-important'>
    //       //         Tải lại invoice vận đơn
    //       //       </span>
    //       //     </div>
    //       //   ),
    //       //   key: randomNumber(),
    //       // },
    //       // {
    //       //   label: (
    //       //     <div className='dropdown-wrap'>
    //       //       <div className='icon-styles color01-not-important'>
    //       //         <RecycleBinIcon />
    //       //       </div>
    //       //       <span className='text-size-13 color01-not-important'>
    //       //         Yêu cầu hủy đơn
    //       //       </span>
    //       //     </div>
    //       //   ),
    //       //   key: randomNumber(),
    //       // },
    //     ];

    //     return (
    //       <div className='action-container'>
    //         <ConfigProvider
    //           theme={{
    //             components: {
    //               Button: {
    //                 colorText: '#0B3558',
    //                 fontSize: 12,
    //                 paddingInline: 12,
    //                 textHoverBg: 'none',
    //               },
    //             },
    //           }}>
    //           <Dropdown.Button
    //             onClick={() => showView(record)}
    //             icon={<ChevronDown />}
    //             menu={{ items }}
    //             trigger={['click']}
    //             size='middle'>
    //             <div className='button-view-container'>
    //               <EyeIcon />
    //               <span>View</span>
    //             </div>
    //           </Dropdown.Button>
    //         </ConfigProvider>
    //       </div>
    //     );
    //   },
    //   className: 'min-max-width-160',
    // },
  ];

  // hàm xử lý của pagination (có thể sẽ thay đổi hoặc sửa đổi sau khi ghép api)
  // const currentData = dataTableExpense.slice(
  //   (currentPage - 1) * pageSize,
  //   currentPage * pageSize,
  // );

  // Hàm xử lý khi thay đổi số lượng hàng hiển thị trên mỗi trang
  const handlePageSizeChange = (value: string) => {
    setPageSize(parseInt(value));
    setCurrentPage(1); // Reset về trang 1 khi thay đổi page size
    nextPage(1, parseInt(value));
    updateUrl('page', '1');
  };

  const nextPage = (page: number, pageSize: number) => {
    setCurrentPage(page);
    updateUrl('page', `${page}`);
    updateUrl('pageSize', `${pageSize}`);
    if (selectedDates[0] && selectedDates[1]) {
      const payload = {
        accountId: selectedAccountId,
        costsType: selectedExpenseTypeId,
        search: searchKeyword,
        fromDate: selectedDates[0].toISOString(),
        toDate: selectedDates[1].toISOString(),
        pageIndex: page,
        pageSize: pageSize,
      };
      debounceFetchData(payload);
    }
  };

  // apply vào tabs
  //   const itemsComplaintList: TabsProps['items'] = [
  //     {
  //       key: '1',
  //       label: (
  //         <div className='order-count-container'>
  //           <span className='margin-right-8'>Đang xử lý</span>
  //           <Count
  //             count={dataTableExpense.length}
  //             className='text-size-10 order-count-styles'
  //           />
  //         </div>
  //       ),
  //     },
  //     {
  //       key: '2',
  //       label: (
  //         <div className='order-count-container'>
  //           <span className='margin-right-8'>Chờ duyệt</span>
  //           <Count count={0} className='text-size-10 order-count-styles' />
  //         </div>
  //       ),
  //     },
  //     {
  //       key: '3',
  //       label: (
  //         <div className='order-count-container'>
  //           <span className='margin-right-8'>Đã xử lý</span>
  //           <Count count={4} className='text-size-10 order-count-styles' />
  //         </div>
  //       ),
  //     },
  //   ];

  // switch case của table và dữ liệu, 1 bảng dùng chung cho 3 tabs
  //   const [data, setData] = useState<any[]>(dataTableExpense);
  //   const [columns, setColumns] = useState(columnsTableFields1);
  //   useEffect(() => {
  //     switch (activeKey) {
  //       case '1':
  //         setData(dataTableExpense);
  //         setColumns(columnsTableFields1);
  //         break;
  //       case '2':
  //         setData(dataTableExpense);
  //         setColumns(columnsTableFields1);
  //         break;
  //       case '3':
  //         setData(dataTableExpense);
  //         setColumns(columnsTableFields1);
  //         break;
  //     }
  //   }, [activeKey]);

  return (
    <>
      <Page
        title={['Danh sách chi']}
        breadcrumbs={[
          {
            title: 'Dashboard',
            url: '/dashboard',
          },
          {
            title: 'Danh sách chi',
            url: '/customer-expense-list',
          },
        ]}
        actions={
          <ConfigProvider
            wave={{ disabled: true }}
            theme={{
              components: {
                Button: {
                  contentFontSize: 14,
                  paddingBlock: 12,
                  paddingInline: 16,
                  controlHeight: 40,
                  onlyIconSize: 16,
                  colorPrimary: '#0050A6',
                  borderRadius: 8,
                },
              },
            }}>
            <Button
              type='primary'
              onClick={showModal}
              style={{ border: 'none' }}
              icon={<AddNewIcon></AddNewIcon>}>
              Tạo chi phí
            </Button>
          </ConfigProvider>
        }>
        <div className='filters-container'>
          <div className='filters-wrap'>
            <div className='filters-wrapper'>
              <div className='filters-item'>
                <div className='text-size-14'>Thời gian</div>
                <div className='datepicker-wrapper margin-top-8'>
                  <ConfigProvider
                    theme={{
                      components: {
                        DatePicker: {
                          activeShadow: 'none',
                          fontSize: 14,
                          controlHeight: 40,
                          paddingBlock: 8,
                          paddingInline: 12,
                          borderRadius: 8,
                          colorBorder: '#d1d5db',
                        },
                      },
                    }}>
                    <RangePicker
                      allowClear={false}
                      placeholder={['MM/DD/YYYY', 'MM/DD/YYYY']}
                      style={{
                        width: '100%',
                      }}
                      format={'DD/MM/YYYY'}
                      suffixIcon={<DatePickerIconWithoutBackground />}
                      separator='-'
                      popupClassName={'datepicker-popup'}
                      value={selectedDates}
                      onChange={(values) => handleSearchExpenseByTime(values)}
                    />
                  </ConfigProvider>
                </div>
              </div>
            </div>
            <div className='search-wrap'>
              <div className='text-size-14'>Khách hàng</div>
              <div className='search-wrapper margin-top-8'>
                <div className='input-wrapper'>
                  <ConfigProvider
                    theme={{
                      components: {
                        Select: {
                          fontSize: 14,
                          controlHeight: 40,
                          borderRadius: 8,
                          colorBorder: '#d1d5db',
                          activeOutlineColor: 'unset',
                        },
                      },
                    }}>
                    <AutoComplete
                      allowClear
                      className='modal-icon-svg '
                      // suffixIcon={<SearchIcon />}
                      options={expenseDataCustomerNameOptions}
                      key='accountId'
                      style={{ width: '100%' }}
                      placeholder='Nhập tên khách hàng'
                      onSearch={(value) => handleSearchByCustomerName(value)}
                      onSelect={(value, option) => {
                        handleSelectSearchByCustomerName(option.accountId);
                      }}
                    />
                  </ConfigProvider>
                </div>
              </div>
            </div>
            <div className='filters-wrapper'>
              <div className='filters-item'>
                <div className='text-size-14'>Loại chi phí</div>
                <div className='select-wrapper margin-top-8'>
                  <ConfigProvider
                    theme={{
                      components: {
                        Select: {
                          fontSize: 14,
                          controlHeight: 40,
                          borderRadius: 8,
                          colorBorder: '#d1d5db',
                          activeOutlineColor: 'unset',
                        },
                      },
                    }}>
                    <Select
                      options={expenseTypeOptionsWithAll}
                      suffixIcon={<ChevronDown />}
                      style={{ width: '100%' }}
                      key={'idVal'}
                      placeholder='Tất cả'
                      defaultActiveFirstOption
                      value={selectedExpenseType}
                      defaultValue={expenseTypeOptionsWithAll[0].value}
                      onSelect={(value, option) => {
                        handleSelectSearchByExpenseType(value, option.idVal);
                      }}
                    />
                  </ConfigProvider>
                </div>
              </div>
            </div>
            <div className='search-wrap'>
              <div className='text-size-14'>Tìm kiếm</div>
              <div className='search-wrapper margin-top-8'>
                <div className='input-wrapper'>
                  <ConfigProvider
                    theme={{
                      components: {
                        Input: {
                          activeShadow: 'none',
                          fontSize: 14,
                          controlHeight: 40,
                          paddingBlock: 8,
                          paddingInline: 12,
                          borderRadius: 8,
                          colorBorder: '#d1d5db',
                        },
                      },
                    }}>
                    <Input
                    id='test'
                    ref={testRef}
                      onPressEnter={(event) =>
                        handleSearchByKeyword(
                          (event.target as HTMLInputElement).value,
                        )
                      }
                      onBlur={(event) => {
                        const value: string = (event.target as HTMLInputElement).value;
                        if (value != searchKeyword) {
                          handleSearchByKeyword(value);
                        }
                      }}
                      suffix={<SearchIcon />}
                      placeholder='Nhập nội dung tìm kiếm'
                    />
                    {/* <Input
          id='test'
          onPressEnter={(event) => {
            const value = $(event.target).val();
            handleSearchByKeyword(value);
          }}
          onBlur={(event) => {
            const value: string = $(event.target).val();
            if (value !== searchKeyword) {
              handleSearchByKeyword(value);
            }
          }}
          suffix={<SearchIcon />}
          placeholder='Nhập nội dung tìm kiếm'
        /> */}

                  </ConfigProvider>
                </div>
              </div>
            </div>
          </div>
        </div>
        <div className='table-tracking-order-container'>
          {/* <ConfigProvider
            theme={{
              components: {
                Tabs: {
                  cardBg: '#fff',
                  itemColor: '#0B3558',
                  itemSelectedColor: '#0B3558',
                  inkBarColor: '#0B3558',
                  titleFontSize: 16,
                  borderRadius: 8,
                  horizontalItemPadding: '0 18px 15px 18px',
                  horizontalItemGutter: 20,
                },
              },
            }}>
            <div className='table-tracking-order-tabs'>
              {data.length === 0 ? (
                <Tabs
                  defaultActiveKey='1'
                  items={itemsComplaintList}
                  activeKey={activeKey}
                  onChange={(key) => setActiveKey(key)}
                  style={{ width: '100%' }}></Tabs>
              ) : (
                <Tabs
                  defaultActiveKey='1'
                  items={itemsComplaintList}
                  activeKey={activeKey}
                  onChange={(key) => setActiveKey(key)}></Tabs>
              )}
              {data.length === 0 ? null : <FiltersTabsBar />}
            </div>
          </ConfigProvider> */}
          <div className='table-title-customer-expense'>
            <div className='table-title-wrapper text-size-20'>
              <span>
                Tổng số:{' '}
                <span className='text-weight-700'>
                  {CustomerExpenseState.data_length} khoản chi
                </span>
              </span>
              <span>|</span>
              <span>
                Tổng chi phí:{' '}
                <span className='text-weight-700'>
                  {DashboardState.data ? (
                    <>
                      {DashboardState.data.TotalCosts > 0
                        ? `${Number(DashboardState.data.TotalCosts)
                            .toLocaleString('vi-VN')
                            .replace(/\./g, ',')}đ`
                        : '0đ'}
                    </>
                  ) : (
                    '0đ'
                  )}
                </span>
              </span>
            </div>
          </div>
          {/* <div className='filters-tabsbar-wrap'>
            <FiltersTabsBar />
          </div> */}
          <div className='table-data-container'>
            <div className='table-data-wrap'>
              <ConfigProvider
                theme={{
                  components: {
                    Table: {
                      headerColor: '#FFF',
                      borderColor: '#A0ACBE',
                      headerBg: '#0B3558',
                      cellPaddingBlock: 11,
                      cellPaddingInline: 8,
                      headerBorderRadius: 0,
                    },
                    Checkbox: {
                      fontSize: 16,
                      // colorPrimary: '#0B3558',
                      controlInteractiveSize: 20,
                    },
                  },
                }}>
                <Table
                  rowSelection={{
                    ...rowSelection,
                    columnWidth: 52,
                  }}
                  dataSource={CustomerExpenseState.data}
                  columns={columnsTableFields}
                  rowKey='id'
                  loading={{
                    spinning: CustomerExpenseState.data_loading,
                    indicator: <Spinner />,
                  }}
                  bordered={false}
                  pagination={false}
                  sticky={
                    CustomerExpenseState.data_loading ||
                    CustomerExpenseState.data.length <= 10
                      ? false
                      : { offsetHeader: 80 }
                  }
                  scroll={{ x: 'max-content' }}
                  locale={{
                    emptyText() {
                      return (
                        <>
                          {CustomerExpenseState.data.length === 0 &&
                          CustomerExpenseState.data_loading ? null : (
                            <NoData />
                          )}
                        </>
                      );
                    },
                  }}
                />
                <div className='table-footer-container'>
                  <div className='page-size-selector-container'>
                    <span className='text-size-13 color01-not-important'>
                      Hiển thị:
                    </span>
                    <ConfigProvider
                      theme={{
                        components: {
                          Select: {
                            controlHeight: 22,
                            colorIcon: '#0B3558',
                            colorText: '#0B3558',
                            showArrowPaddingInlineEnd: 15,
                          },
                        },
                      }}>
                      <Select
                        style={{ marginTop: 2 }}
                        variant='borderless'
                        // defaultValue='10'
                        value={pageSize.toString()}
                        suffixIcon={<ChevronDown />}
                        options={[
                          { value: '10', label: '10' },
                          { value: '20', label: '20' },
                          { value: '50', label: '50' },
                        ]}
                        onChange={(value) => handlePageSizeChange(value)}
                      />
                    </ConfigProvider>
                    <span className='text-size-13 color01-not-important'>
                      of {CustomerExpenseState.data_length} entries
                    </span>
                  </div>
                  <div className='pagination-container'>
                    <ConfigProvider
                      theme={{
                        components: {
                          Pagination: {
                            itemActiveBg: '#637591',
                            colorPrimary: '#fff',
                            colorPrimaryHover: '#fff',
                            borderRadius: 4,
                            itemSize: 40,
                          },
                        },
                      }}>
                      <Pagination
                        current={currentPage}
                        pageSize={pageSize}
                        onChange={(page, pageSize) => {
                          nextPage(page, pageSize);
                        }}
                        style={{ marginTop: 0 }}
                        disabled={CustomerExpenseState.data_loading}
                        total={CustomerExpenseState.data_length}
                        showSizeChanger={false}
                        itemRender={itemRender}
                        hideOnSinglePage={true}
                        showLessItems
                      />
                    </ConfigProvider>
                  </div>
                </div>
              </ConfigProvider>
            </div>
          </div>
        </div>
      </Page>
      <ConfigProvider
        theme={{
          components: {
            Form: {
              itemMarginBottom: 0,
              labelHeight: 40,
              verticalLabelPadding: 0,
            },
          },
        }}>
        <Modal
          rootClassName='modal-create-complaint-container'
          open={openModal}
          centered
          title={
            <span className='text-size-20 text-uppercase'>Tạo chi phí mới</span>
          }
          width={590}
          onCancel={handleCanceled}
          closable={false}
          footer={[null]}>
          <Form<AddNewExpense>
            requiredMark={false}
            colon={false}
            form={form}
            onFinish={handleSendCustomerExpense}
            name='Add New Customer Expense'
            labelCol={{ span: 7 }}
            wrapperCol={{ span: 17 }}
            autoComplete='off'>
            <div className='modal-content-container'>
              <div className='modal-content-form-up'>
                <div className='modal-form-items'>
                  <div className='modal-form-content'>
                    <ConfigProvider
                      theme={{
                        components: {
                          Select: {
                            fontSize: 14,
                            controlHeight: 40,
                            borderRadius: 4,
                            colorBorder: '#d1d5db',
                            activeOutlineColor: 'unset',
                          },
                        },
                      }}>
                      <Form.Item<AddNewExpense>
                        labelAlign='left'
                        label={
                          <span className='text-size-14'>
                            Khách hàng{' '}
                            <span className='base-red-not-important'>*</span>
                          </span>
                        }
                        name={'customerName'}
                        rules={[
                          {
                            required: true,
                            message: 'Vui lòng nhập tên khách hàng',
                          },
                          {
                            validator: (_, value) => {
                              // Kiểm tra nếu giá trị rỗng
                              if (!value) return Promise.resolve();
                              // Kiểm tra nếu giá trị không hợp lệ
                              const isValidCustomer =
                                expenseDataCustomerNameOptions.some(
                                  (option) => option.value == value,
                                );
                              return isValidCustomer
                                ? Promise.resolve()
                                : Promise.reject(
                                    new Error('Khách hàng không hợp lệ'),
                                  );
                            },
                          },
                        ]}>
                        <AutoComplete
                          className='modal-icon-svg '
                          // suffixIcon={<SearchIcon />}
                          allowClear
                          options={expenseDataCustomerNameOptions}
                          key='accountId'
                          style={{ width: '100%' }}
                          placeholder='Nhập tên khách hàng'
                          onSearch={(value) => {
                            if (value != '') {
                              debounceSearchDataByCustomerName({
                                keyword: value,
                              });
                            }
                          }}
                          onSelect={(value, option) => {
                            setAccountId(option.accountId);
                          }}
                        />
                      </Form.Item>
                    </ConfigProvider>
                  </div>
                </div>
                <div className='modal-form-items'>
                  <div className='modal-form-content'>
                    <ConfigProvider
                      theme={{
                        components: {
                          Select: {
                            activeOutlineColor: 'unset',
                            fontSize: 14,
                            controlHeight: 40,
                            borderRadius: 4,
                            colorBorder: '#d1d5db',
                          },
                        },
                      }}>
                      <Form.Item<AddNewExpense>
                        labelAlign='left'
                        label={
                          <span className='text-size-14'>
                            Loại chi phí{' '}
                            <span className='base-red-not-important'>*</span>
                          </span>
                        }
                        name={'expenseType'}
                        rules={[
                          {
                            required: true,
                            message: 'Vui lòng chọn loại chi phí',
                          },
                        ]}>
                        <Select
                          suffixIcon={<ChevronDown />}
                          style={{ width: '100%' }}
                          placeholder='Chọn loại chi phí'
                          options={expenseTypeOptionsWithoutAll}
                          onSelect={(value, options) => {
                            setSelectedModalExpenseTypeId(options.idVal);
                          }}
                        />
                      </Form.Item>
                    </ConfigProvider>
                  </div>
                </div>
                <div className='modal-form-items'>
                  <div className='modal-form-content'>
                    <ConfigProvider
                      theme={{
                        components: {
                          Input: {
                            activeShadow: 'none',
                            fontSize: 14,
                            controlHeight: 40,
                            paddingBlock: 8,
                            paddingInline: 12,
                            borderRadius: 4,
                            colorBorder: '#d1d5db',
                          },
                        },
                      }}>
                      <Form.Item<AddNewExpense>
                        labelAlign='left'
                        label={
                          <span className='text-size-14'>
                            Số tiền{' '}
                            <span className='base-red-not-important'>*</span>
                          </span>
                        }
                        normalize={(value) => {
                          const rawValue = value
                            .replace(/,/g, '')
                            .replace(/\./g, '');
                          return !isNaN(Number(rawValue))
                            ? Number(rawValue)
                                .toLocaleString('vi-VN')
                                .replace(/\./g, ',')
                            : '0';
                        }}
                        name={'amount'}
                        rules={[
                          {
                            required: true,
                            message: 'Vui lòng nhập số tiền',
                          },
                          {
                            validator: (_, value) =>
                              Number(
                                value.replace(/,/g, '').replace(/\./g, ''),
                              ) > 0
                                ? Promise.resolve()
                                : Promise.reject('Số tiền phải lớn hơn 0'),
                          },
                        ]}>
                        <Input
                          maxLength={11}
                          type='text'
                          inputMode='numeric'
                          placeholder='Nhập số tiền'></Input>
                      </Form.Item>
                    </ConfigProvider>
                  </div>
                </div>
              </div>
              <div className='modal-content-form-down'>
                <div className='modal-form-content-textarea'>
                  <ConfigProvider
                    theme={{
                      components: {
                        Input: {
                          activeShadow: 'none',
                          paddingBlock: 8,
                          paddingInline: 12,
                          borderRadius: 4,
                          inputFontSize: 14,
                          colorBorder: '#d1d5db',
                        },
                      },
                    }}>
                    <Form.Item<AddNewExpense>
                      layout='horizontal'
                      labelAlign='left'
                      label={
                        <span className='text-size-14 text-weight-700'>
                          Nội dung chi{' '}
                          <span className='base-red-not-important'>*</span>
                        </span>
                      }
                      name={'expenseContent'}
                      rules={[
                        {
                          required: true,
                          message: 'Vui lòng nhập nội dung khiếu nại',
                        },
                      ]}
                      labelCol={{ span: 24 }}
                      wrapperCol={{ span: 24 }}>
                      <TextArea
                        placeholder='Nhập nội dung khiếu nại'
                        style={{ height: 200, resize: 'none' }}
                      />
                    </Form.Item>
                  </ConfigProvider>
                </div>
              </div>
              <div key={'actions'} className='footer-modal-container'>
                <div className='footer-actions-button-wrap'>
                  <ConfigProvider
                    wave={{ disabled: true }}
                    theme={{
                      components: {
                        Button: {
                          contentFontSize: 14,
                          paddingInline: 36,
                          controlHeight: 40,
                          defaultColor: '#fff',
                          defaultBg: '#A0ACBE',
                          defaultHoverColor: '#fff',
                          defaultHoverBg: '#4096ff',
                          borderRadius: 8,
                        },
                      },
                    }}>
                    <Form.Item>
                      <Button
                        htmlType='button'
                        key={'canceled'}
                        type='default'
                        onClick={handleCanceled}
                        style={{ border: 'none' }}>
                        Hủy
                      </Button>
                    </Form.Item>
                  </ConfigProvider>
                  <ConfigProvider
                    wave={{ disabled: true }}
                    theme={{
                      components: {
                        Button: {
                          contentFontSize: 14,
                          paddingInline: 36,
                          controlHeight: 40,
                          colorPrimary: '#0050A6',
                          borderRadius: 8,
                        },
                      },
                    }}>
                    <Form.Item>
                      <Button
                        htmlType='submit'
                        key={'addComplaint'}
                        type='primary'
                        style={{ border: 'none' }}>
                        Tạo mới
                      </Button>
                    </Form.Item>
                  </ConfigProvider>
                </div>
              </div>
            </div>
          </Form>
        </Modal>
        {/* <Modal
          open={openViewModal}
          footer={[null]}
          centered
          onCancel={closeView}
          title={
            <span className='text-size-20 text-uppercase'>
              Chi tiết chi phí
            </span>
          }>
          alo 123123
        </Modal> */}
      </ConfigProvider>
    </>
  );
};

export default CustomerExpenseList;

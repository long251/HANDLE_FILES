import {
  Button,
  DatePicker,
  FormLayout,
  IndexTable,
  Layout,
  LegacyCard,
  LegacyStack,
  Link,
  Modal,
  OptionList,
  Page,
  PolarisIcons,
  Popover,
  TabProps,
  Tabs,
  TextField,
  useIndexResourceState,
} from 'pcs-polaris';
import React, { useCallback, useEffect, useState } from 'react';
import { useLocation, useNavigate } from 'react-router-dom';
import TitleBreadcrumbs from '../../components/Breadcrumb/TitleBreadcrumb.tsx';
import { useDispatch, useSelector } from 'react-redux';
import { AppState } from '../../store/index.ts';
import { shippingOrdersAction } from '../../store/reducers/shippingOrdersReducer/index.ts';
import { debounce, trim } from 'lodash';
import NumberPagination from '../../components/NumberPagination/index.tsx';
import moment from 'moment';
import MaskedInput from 'react-text-mask';
import { IconDateRange } from '../DeliveryBill/IconDeliveryBill.tsx';
import { showToast } from '../../helpers/toast.ts';

const pageSize = 10;

const ShippingOrders = () => {
  const dispatch = useDispatch();
  const shippingOrdersState = useSelector((state: AppState) => state.shippingOrders);
  // Pagination
  const [currentPage, setCurrentPage] = useState(1);
  // Search
  const [orderCode, setOrderCode] = useState('');
  const [trackingCode, setTrackingCode] = useState('');
  // Search Picked Date Range
  const [dateRangeActive, setDateRangeActive] = useState(false);
  const [{ month, year }, setDate] = useState({ month: new Date().getMonth(), year: new Date().getFullYear() });
  const [selectedDates, setSelectedDates] = useState({
    start: moment().subtract(90, 'days').toDate(),
    end: moment().toDate(),
  });  
    ////////////////////////////////////////////////////////
    const [shouldFetchData, setShouldFetchData] = useState(true);
    const adjustEndDate = (startDate: Date): Date => {
      const newEndDate = moment(startDate).add(90, 'days').toDate();
      return moment(newEndDate).isAfter(new Date()) ? new Date() : newEndDate;
    };
    const updateDates = (startDateStr: string, endDateStr: string) => {
      const startDate = moment(startDateStr, 'DD/MM/yyyy').toDate();
      const endDate = adjustEndDate(startDate);
  
      setSelectedDates({ start: startDate, end: endDate });
      setDate({
        month: moment(endDate).month(),
        year: moment(endDate).year(),
      });
    };
    ////////////////////////////////////////////////////
  const handleMonthChange = useCallback((month: number, year: number) => setDate({ month, year }), []);
  const [dateInputValue, setDateInputValue] = useState(
    `${moment(selectedDates.start).format('DD/MM/yyyy')} - ${moment(selectedDates.end).format('DD/MM/yyyy')}`,
  );
  const [rangeSelected, setRangeSelected] = useState<string[]>([]);
  const takeDate = (type: 'start' | 'end') => {
    let splitDate = dateInputValue.split(' - ');
    return type == 'start' ? splitDate[0] : splitDate[1];
  };
  // activeTab
  const [activeTab, setActiveTab] = useState('KHO_QT_CHUA_NHAN');
  // switch format activeTab
  const formatActive = (activeTab: any) => {
    switch (activeTab) {
      case 'KHO_QT_CHUA_NHAN':
        return [0];
      case 'KHO_QT_DA_NHAN':
        return [1];
      case 'DANG_VAN_CHUYEN_VE_VN':
        return [2];
      case 'DA_VE_VN':
        return [3];
      case 'DA_GIAO':
        return [4];
      default:
        return [0];
    }
  };
  // const debounceFetchDataFun = useCallback(
  //   debounce((data: any) => dispatch(shippingOrdersAction.fetchData(data)), 400),
  //   [],
  // );
  // const debounceFetchDataTotalFun = useCallback(
  //   debounce((data: any) => dispatch(shippingOrdersAction.fetchDataTotal(data)), 400),
  //   [],
  // );
  const debounceFetchDataFun = useCallback(
    debounce((data:any)=>{
      dispatch(shippingOrdersAction.fetchData(data));
      dispatch(shippingOrdersAction.fetchDataTotal(data));
    },300),[],
  )
  // function trim()
  const trimString = (text: string) => text.trim();
  // goToPage
  const goToPage = (pageNumber: number) => {
    setCurrentPage(pageNumber);
    updateUrl('page', `${pageNumber}`);
    debounceFetchDataFun({
      keyWord: '',
      orderCode: trimString(orderCode),
      tracking: trimString(trackingCode),
      trackingCode: '',
      orderType: 'TRANSPORT',
      status: formatActive(activeTab),
      fromDate: moment(takeDate('start'), 'DD/MM/yyyy').toDate(),
      toDate: moment(takeDate('end'), 'DD/MM/yyyy').add(1, 'd').toDate(),
      sorts: [{ sortBy: 'OrderDate', sortDirection: 'DESC' }],
      pageIndex: pageNumber,
      pageSize: pageSize,
    });
  };
  // useEffect(
  //   () => {
  //     if (!shouldFetchData) return;
  //     debounceFetchDataTotalFun({
  //       trackingCode: trimString(trackingCode),
  //       orderCode: trimString(orderCode),
  //       fromDate: moment(takeDate('start'), 'DD/MM/yyyy').toDate(),
  //       toDate: moment(takeDate('end'), 'DD/MM/yyyy').add(1, 'd').toDate(),
  //     });
  //   },
  //   [
  //     orderCode, trackingCode, dateInputValue
  //   ],
  // );
  useEffect(()=>{
    if(!shouldFetchData) return;
    debounceFetchDataFun({
      keyWord: '',
      orderCode: trimString(orderCode),
      tracking: trimString(trackingCode),
      trackingCode: '',
      orderType: 'TRANSPORT',
      status: formatActive(activeTab),
      fromDate: moment(takeDate('start'), 'DD/MM/yyyy').toDate(),
      toDate: moment(takeDate('end'), 'DD/MM/yyyy').add(1, 'd').toDate(),
      sorts: [{ sortBy: 'OrderDate', sortDirection: 'DESC' }],
      pageIndex: currentPage,
      pageSize: pageSize,
    })
  },[dateInputValue, shouldFetchData]);
  // function riêng
  const handleInputOrderCode = (valueOrderCode: string) => {
    setOrderCode(valueOrderCode);
    setCurrentPage(1);
    updateUrl('page', '1');
    debounceFetchDataFun({
      keyWord: '',
      orderCode: trimString(valueOrderCode),
      tracking: trimString(trackingCode),
      trackingCode: '',
      orderType: 'TRANSPORT',
      status: formatActive(activeTab),
      fromDate: moment(takeDate('start'), 'DD/MM/yyyy').toDate(),
      toDate: moment(takeDate('end'), 'DD/MM/yyyy').add(1, 'd').toDate(),
      sorts: [{ sortBy: 'OrderDate', sortDirection: 'DESC' }],
      pageIndex: 1,
      pageSize: pageSize,
    });
  };
  const handleInputTrackingCode = (valueTrackingCode: string) => {
    setTrackingCode(valueTrackingCode);
    setCurrentPage(1);
    updateUrl('page', '1');
    debounceFetchDataFun({
      keyWord: '',
      orderCode: trimString(orderCode),
      tracking: trimString(valueTrackingCode),
      trackingCode: '',
      orderType: 'TRANSPORT',
      status: formatActive(activeTab),
      fromDate: moment(takeDate('start'), 'DD/MM/yyyy').toDate(),
      toDate: moment(takeDate('end'), 'DD/MM/yyyy').add(1, 'd').toDate(),
      sorts: [{ sortBy: 'OrderDate', sortDirection: 'DESC' }],
      pageIndex: 1,
      pageSize: pageSize,
    });
  };
  
  // Tab
  const [itemStrings] = useState([
    { label: 'Kho QT chưa nhận', value: 'KHO_QT_CHUA_NHAN' },
    {
      label: 'Kho QT đã nhận',
      value: 'KHO_QT_DA_NHAN',
    },
    { label: 'Đang vận chuyển về VN', value: 'DANG_VAN_CHUYEN_VE_VN' },
    {
      label: 'Đã về VN',
      value: 'DA_VE_VN',
    },
    { label: 'Đã giao', value: 'DA_GIAO' },
  ]);
  const itemIndex = ['KHO_QT_CHUA_NHAN', 'KHO_QT_DA_NHAN', 'DANG_VAN_CHUYEN_VE_VN', 'DA_VE_VN', 'DA_GIAO'];
  const [activeTabIndex, setActiveTabIndex] = useState(0);
  const getTabCount = (type: string) => {
    let badge = 0;
    switch (type) {
      case 'KHO_QT_CHUA_NHAN':
        badge = shippingOrdersState.notRecWH_QT;
        break;
      case 'KHO_QT_DA_NHAN':
        badge = shippingOrdersState.recWHQT;
        break;
      case 'DANG_VAN_CHUYEN_VE_VN':
        badge = shippingOrdersState.transportToVN;
        break;
      case 'DA_VE_VN':
        badge = shippingOrdersState.recWHVN;
        break;
      case 'DA_GIAO':
        badge = shippingOrdersState.delivery;
        break;
      default:
        break;
    }
    return badge.toString();
  };
  const handleChangeTab = (tab: string, index: number) => {
    setActiveTab(tab);
    setActiveTabIndex(index);
    setCurrentPage(1);
    updateUrl('type', tab);
    updateUrl('page', '1');
    debounceFetchDataFun({
      keyWord: '',
      orderCode: trimString(orderCode),
      tracking: trimString(trackingCode),
      trackingCode: '',
      orderType: 'TRANSPORT',
      status: formatActive(tab),
      fromDate: moment(takeDate('start'), 'DD/MM/yyyy').toDate(),
      toDate: moment(takeDate('end'), 'DD/MM/yyyy').add(1, 'd').toDate(),
      sorts: [{ sortBy: 'OrderDate', sortDirection: 'DESC' }],
      pageIndex: 1,
      pageSize: pageSize,
    });
  };
  const navigate = useNavigate();
  const location = useLocation();
  const searchParams = new URLSearchParams(location.search);
  const tabs: TabProps[] = itemStrings.map((item, index) => ({
    content: item.label,
    badge: getTabCount(item.value),
    index,
    onAction: () => {
      handleChangeTab(item.value, index);
    },

    id: `${item.value}-${index}`,
  }));
  
  useEffect(() => {
    let pageParam: string = searchParams.get('page') ?? '1';
    setCurrentPage(Number(pageParam));

    let typeParam: string = searchParams.get('type') ?? 'KHO_QT_CHUA_NHAN';
    setActiveTab(typeParam);
    setActiveTabIndex(itemIndex.indexOf(typeParam));
  }, []);

  const updateUrl = (key: string, value: string) => {
    searchParams.set(key, value);
    navigate({ search: searchParams.toString() });
  };
  const resourceIDResolver = (item: any) => {
    return item.orderCode;
  };
  const { selectedResources, allResourcesSelected, handleSelectionChange, clearSelection } = useIndexResourceState(
    shippingOrdersState.data,
    { resourceIDResolver },
  );
  // Format Date
  const formatDate = (dateString: string) => {
    const date = new Date(dateString);
    if (!moment(date).isValid()) {
      return '';
    }
    // Adjust the time to GMT+7
    date.setHours(date.getUTCHours() + 7);
    const options: Intl.DateTimeFormatOptions = {
      year: 'numeric',
      month: '2-digit',
      day: '2-digit',
      hour: '2-digit',
      minute: '2-digit',
      hour12: false,
    };
    let formattedDate = new Intl.DateTimeFormat('en-GB', options).format(date);
    // Ensure the format matches "09/07/2024 14:09"
    formattedDate = formattedDate.replace(',', '');
    return formattedDate;
  };
  const [openActionId, setOpenActionId] = useState<number | null>(null);
  const [openModalCancelId, setOpenModalCancelId] = useState<number | null>(null);
  const handleCancel = (orderCode: string) => {
    setOpenModalCancelId(null);
    setCurrentPage(1);
    let payload = {
      orderCode: orderCode,
      dataNew: {
        keyWord: '',
        orderCode: '',
        tracking: '',
        trackingCode: '',
        orderType: 'TRANSPORT',
        status: [0],
        fromDate: moment(takeDate('start'), 'DD/MM/yyyy').toDate(),
        toDate: moment(takeDate('end'), 'DD/MM/yyyy').add(1, 'd').toDate(),
        sorts: [{ sortBy: 'OrderDate', sortDirection: 'DESC' }],
        pageIndex: 1,
        pageSize: pageSize,
      },
      dataTotalNew: {
        trackingCode: '',
        orderCode: '',
        fromDate: moment(takeDate('start'), 'DD/MM/yyyy').toDate(),
        toDate: moment(takeDate('end'), 'DD/MM/yyyy').add(1, 'd').toDate(),
      },
    };
    dispatch(shippingOrdersAction.deleteData(payload));
  };
  const formatShippingRouteCode = (code: string) => {
    switch (code) {
      case 'JP-VN':
        return 'Nhật';
      case 'US-VN':
        return 'Mỹ';
      case 'KR-VN':
        return 'Hàn Quốc';
      case 'UK-VN':
        return 'Anh';
      case 'DE-VN':
        return 'Đức';
      case 'VN':
        return 'Việt Nam';
      case 'CA-VN':
        return 'Canada';
      case 'CN-VN':
        return 'Trung Quốc';
      default:
        return code;
    }
  };
  const formatWeight = (weightInKg: number) => {
    const formattedWeight = weightInKg.toLocaleString('en-US', { minimumFractionDigits: 0, maximumFractionDigits: 3 });
    return `${formattedWeight} kg`;
  };
  const handleView = (item: any) => {
    updateUrl('page', `${currentPage}`);
    updateUrl('type', activeTab);
    // navigate(`/don-hang-van-chuyen/${item.orderCode}`);
    window.open(`/don-hang-van-chuyen/${item.orderCode}`, '_blank')
  };
  const resourceName = {
    singular: 'đơn hàng',
    plural: 'đơn hàng',
  };
  const rowMarkup = shippingOrdersState.data.map((item, index) => {
    return (
      <IndexTable.Row
        onClick={() => {}}
        id={item.orderCode}
        key={index}
        selected={selectedResources.includes(item.orderCode)}
        position={index}
      >
        <IndexTable.Cell>{item.orderCode}</IndexTable.Cell>
        <IndexTable.Cell>{item.trackingCode}</IndexTable.Cell>

        <IndexTable.Cell>{formatShippingRouteCode(item.shippingRouteCode)}</IndexTable.Cell>
        <IndexTable.Cell>{formatWeight(item.productWeight)}</IndexTable.Cell>
        <IndexTable.Cell>{formatDate(item.orderDate)}</IndexTable.Cell>
        <IndexTable.Cell>
          <div className='Style_Action'>
            <Button onClick={() => handleView(item)} icon={PolarisIcons.ViewMinor}>
              View
            </Button>

            {/* {(activeTab === 'KHO_QT_CHUA_NHAN' ||
              activeTab === 'KHO_QT_DA_NHAN' ||
              activeTab === 'DANG_VAN_CHUYEN_VE_VN' ||
              activeTab === 'DA_VE_VN' ||
              activeTab === 'DA_GIAO') && ( */}
             {activeTab === '' && (
              <div className='Style_Popover'>
                <Popover
                  active={openActionId === item.orderCode}
                  preferredAlignment={'right'}
                  activator={
                    <Button
                      icon={PolarisIcons.CaretDownMinor}
                      onClick={() => setOpenActionId(openActionId === item.orderCode ? null : item.orderCode)}
                    />
                  }
                  onClose={() => {
                    setOpenActionId(null);
                  }}
                >
                  <Button
                    onClick={() => setOpenModalCancelId(item.orderCode)}
                    textAlign={'left'}
                    fullWidth
                    icon={PolarisIcons.CircleCancelMajor}
                  >
                    Hủy đơn hàng
                  </Button>
                </Popover>
                <Modal
                  open={openModalCancelId === item.orderCode}
                  primaryAction={{
                    content: 'Huỷ đơn',
                    onAction: () => handleCancel(item.orderCode),
                  }}
                  secondaryActions={[
                    {
                      content: 'Hủy bỏ yêu cầu',
                      onAction: () => {
                        setOpenModalCancelId(null);
                        setOpenActionId(null);
                      },
                    },
                  ]}
                  title={'Yêu cầu huỷ đơn hàng'}
                  onClose={() => setOpenModalCancelId(null)}
                >
                  <Modal.Section>
                    <div className='Style_Modal_Text'>Bạn có chắc chắn muốn hủy đơn hàng?</div>
                  </Modal.Section>
                </Modal>
              </div>
            )}
          </div>
        </IndexTable.Cell>
      </IndexTable.Row>
    );
  });
  const [isHovered, setIsHovered] = useState(false);
  const [isActive, setIsActive] = useState(false);

  const handleIconCalendarClick = () => {
    setIsActive(!isActive);
  };

  const handleMouseEnter = () => {
    setIsHovered(true);
  };

  const handleMouseLeave = () => {
    setIsHovered(false);
  };
  return (
    <div className='Polaris-Custom Title_Breadcrumb'>
      <Page
        //@ts-ignore
        title={<TitleBreadcrumbs breadcrumbs={[{ title: 'Danh sách đơn hàng', url: '' }]} />}
        primaryAction={
          // <div className='Create_Order'>
          //   <Link url='/don-hang-van-chuyen/tao-moi' removeUnderline monochrome>
          //     <Button>TẠO ĐƠN</Button>
          //   </Link>
          // </div>
          { 
            //@ts-ignore
            content: <div className='Create_Order_Button'>Tạo đơn</div>, url: '/don-hang-van-chuyen/tao-moi' }
        }
      >
        <Layout>
          <Layout.Section>
            <LegacyCard>
              <LegacyCard.Section>
                <FormLayout>
                  <FormLayout.Group>
                    <TextField
                      label='Mã đơn hàng'
                      value={orderCode}
                      onChange={(value) => {
                        handleInputOrderCode(value);
                      }}
                      autoComplete='off'
                    />
                    {/* <div>
                      <label htmlFor="">Mã đơn hàng</label>
                      <input type="text" value={orderCode} onChange={(e)=>handleInputOrderCode(e.target.value)}/>
                    </div> */}

                    <TextField
                      label='Mã tracking'
                      value={trackingCode}
                      onChange={(value) => {
                        handleInputTrackingCode(value);
                      }}
                      autoComplete='off'
                    />

                    <div className={'DeliveryBill_Picked_Date_Range'}>
                      <div className='Polaris-Labelled__LabelWrapper'>
                        <div className='Polaris-Label'>
                          <label
                            id={'PolarisTextField6Label'}
                            htmlFor={'PolarisTextField6'}
                            className='Polaris-Label__Text'
                          >
                            Thời gian
                          </label>
                        </div>
                      </div>
                      <div className='Polaris-Connected'>
                        <div className='Polaris-Connected__Item Polaris-Connected__Item--primary'>
                          <div className='Polaris-TextField Polaris-TextField--hasValue'>
                            <MaskedInput
                              mask={[
                                /\d/,
                                /\d/,
                                '/',
                                /\d/,
                                /\d/,
                                '/',
                                /\d/,
                                /\d/,
                                /\d/,
                                /\d/,
                                ' ',
                                '-',
                                ' ',
                                /\d/,
                                /\d/,
                                '/',
                                /\d/,
                                /\d/,
                                '/',
                                /\d/,
                                /\d/,
                                /\d/,
                                /\d/,
                              ]}
                              className='Polaris-TextField__Input'
                              placeholder='dd/mm/yyyy - dd/mm/yyyy'
                              guide
                              value={dateInputValue}
                              placeholderChar={'_'}
                              keepCharPositions
                              id='PolarisTextField6'
                              // onChange={(event: any) => {
                              //   setDateInputValue(event.target.value);
                              //   goToPage(1);
                              // }}
                              onChange={(event: any) => {
                                const value = event.target.value;
                                setDateInputValue(value);
                                setCurrentPage(1);
                                updateUrl('page', '1');
                                let splitDate = value.split(' - ');
                                if (splitDate.length === 2) {
                                  const isStartDateValid = moment(splitDate[0], 'DD/MM/yyyy', true).isValid();
                                  const isEndDateValid = moment(splitDate[1], 'DD/MM/yyyy', true).isValid();
                                  if (isStartDateValid && isEndDateValid) {
                                    const startDate = moment(splitDate[0], 'DD/MM/yyyy').toDate();
                                    const endDate = moment(splitDate[1], 'DD/MM/yyyy').toDate();
                                    const diffDays = moment(endDate).diff(moment(startDate), 'days');
                                    if (diffDays > 90) {
                                      showToast('Dữ liệu phải nằm trong khoảng thời gian 90 ngày liên tiếp', 'info');
                                      setShouldFetchData(false);
                                      return;
                                    }
                                    setShouldFetchData(true);
                                    updateDates(
                                      moment(startDate).format('DD/MM/yyyy'),
                                      moment(endDate).format('DD/MM/yyyy'),
                                    );
                                  }
                                }
                              }}
                              aria-labelledby={'PolarisTextField6Label'}
                              aria-invalid={false}
                            />
                            <div className='Polaris-TextField__Backdrop' />
                            <div className='Polaris-TextField__Suffix'>
                              <Popover
                                fluidContent
                                active={dateRangeActive}
                                activator={
                                  <Button
                                    onClick={() => {
                                      setRangeSelected([]);
                                      setDateRangeActive(!dateRangeActive);
                                      let splitDate = dateInputValue.split(' - ');
                                      let startDateStr = splitDate[0];
                                      let endDateStr = splitDate[1];
                                      if (
                                        moment(startDateStr, 'DD/MM/yyyy').isValid() &&
                                        moment(endDateStr, 'DD/MM/yyyy').isValid()
                                      ) {
                                        setSelectedDates({
                                          start: moment(startDateStr, 'DD/MM/yyyy').toDate(),
                                          end: moment(endDateStr, 'DD/MM/yyyy').toDate(),
                                        });
                                        setDate({
                                          month: moment(endDateStr, 'DD/MM/yyyy').month(),
                                          year: moment(endDateStr, 'DD/MM/yyyy').year(),
                                        });
                                      }
                                    }}
                                    plain
                                    // icon={PolarisIcons.CalendarMajor}
                                    icon={
                                      <div
                                        onClick={handleIconCalendarClick}
                                        onMouseEnter={handleMouseEnter}
                                        onMouseLeave={handleMouseLeave}
                                      >
                                        {/* Sử dụng điều kiện để render biểu tượng phù hợp */}
                                        {isActive ? (
                                          <div className='Block_Wrapper'>
                                            <div className='Block_Icon_Date_Range'>
                                              <IconDateRange />
                                            </div>
                                          </div>
                                        ) : isHovered ? (
                                          <div className='Block_Wrapper'>
                                            <div className='Block_Icon_Date_Range'>
                                              <IconDateRange />
                                            </div>
                                          </div>
                                        ) : (
                                          <div className='Block_Wrapper'>
                                            <div className='Block_Icon_Date_Range'>
                                              <IconDateRange />
                                            </div>
                                          </div>
                                        )}
                                      </div>
                                    }
                                  />
                                }
                                onClose={() => setDateRangeActive(false)}
                              >
                                <div className='Custom-DatePicker'>
                                  <div className='date_range'>
                                    <div className='pre_option'>
                                      <div className='list_option'>
                                        <div className='list_content'>
                                          <OptionList
                                            title=''
                                            onChange={(selected) => {
                                              setRangeSelected(selected);
                                              if (selected[0] == 'today') {
                                                setSelectedDates({
                                                  start: moment().toDate(),
                                                  end: moment().toDate(),
                                                });
                                                setDate({ month: moment().month(), year: moment().year() });
                                              } else if (selected[0] == 'yesterday') {
                                                setSelectedDates({
                                                  start: moment().subtract(1, 'day').toDate(),
                                                  end: moment().subtract(1, 'day').toDate(),
                                                });
                                                setDate({
                                                  month: moment().subtract(1, 'day').month(),
                                                  year: moment().subtract(1, 'day').year(),
                                                });
                                              } else if (selected[0] == 'last_7_days') {
                                                setSelectedDates({
                                                  start: moment().subtract(7, 'day').toDate(),
                                                  end: moment().toDate(),
                                                });
                                                setDate({
                                                  month: moment().subtract(7, 'day').month(),
                                                  year: moment().subtract(7, 'day').year(),
                                                });
                                              } else if (selected[0] == 'last_30_days') {
                                                setSelectedDates({
                                                  start: moment().subtract(30, 'day').toDate(),
                                                  end: moment().toDate(),
                                                });
                                                setDate({
                                                  month: moment().subtract(30, 'day').month(),
                                                  year: moment().subtract(30, 'day').year(),
                                                });
                                              } else if (selected[0] == 'last_90_days') {
                                                setSelectedDates({
                                                  start: moment().subtract(90, 'day').toDate(),
                                                  end: moment().toDate(),
                                                });
                                                setDate({
                                                  month: moment().subtract(90, 'day').month(),
                                                  year: moment().subtract(90, 'day').year(),
                                                });
                                              }
                                            }}
                                            options={[
                                              { value: 'today', label: 'Hôm nay' },
                                              { value: 'yesterday', label: 'Hôm qua' },
                                              { value: 'last_7_days', label: '7 ngày trước' },
                                              { value: 'last_30_days', label: '30 ngày trước' },
                                              { value: 'last_90_days', label: '90 ngày trước' },
                                            ]}
                                            selected={rangeSelected}
                                          />
                                        </div>
                                      </div>
                                    </div>
                                    <div className='pick_date'>
                                      <DatePicker
                                        disableDatesAfter={new Date()}
                                        weekStartsOn={1}
                                        month={month}
                                        year={year}
                                        onChange={setSelectedDates}
                                        onMonthChange={handleMonthChange}
                                        selected={selectedDates}
                                        multiMonth
                                        allowRange
                                      />
                                    </div>
                                  </div>
                                  <div className='actions'>
                                    <LegacyStack distribution={'trailing'}>
                                      <Button onClick={() => setDateRangeActive(false)}>Đóng</Button>
                                      <Button primary 
                                       onClick={() => {
                                        let startDate = selectedDates.start;
                                        let endDate = selectedDates.end;
                                        let startDateStr = moment(startDate).format('DD/MM/yyyy');
                                        let endDateStr = moment(endDate).format('DD/MM/yyyy');
                                        const diffDays = moment(endDate).diff(moment(startDate), 'days');
                                        if (diffDays > 90) {
                                          endDate = moment(startDate).add(90, 'days').toDate();
                                          showToast(
                                            'Dữ liệu phải nằm trong khoảng thời gian 90 ngày liên tiếp',
                                            'info',
                                          );
                                        }
                                        setDateInputValue(
                                          `${startDateStr} - ${moment(endDate).format('DD/MM/yyyy')}`,
                                        );
                                        setSelectedDates({ start: startDate, end: endDate });
                                        setCurrentPage(1);
                                        updateUrl('page', '1');
                                        setDateRangeActive(false);
                                      }}>
                                        Áp dụng
                                      </Button>
                                    </LegacyStack>
                                  </div>
                                </div>
                              </Popover>
                            </div>
                          </div>
                        </div>
                      </div>
                    </div>
                  </FormLayout.Group>
                </FormLayout>
              </LegacyCard.Section>
            </LegacyCard>
          </Layout.Section>

          <Layout.Section>
            <LegacyCard>
             
              <LegacyCard.Section>
<div style={{marginBottom:'20px'}}>
<div className='Tabs_Custom Style_Polaris_Tab'>
                <Tabs
                  tabs={tabs}
                  selected={activeTabIndex}
                  onSelect={(selectedTabIndex) => {
                    clearSelection();
                    setActiveTabIndex(selectedTabIndex);
                    setActiveTab(itemIndex[selectedTabIndex]);
                    setCurrentPage(1);
                    updateUrl('type', itemIndex[selectedTabIndex]);
                  }}
                />
              </div>
</div>
                <div className='Shipping_Orders_Index_Table IndexTable--NoSticky'>
                  {/* Index Table */}
                  <IndexTable
                    resourceName={resourceName}
                    selectable={false}
                    loading={shippingOrdersState.data_loading}
                    lastColumnSticky
                    itemCount={shippingOrdersState.data.length}
                    selectedItemsCount={allResourcesSelected ? 'All' : selectedResources.length}
                    onSelectionChange={handleSelectionChange}
                    headings={[
                      { title: 'Mã đơn hàng', alignment: 'center' },
                      { title: 'Mã tracking', alignment: 'center' },
                      { title: 'Tuyến', alignment: 'center' },
                      { title: 'Trọng lượng', alignment: 'center' },
                      { title: 'Ngày đặt hàng', alignment: 'center' },
                      { title: 'Action', alignment: 'center' },
                    ]}
                  >
                    {rowMarkup}
                  </IndexTable>
                </div>

                {shippingOrdersState.data_length ? (
                  <div className='Ecommerce_Pagination'>
                    <NumberPagination
                      totalItems={shippingOrdersState.data_length}
                      currentPage={currentPage}
                      goToPage={(pageNumber) => goToPage(pageNumber)}
                      pageSize={pageSize}
                    />
                  </div>
                ) : null}
              </LegacyCard.Section>
            </LegacyCard>
          </Layout.Section>
        </Layout>
      </Page>
    </div>
  );
};

export default ShippingOrders;

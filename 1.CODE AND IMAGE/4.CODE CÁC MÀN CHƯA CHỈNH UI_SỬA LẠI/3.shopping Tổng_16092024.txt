import React, { useEffect, useState } from 'react';
import { useDispatch } from 'react-redux';
import { shoppingAction } from '../../../store/reducers/shoppingReducer';
import { shopApiClient } from '../../../utils/api.ts';
import { AxiosResponse } from 'axios';
import {
  Button,
  Icon,
  Layout,
  LegacyCard,
  LegacyStack,
  Page,
  PolarisIcons,
  Spinner,
  Text,
  TextField,
} from 'pcs-polaris';
import ProductGridItem from './_components/ProductGridItem.tsx';
import { categories } from '../../../helpers/shoppingCategory.ts';
import { useNavigate } from 'react-router-dom';
import Empty from '../../../components/NoData/Empty.tsx';
import SearchProductGridItem from './_components/SearchProductGridItem.tsx';
import TitleBreadcrumbs from '../../../components/Breadcrumb/TitleBreadcrumb.tsx';

import 'slick-carousel/slick/slick.css';
import 'slick-carousel/slick/slick-theme.css';
import Slider from 'react-slick';
import { IconNext, IconPrev } from '../../ShippingOrders/IconShippingOrders.tsx';
import { SharedDivider } from '../../../components/Breadcrumb/SharedDivider.tsx';
import { dateFormat } from 'highcharts';

const Shopping = () => {
  const dispatch = useDispatch();
  const navigate = useNavigate();
  useEffect(() => {
    dispatch(shoppingAction.fetch_osp());
    dispatch(shoppingAction.fetchFashionProducts());
    dispatch(shoppingAction.fetchHousewareProducts());
  }, []);

  const [loadingDataMenuDeals, setLoadingDataMenuDeals] = useState(false);
  const [dataMenuDeals, setDataMenuDeals] = useState<any>([]);
  const fetchMenu = () => {
    setLoadingDataMenuDeals(true);
    shopApiClient
      .get('/api/ebay/trending-deals/filter')
      .then((response: AxiosResponse) => {
        if (response.data) {
          let responseData = response.data;
          // console.log(responseData);
          if (Array.isArray(responseData['allCategories'])) {
            setDataMenuDeals(responseData['allCategories']);
          }
        }
        setLoadingDataMenuDeals(false);
      })
      .catch((e) => {
        console.log(e);
        setLoadingDataMenuDeals(false);
      });
  };

  const [loadingHomeDeals, setLoadingHomeDeals] = useState(false);
  const [homeDataDeals, setDataHomeDeals] = useState<any>([]);
  
  const fetchHomeDeals = () => {
    setLoadingHomeDeals(true);
    shopApiClient
      .get('/api/ebay/home-deals')
      .then((response: AxiosResponse) => {
        if (response.data) {
          let responseData = response.data;
          if (Array.isArray(responseData['groupItems'])) {
            let data = Array.from(responseData['groupItems']).reverse(); // reverse to get trending first
            setDataHomeDeals(data);
          }
        }
        setLoadingHomeDeals(false);
      })
      .catch((e) => {
        console.log(e);
        setLoadingHomeDeals(false);
      });
  };

  useEffect(() => {
    fetchHomeDeals();
    fetchMenu();
  }, []);

  const [searchValue, setSearchValue] = useState('');

  const [mode, setMode] = useState('home');

  const [searchPage, setSearchPage] = useState(1);
  const [loadingSearch, setLoadingSearch] = useState(false);
  const [searchData, setSearchData] = useState<any>([]);

  const [loadingMoreSearch, setLoadingMoreSearch] = useState(false);
  const getIdFromLink = (url: string) => {
    try {
      let urlParse = new URL(url);
      let pathname = urlParse.pathname;
      let pathSplit = pathname.split('/itm/');
      let itemSplit = pathSplit[1].split('/');
      return itemSplit[0];
    } catch (e) {
      console.log(e);
    }
    return '';
  };
  const handleSearch = (value: string, page = 1) => {
    if (value.includes('https://')) {
      let id = getIdFromLink(value);
      window.open(`/shopping/product/${id}`, '_blank');
      return;
    }
    setLoadingSearch(true);
    setSearchPage(page);
    shopApiClient
      .get(`/api/ebay/search-products?keyword=${encodeURI(value)}&page=${page}`)
      .then((response: AxiosResponse) => {
        console.log(response);
        let items = response.data.items;
        if (Array.isArray(items)) {
          setSearchData(items);
        } else {
          setSearchData([]);
        }
        setLoadingSearch(false);
      })
      .catch((e) => {
        console.log(e);
        setSearchData([]);
        setLoadingSearch(false);
      });
  };

  const handleLoadMoreSearch = (page: number) => {
    setLoadingMoreSearch(true);
    setSearchPage(page);
    shopApiClient
      .get(`/api/ebay/search-products?keyword=${encodeURI(searchValue)}&page=${page}`)
      .then((response: AxiosResponse) => {
        let items = response.data.items;
        if (Array.isArray(items)) {
          let newItems = searchData;
          newItems = newItems.concat(items);
          setSearchData(newItems);
        }
        setLoadingMoreSearch(false);
      })
      .catch((e) => {
        console.log(e);
        setLoadingMoreSearch(false);
      });
  };
  //logic search sugggested
  const [suggestions, setSuggestions] = useState<string[]>([]);
const fetchSuggestions = (keyword: string) => {
  if (keyword.trim() === '') {
    setSuggestions([]);
    return;
  }
  shopApiClient
    .get(`/api/ebay/suggested-keywords?keyword=${encodeURI(keyword)}`)
    .then((response: AxiosResponse) => {
      setSuggestions(response.data);
    })
    .catch((e) => {
      console.log(e);
      setSuggestions([]);
    });
};
  //logic Slick
  const settings = {
    dots: false, // No dots for navigation
    infinite: true, // Infinite looping of slides
    speed: 300, // Transition speed
    slidesToShow: 8, // Adjust to show 6 slides at once
    slidesToScroll: 1, // Scroll one slide at a time
    // centerMode: true, // Enable centered slides
    centerPadding: '0', // No padding around the center slide
    // prevArrow: <SamplePrevArrow />,
    // nextArrow: <SampleNextArrow />,
    arrows: categories.length > 8,
    prevArrow: categories.length > 8 ? <SamplePrevArrow /> : undefined,
    nextArrow: categories.length > 8 ? <SampleNextArrow /> : undefined,
    responsive: [
      {
        breakpoint: 1800,
        settings: {
          slidesToShow: 7,
          slidesToScroll: 1,
          arrows: true,
          prevArrow: <SamplePrevArrow />,
          nextArrow: <SampleNextArrow />,
        },
      },
      {
        breakpoint: 1600,
        settings: {
          slidesToShow: 6,
          slidesToScroll: 1,
          arrows: true,
          prevArrow: <SamplePrevArrow />,
          nextArrow: <SampleNextArrow />,
        },
      },
      {
        breakpoint: 1400,
        settings: {
          slidesToShow: 5,
          slidesToScroll: 1,
          arrows: true,
          prevArrow: <SamplePrevArrow />,
          nextArrow: <SampleNextArrow />,
        },
      },
      {
        breakpoint: 1200,
        settings: {
          slidesToShow: 4,
          slidesToScroll: 1,
          arrows: true,
          prevArrow: <SamplePrevArrow />,
          nextArrow: <SampleNextArrow />,
        },
      },
      {
        breakpoint: 1000,
        settings: {
          slidesToShow: 3,
          slidesToScroll: 1,
          arrows: true,
          prevArrow: <SamplePrevArrow />,
          nextArrow: <SampleNextArrow />,
        },
      },
      {
        breakpoint: 767,
        settings: {
          slidesToShow: 4,
          slidesToScroll: 1,
          arrows: true,
          prevArrow: <SamplePrevArrow />,
          nextArrow: <SampleNextArrow />,
        },
      },
      {
        breakpoint: 660,
        settings: {
          slidesToShow: 3,
          slidesToScroll: 1,
          arrows: true,
          prevArrow: <SamplePrevArrow />,
          nextArrow: <SampleNextArrow />,
        },
      },
      {
        breakpoint: 527,
        settings: {
          slidesToShow: 2,
          slidesToScroll: 1,
          arrows: true,
          prevArrow: <SamplePrevArrow />,
          nextArrow: <SampleNextArrow />,
        },
      },
    ],
  };
  function SampleNextArrow(props: any) {
    const { onClick } = props;
    return (
      <div
        style={{
          position: 'absolute',
          right: '0px',
          top: '50%',
          transform: 'translateY(-50%)',
          zIndex: 2,
          width: '30px',
          height: '30px',
          backgroundColor: 'transparent',
          cursor: 'pointer',
        }}
        onClick={onClick}
      >
        <IconNext />
      </div>
    );
  }

  function SamplePrevArrow(props: any) {
    const { onClick } = props;
    return (
      <div
        style={{
          position: 'absolute',
          left: '0px',
          top: '50%',
          transform: 'translateY(-50%)',
          zIndex: 2,
          width: '30px',
          height: '30px',
          backgroundColor: 'transparent',
          cursor: 'pointer',
        }}
        onClick={onClick}
      >
        <IconPrev />
      </div>
    );
  }

  return (
    <div className='Polaris-Custom Title_Breadcrumb'>
      <Page
        //@ts-ignore
        title={<TitleBreadcrumbs breadcrumbs={[{ title: 'Shopping', url: '' }]} />}
        primaryAction={
          <div
            className={'HomeSearch'}
            onKeyDown={(event) => {
              const enterKeyPressed = event.keyCode === 13;
              if (enterKeyPressed) {
                event.preventDefault();
                if (searchValue) {
                  setMode('search');
                  handleSearch(searchValue);
                } else {
                  setMode('home');
                }
              }
            }}
          >
            <TextField
              autoComplete={'off'}
              prefix={<Icon source={PolarisIcons.SearchMajor} />}
              label={''}
              value={searchValue}
              onChange={(value) => setSearchValue(value)}
              placeholder={'Nhập tìm kiếm sản phẩm'}
              clearButton={true}
              onClearButtonClick={() => {
                setSearchValue('');
                setMode('home');
              }}
            />
          </div>
        }
      >
        <Layout>
          <Layout.Section>
            {mode == 'home' ? (
              <LegacyCard>
                <LegacyCard.Section>
                  <div className='slider-container'>
                    <LegacyStack vertical>
                      <LegacyStack.Item>
                        <LegacyStack distribution='center'>
                          <div className='Style_List_product'>
                            <Text as='h2' variant='headingLg'>
                              Danh mục sản phẩm
                            </Text>
                          </div>
                        </LegacyStack>
                      </LegacyStack.Item>
                      <LegacyStack.Item>
                        <Slider {...settings}>
                          {categories.map((item, index) => (
                            <div key={index} style={{ padding: '0 8px'}}>
                              {' '}
                              {/* Add padding between items */}
                              <div className='Style_Image_Category'>
                                <img
                                  src={item.image}
                                  alt={item.name}
                                  className='Style_Image_Category_Item'
                                  onClick={() =>
                                    navigate(`/shopping/category/${item.value}`, {
                                      state: {
                                        breadcrumbs: [
                                          { title: 'Shopping', url: `/shopping` },
                                          { title: item.name, url: `/shopping/category/${item.value}` },
                                        ],
                                      },
                                    })
                                  }
                                />
                                <div
                                  className='Style_Title_Category_Item'
                                  onClick={() =>
                                    navigate(`/shopping/category/${item.value}`, {
                                      state: {
                                        breadcrumbs: [
                                          { title: 'Shopping', url: `/shopping` },
                                          { title: item.name, url: `/shopping/category/${item.value}` },
                                        ],
                                      },
                                    })
                                  }
                                >
                                  {item.name}
                                </div>
                              </div>
                            </div>
                          ))}
                        </Slider>
                      </LegacyStack.Item>
                    </LegacyStack>
                  </div>
                  {/* </LegacyCard.Section>
                <LegacyCard.Section> */}
                  <LegacyStack vertical>
                    <LegacyStack.Item>
                      <LegacyStack distribution={'center'}>
                        <LegacyStack.Item>
                          <div style={{ marginTop: '32px' }}>
                            <Text as={'h2'} variant={'headingLg'}>
                              Danh mục Deals
                            </Text>
                          </div>
                        </LegacyStack.Item>
                      </LegacyStack>
                    </LegacyStack.Item>
                    {loadingDataMenuDeals ? (
                      <LegacyStack.Item>
                        <LegacyStack distribution={'center'}>
                          <LegacyStack.Item>
                            <Spinner size={'small'} />
                          </LegacyStack.Item>
                        </LegacyStack>
                      </LegacyStack.Item>
                    ) : (
                      <LegacyStack.Item>
                        <LegacyStack distribution={'center'}>
                          {dataMenuDeals.map((item: any, index: number) => (
                            <LegacyStack.Item key={index}>
                              <div className='Style_Data_Menu_Deals'>
                                <Button
                                  onClick={() =>
                                    navigate(`/shopping/deal/${item.categoryId}`, {
                                      state: {
                                        breadcrumbs: [
                                          {
                                            title: 'Shopping',
                                            url: `/shopping`,
                                          },
                                          {
                                            title: item.displayName,
                                            url: `/shopping/deal/${item.categoryId}`,
                                          },
                                        ],
                                      },
                                    })
                                  }
                                >
                                  {item.displayName}
                                </Button>
                              </div>
                            </LegacyStack.Item>
                          ))}
                        </LegacyStack>
                      </LegacyStack.Item>
                    )}
                  </LegacyStack>
                </LegacyCard.Section>
                {loadingHomeDeals ? (
                  <LegacyCard.Section>
                    <LegacyStack distribution={'center'}>
                      <LegacyStack.Item>
                        <Spinner size={'small'} />
                      </LegacyStack.Item>
                    </LegacyStack>
                  </LegacyCard.Section>
                ) : (
                  <>
                    {homeDataDeals.map((deal: any, index: number) => (
                      <div key={index} style={{ padding: '20px' }}>
                        <div className='Style_Title_Home_Data_Deals'>
                          <Text as={'h2'} variant={'headingMd'} fontWeight={'bold'}>
                            {deal.title}
                          </Text>
                          
                        </div>
                        <div style={{ margin: '20px 0', borderTop: '1px solid #D1D5DB' }}></div>
                        <div className='ProductGrid_Fill'>
                        {/* <div className='ProductGrid'> */}
                          {deal.previewItems.map((item: any, idx: number) => (
                            <ProductGridItem product={item} key={`deal_${index}-product_${idx}`} />
                          ))}
                        </div>
                      </div>
                    ))}
                  </>
                )}
              </LegacyCard>
            ) : null}

            {mode == 'search' ? (
              <LegacyCard>
                <LegacyCard.Section
                  title={
                    <Text as={'h2'} variant={'headingMd'} fontWeight={'bold'}>
                      Kết quả tìm kiếm
                    </Text>
                  }
                >
                  {loadingSearch ? (
                    <LegacyStack distribution={'center'}>
                      <LegacyStack.Item>
                        <Spinner size={'small'} />
                      </LegacyStack.Item>
                    </LegacyStack>
                  ) : (
                    <>
                      {searchData.length ? (
                        <>
                          <div className='SearchProductGrid'>
                            {searchData.map((item: any, idx: number) => (
                              <SearchProductGridItem product={item} key={idx} />
                            ))}
                          </div>
                          <div
                            style={{
                              marginTop: 20,
                            }}
                          >
                            {searchData.length && !loadingMoreSearch && searchData.length % 60 == 0 ? (
                              <LegacyStack distribution={'center'}>
                                <LegacyStack.Item>
                                  <Button plain onClick={() => handleLoadMoreSearch(searchPage + 1)}>
                                    Xem thêm
                                  </Button>
                                </LegacyStack.Item>
                              </LegacyStack>
                            ) : null}

                            {loadingMoreSearch ? (
                              <LegacyStack distribution={'center'}>
                                <LegacyStack.Item>
                                  <Spinner size={'small'} />
                                </LegacyStack.Item>
                              </LegacyStack>
                            ) : null}
                          </div>
                        </>
                      ) : (
                        <div
                          style={{
                            display: 'flex',
                            justifyContent: 'center',
                            alignItems: 'center',
                            flexDirection: 'column',
                            gap: 16,
                          }}
                        >
                          <div style={{ flex: 1, width: 300 }}>
                            <Empty />
                          </div>
                          <Text as={'p'} variant={'bodyLg'}>
                            Không có dữ liệu
                          </Text>
                        </div>
                      )}
                    </>
                  )}
                </LegacyCard.Section>
              </LegacyCard>
            ) : null}
          </Layout.Section>
        </Layout>
      </Page>
    </div>
  );
};
export default Shopping;

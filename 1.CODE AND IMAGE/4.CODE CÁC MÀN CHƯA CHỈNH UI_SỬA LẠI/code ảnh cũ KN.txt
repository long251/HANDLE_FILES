LOGIC
-----
// hình ảnh------------------------------------------------------------
  const [uploadedImageUrls, setUploadedImageUrls] = useState<string[]>([]);
  const [loadingImages, setLoadingImages] = useState<boolean[]>([]);
  // loading upload
  const [isLoading, setIsLoading] = useState(false);

  const uploadFile = async (file: File) => {
    let url = '';
    try {
      const formData = new FormData();
      formData.append('file', file);
      const response = await apiClient.post('api/File/UploadFile', formData, {
        headers: {
          'Content-Type': 'multipart/form-data',
        },
      });

      if (response.data.status) {
        url = response.data.fullUrl;
      } else {
        showToast('Upload file thất bại', 'error');
      }
    } catch (e) {
      console.error(e);
      showToast('Có lỗi xảy ra khi upload file', 'error');
    }
    return url;
  };

  // const handleUploadImage = async (event: React.ChangeEvent<HTMLInputElement>) => {
  //   if (!event.target.files) return;

  //   const files = Array.from(event.target.files);
  //   if (uploadedImageUrls.length + files.length > 5) {
  //     showToast('Bạn chỉ được chọn tối đa 5 ảnh', 'error');
  //     return;
  //   }
  //   setIsLoading(true);
  //   // Reset loading state for each new batch of images
  //   const newLoadingImages = files.map(() => true);
  //   setLoadingImages((prevLoading) => [...prevLoading, ...newLoadingImages]);

  //   for (let i = 0; i < files.length; i++) {
  //     const file = files[i];
  //     const imageUrl = await uploadImage(file);
  //     if (imageUrl) {
  //       setUploadedImageUrls((prevUrls) => [...prevUrls, imageUrl]);
  //     }
  //     setLoadingImages((prevLoading) => {
  //       const updatedLoading = [...prevLoading];
  //       updatedLoading[uploadedImageUrls.length + i] = false;
  //       return updatedLoading;
  //     });
  //   }
  //   setIsLoading(false);
  //   event.target.value = '';
  // };
  const [uploadedVideoUrls, setUploadedVideoUrls] = useState<string[]>([]);
  const [loadingVideos, setLoadingVideos] = useState<boolean[]>([]);
  const handleUploadFile = async (event: React.ChangeEvent<HTMLInputElement>) => {
    if (!event.target.files) return;
  
    const files = Array.from(event.target.files);
    if (uploadedImageUrls.length + files.length > 5) {
      showToast('Bạn chỉ được chọn tối đa 5 tệp', 'error');
      return;
    }
    setIsLoading(true);
    const newLoadingFiles = files.map(() => true);
    setLoadingImages((prevLoading) => [...prevLoading, ...newLoadingFiles]);
  
    for (let i = 0; i < files.length; i++) {
      const file = files[i];
      const fileUrl = await uploadFile(file);
      if (fileUrl) {
        if (file.type.startsWith('image')) {
          setUploadedImageUrls((prevUrls) => [...prevUrls, fileUrl]);
        } else if (file.type.startsWith('video')) {
          setUploadedVideoUrls((prevUrls) => [...prevUrls, fileUrl]);
        }
      }
      setLoadingImages((prevLoading) => {
        const updatedLoading = [...prevLoading];
        updatedLoading[uploadedImageUrls.length + i] = false;
        return updatedLoading;
      });
    }
    setIsLoading(false);
    event.target.value = '';
  };
  
  const handleRemoveImage = (index: number) => {
    setUploadedImageUrls((prevUrls) => prevUrls.filter((_, i) => i !== index));
    setLoadingImages((prevLoading) => prevLoading.filter((_, i) => i !== index));
  };
  const handleRemoveVideo = (index: number) => {
    setUploadedVideoUrls((prevUrls) => prevUrls.filter((_, i) => i !== index));
    setLoadingVideos((prevLoading) => prevLoading.filter((_, i) => i !== index));
  };
  ==============================================================================================================
RETURN
------
                  <div style={{ display: 'flex', gap: '20px', flexWrap: 'wrap' }}>
  {uploadedImageUrls.map((url, index) => (
    <div key={index} className="File_Complaint_Wrapper" style={{ position: 'relative' }}>
      <img
        src={url}
        alt={`Uploaded Image ${index}`}
        style={{ width: '100%', height: '100%', objectFit: 'cover', borderRadius: '3px' }}
      />
      <div
        onClick={() => handleRemoveImage(index)}
        style={{
          position: 'absolute',
          top: '-10px',
          right: '-10px',
          cursor: 'pointer',
        }}
      >
        <IconXEc />
      </div>
    </div>
  ))}
  {uploadedVideoUrls.map((url, index) => (
    <div key={index} className="File_Complaint_Wrapper" style={{ position: 'relative' }}>
      <video
        controls
        style={{ width: '100%', height: '100%', objectFit: 'cover', borderRadius: '3px' }}
      >
        <source src={url} type="video/mp4" />
        Your browser does not support the video tag.
      </video>
      <div
        onClick={() => handleRemoveVideo(index)}
        style={{
          position: 'absolute',
          top: '-10px',
          right: '-10px',
          cursor: 'pointer',
        }}
      >
        <IconXEc />
      </div>
    </div>
  ))}
</div>

                </div>
              </div>
              <Modal open={modalVisible} onClose={closeModal} title="Xem video">
  <div style={{ maxHeight: '500px', overflowY: 'auto' }}>
    {uploadedVideoUrls.length > 0 && uploadedVideoUrls.map((url, index) => (
      <video key={index} controls style={{ width: '100%', marginBottom: '15px' }}>
        <source src={url} type="video/mp4" />
        Your browser does not support the video tag.
      </video>
    ))}
  </div>
</Modal>
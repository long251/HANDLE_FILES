import React, { useEffect, useState } from 'react';
import TitleBreadcrumbs from '../../components/Breadcrumb/TitleBreadcrumb.tsx';
import {
  Autocomplete,
  Button,
  ButtonGroup,
  DropZone,
  FormLayout,
  Icon,
  IndexTable,
  Layout,
  LegacyCard,
  LegacyStack,
  Link,
  List,
  Modal,
  Page,
  PolarisIcons,
  Spinner,
  Sticky,
  Text,
} from 'pcs-polaris';
import { useDispatch, useSelector } from 'react-redux';
import { clearToast, showToast } from '../../helpers/toast.ts';
import * as XLSX from 'xlsx';
import { apiClient } from '../../utils/api.ts';
import { formatMoney, routeCurrencyCode } from '../../helpers/currency.ts';
import { moneyAction } from '../../store/reducers/moneyReducer';
import { accountAction } from '../../store/reducers/accountReducer';
import { AppState } from '../../store';
import { useNavigate } from 'react-router-dom';
import CustomImage from '../../components/CustomImage';
import { modalAction } from '../../store/reducers/modalReducer';
import { formatNumber } from '../../helpers/number.ts';
import { trim } from 'lodash';
import { IconUploadImage } from './IconEcommerce.tsx';

const allRegionOptions = [
  {
    label: 'Chọn tuyến',
    value: '',
  },
  {
    label: 'Tuyến Mỹ',
    value: 'US-VN',
  },
  {
    label: 'Tuyến Nhật Bản',
    value: 'JP-VN',
  },
  {
    label: 'Tuyến Hàn Quốc',
    value: 'KR-VN',
  },
  {
    label: 'Tuyến Anh',
    value: 'UK-VN',
  },
  {
    label: 'Tuyến Đức',
    value: 'DE-VN',
  },
  {
    label: 'Tuyến Canada',
    value: 'CA-VN',
  },
  {
    label: 'Tuyến Trung Quốc',
    value: 'CN-VN',
  },
];
const allTransportOptions = [
  { label: 'Chọn hình thức vận chuyển', value: '' },
  { label: 'AIR', value: 'A' },
  { label: 'SEA', value: 'S' },
];
const allDestinationOptions = [
  { label: 'Chọn điểm đến', value: '' },
  { label: 'Hà Nội', value: 'HAN' },
  { label: 'Hồ Chí Minh', value: 'SGN' },
];
const ImportCreate = () => {
  const [step, setStep] = useState(1);
  const dispatch = useDispatch();
  const navigate = useNavigate();
  const moneyState = useSelector((state: AppState) => state.money);
  const accountState = useSelector((state: AppState) => state.account);

  const [regionOptions, setRegionOptions] = useState(allRegionOptions);
  const [searchRoute, setSearchRoute] = useState('Chọn tuyến');
  const [route, setRoute] = useState('');
  const [transportOptions, setTransportOptions] = useState(allTransportOptions);
  const [searchTransport, setSearchTransport] = useState('Chọn hình thức vận chuyển');
  const [transport, setTransport] = useState('');
  const [destinationOptions, setDestinationOptions] = useState(allDestinationOptions);
  const [searchDestination, setSearchDestination] = useState('Chọn điểm đến');
  const [destination, setDestination] = useState('');

  const [errors, setErrors] = useState<string[]>([]);

  const [fileName, setFileName] = useState('');
  const [data, setData] = useState<any>([]);

  const [loadingCompute, setLoadingCompute] = useState(false);
  const [computeData, setComputeData] = useState<any>([]);
  const [allAmount, setAllAmount] = useState(0);
  const [allTotalAmount, setAllTotalAmount] = useState(0);
  const [allAmountFeeBuy, setAllAmountFeeBuy] = useState(0);
  const [allAmountTax, setAllAmountTax] = useState(0);
  const [allAmountVCND, setAllAmountVCND] = useState(0);

  const [address, setAddress] = useState<any>(null);
  const [paymentMethod, setPaymentMethod] = useState('bank_transfer');

  const readFile = (file: File) => {
    const reader = new FileReader();

    reader.onload = (e: any) => {
      setFileName(file.name);
      setComputeData([]);
      const data = new Uint8Array(e.target.result);
      const workbook = XLSX.read(data, { type: 'array' });
      // Assuming only one sheet
      const firstSheetName = workbook.SheetNames[0];
      const worksheet = workbook.Sheets[firstSheetName];

      // Convert to JSON and log
      const jsonData = XLSX.utils.sheet_to_json(worksheet, { header: 1 });
      // console.log(jsonData);
      let items = [];
      for (let i = 4; i < jsonData.length; i++) {
        let row: any = jsonData[i];
        if (row.length) {
          let payload = {
            url: trim(row[1]),
            name: trim(row[2]),
            image: trim(row[3]),
            images: [trim(row[3])],
            price: trim(row[4]),
            quantity: trim(row[5]) ?? 1,
            tax: trim(row[11]),
            shippingFee: trim(row[10]),
            weight: trim(row[9]),
            note: trim(row[13]),
            trackingNote: trim(row[12]),
          };
          let attributes: any = {};
          if (trim(row[6])) {
            attributes['option1'] = trim(row[6]);
          }
          if (trim(row[7])) {
            attributes['option2'] = trim(row[7]);
          }
          if (trim(row[8])) {
            attributes['option3'] = trim(row[8]);
          }
          payload = Object.assign(payload, { attributes: attributes });
          items.push(payload);
        } else {
          break;
        }
      }
      setData(items);
    };
    reader.readAsArrayBuffer(file);
  };

  const getValidators = () => {
    let rules = [];
    if (!route) {
      rules.push('route');
    }
    if (route == 'JP-VN' && !transport) {
      rules.push('transport');
    }
    if (route == 'JP-VN' && transport == 'S' && !destination) {
      rules.push('destination');
    }
    return rules;
  };

  const handleCompute = async () => {
    if (loadingCompute) {
      return;
    }
    clearToast();

    let validators = getValidators();
    setErrors(validators);
    if (validators.length) {
      showToast('Vui lòng nhập đủ thông tin', 'error');
      return;
    }

    if (!data.length) {
      showToast('Không có dữ liệu đơn hàng. Vui lòng chọn lại file import', 'error');
      return;
    }

    setLoadingCompute(true);
    let items = [...data];

    let listComputeResponse = [];
    let tmpAllAmount = 0;
    let tmpAllTotalAmount = 0;
    let tmpAllAmountFeeBuy = 0;
    let tmpAllAmountTax = 0;
    let tmpAllAmountVCND = 0;

    for (let i = 0; i < items.length; i++) {
      let payload = items[i];
      payload = Object.assign(payload, {
        route: route,
      });
      if (route == 'JP-VN') {
        payload = Object.assign(payload, { transportType: transport });
        if (transport == 'S') {
          payload = Object.assign(payload, { destination: destination });
        }
      }
      try {
        let response = await apiClient.post('/api/ShoppingCart/AddShoppingNoCart ', payload);
        if (response.data.status) {
          let cartItems = response.data.data;
          setComputeData(cartItems);
          for (let i = 0; i < cartItems.length; i++) {
            tmpAllAmount += cartItems[i]['amount'];
            tmpAllTotalAmount += cartItems[i]['totalAmount'];
            tmpAllAmountFeeBuy += cartItems[i]['amountFeeBuy'];
            tmpAllAmountTax += cartItems[i]['amountTax'];
            tmpAllAmountVCND += cartItems[i]['amountVCND'];

            listComputeResponse.push(cartItems[i]);
          }
        }
      } catch (e) {
        console.log(e);
      }
    }

    setAllAmount(tmpAllAmount);
    setAllTotalAmount(tmpAllTotalAmount);
    setAllAmountFeeBuy(tmpAllAmountFeeBuy);
    setAllAmountTax(tmpAllAmountTax);
    setAllAmountVCND(tmpAllAmountVCND);
    setComputeData(listComputeResponse);
    setLoadingCompute(false);

    if (listComputeResponse.length) {
      setStep(2);
    } else {
      showToast('Import không thành công', 'error');
      return;
    }
  };

  useEffect(() => {
    dispatch(moneyAction.fetchWallet());
    dispatch(accountAction.fetchAddresses());
  }, []);
  useEffect(() => {
    let addresses = accountState.addresses;
    if (addresses.length) {
      let defaultAddress = addresses[0];
      for (let i = 0; i < addresses.length; i++) {
        if (addresses[i]['active']) {
          defaultAddress = addresses[i];
          break;
        }
      }
      setAddress(defaultAddress);
    }
  }, [accountState.addresses]);

  const [loadingCreateOrder, setLoadingCreateOrder] = useState(false);

  const handleCreateMultiOrder = async () => {
    if (loadingCreateOrder) {
      return;
    }
    clearToast();
    if (!address) {
      showToast('Vui lòng chọn địa chỉ nhận hàng', 'error');
      return;
    }
    if (paymentMethod == 'shipquocte_wallet') {
      let wallet = moneyState.wallet?.cash ?? 0;
      if (wallet < allTotalAmount) {
        showToast('Số dư ví không đủ', 'error');
        return;
      }
    }
    setLoadingCreateOrder(true);
    let orderCodes = [];

    for (let i = 0; i < data.length; i++) {
      let orderReturnCodes = await handleOrder(data[i]);
      for (let j = 0; j < orderReturnCodes.length; j++) {
        orderCodes.push(orderReturnCodes);
      }
    }
    setLoadingCreateOrder(false);
    if (orderCodes.length) {
      // console.log(orderCodes);
      showToast('Import nhiều đơn thành công', 'success');
      navigate(`/don-hang-ecommerce/thanh-toan?items=${orderCodes.join(',')}`);
    } else {
      showToast('Import nhiều đơn không thành công', 'error');
      return;
    }
  };

  const buildPayload = (item: any) => {
    let payload = {
      ...item,
    };
    payload = Object.assign(payload, {
      route: route,
    });
    if (route == 'JP-VN') {
      payload = Object.assign(payload, { transportType: transport });
      if (transport == 'S') {
        payload = Object.assign(payload, { destination: destination });
      }
    }
    return payload;
  };

  const handleOrder = async (item: any) => {
    let orderReturnCodes = [];
    try {
      let payload = {
        customerDistrict: address?.district,
        customerAddress: address?.address,
        customerPhone: address?.phone,
        customerName: address?.name,
        customerProvince: address?.province,
        customerWard: address?.ward,
        orderInfo: buildPayload(item),
        note: '',
        paymentMethod: paymentMethod,
      };
      let response = await apiClient.post('/api/Order/AddNewOrderEcoNoCart', payload);
      if (response.data.status) {
        let data = response.data.data;
        let orders = data.ordersReturn;
        if (Array.isArray(orders)) {
          for (let i = 0; i < orders.length; i++) {
            orderReturnCodes.push(orders[i].orderCode);
          }
        }
      }
    } catch (e) {
      console.log(e);
    }
    return orderReturnCodes;
  };

  const [openModalSelectAddress, setOpenModalSelectAddress] = useState(false);

  return (
    <div className={'Polaris-Custom Title_Breadcrumb'}>
      <Page
        //@ts-ignore
        title={<TitleBreadcrumbs breadcrumbs={[{ title: 'Import nhiều đơn Ecommerce', url: '' }]} />}
      >
        {step == 1 ? (
          <Layout>
            <Layout.Section>
              <LegacyCard title={'Nhập thông tin'}>
                <LegacyCard.Section title={'Tuyến vận chuyển'}>
                  <FormLayout>
                    <FormLayout.Group>
                      <Autocomplete
                        options={regionOptions}
                        selected={[route]}
                        onSelect={(selected) => {
                          setRoute(selected[0]);
                          const selectedText = selected.map((selectedItem) => {
                            const matchedOption = regionOptions.find((option) => {
                              return option['value'] == selectedItem;
                            });
                            if (matchedOption) {
                              return `${matchedOption['label']}`;
                            }
                            return '';
                          });
                          setSearchRoute(selectedText[0]);
                        }}
                        textField={
                          <Autocomplete.TextField
                            error={errors.includes('route') ? 'Vui lòng chọn tuyến' : false}
                            value={searchRoute}
                            onChange={(value) => {
                              setSearchRoute(value);
                              if (value) {
                                let tmp: any = [];
                                for (let i = 0; i < allRegionOptions.length; i++) {
                                  let label: any = allRegionOptions[i]['label'];
                                  if (label.toLowerCase().includes(value.toLowerCase())) {
                                    tmp.push(allRegionOptions[i]);
                                  }
                                }
                                setRegionOptions(tmp);
                              } else {
                                setRegionOptions(allRegionOptions);
                              }
                            }}
                            requiredIndicator
                            suffix={<Icon source={PolarisIcons.CaretDownMinor} />}
                            autoComplete={'off'}
                            label={'Tuyến'}
                          />
                        }
                      />
                      {route == 'JP-VN' ? (
                        <Autocomplete
                          options={transportOptions}
                          selected={[transport]}
                          onSelect={(selected) => {
                            setTransport(selected[0]);
                            const selectedText = selected.map((selectedItem) => {
                              const matchedOption = transportOptions.find((option) => {
                                return option['value'] == selectedItem;
                              });
                              if (matchedOption) {
                                return `${matchedOption['label']}`;
                              }
                              return '';
                            });
                            setSearchTransport(selectedText[0]);
                          }}
                          textField={
                            <Autocomplete.TextField
                              error={errors.includes('transport') ? 'Vui lòng chọn hình thức vận chuyển' : false}
                              value={searchTransport}
                              onChange={(value) => {
                                setSearchTransport(value);
                                if (value) {
                                  let tmp: any = [];
                                  for (let i = 0; i < allTransportOptions.length; i++) {
                                    let label: any = allTransportOptions[i]['label'];
                                    if (label.toLowerCase().includes(value.toLowerCase())) {
                                      tmp.push(allTransportOptions[i]);
                                    }
                                  }
                                  setTransportOptions(tmp);
                                } else {
                                  setTransportOptions(allTransportOptions);
                                }
                              }}
                              suffix={<Icon source={PolarisIcons.CaretDownMinor} />}
                              autoComplete={'off'}
                              requiredIndicator
                              label={'Hình thức vận chuyển'}
                            />
                          }
                        />
                      ) : null}

                      {route == 'JP-VN' && transport == 'S' ? (
                        <Autocomplete
                          options={destinationOptions}
                          selected={[destination]}
                          onSelect={(selected) => {
                            setDestination(selected[0]);
                            const selectedText = selected.map((selectedItem) => {
                              const matchedOption = destinationOptions.find((option) => {
                                return option['value'] == selectedItem;
                              });
                              if (matchedOption) {
                                return `${matchedOption['label']}`;
                              }
                              return '';
                            });
                            setSearchDestination(selectedText[0]);
                          }}
                          textField={
                            <Autocomplete.TextField
                              error={errors.includes('destination') ? 'Vui lòng chọn điểm đến' : false}
                              value={searchDestination}
                              onChange={(value) => {
                                setSearchDestination(value);
                                if (value) {
                                  let tmp: any = [];
                                  for (let i = 0; i < allDestinationOptions.length; i++) {
                                    let label: any = allDestinationOptions[i]['label'];
                                    if (label.toLowerCase().includes(value.toLowerCase())) {
                                      tmp.push(allDestinationOptions[i]);
                                    }
                                  }
                                  setDestinationOptions(tmp);
                                } else {
                                  setDestinationOptions(allDestinationOptions);
                                }
                              }}
                              suffix={<Icon source={PolarisIcons.CaretDownMinor} />}
                              autoComplete={'off'}
                              requiredIndicator
                              label={'Điểm đến'}
                            />
                          }
                        />
                      ) : null}
                    </FormLayout.Group>
                  </FormLayout>
                </LegacyCard.Section>
                <LegacyCard.Section
                  title={'Import file'}
                  actions={[
                    {
                      content: 'Tải mẫu file import',
                      icon: PolarisIcons.ImportMinor,
                      url: '/files/ECM_IMPORT_TEMPLATE.xlsx',
                      external: true,
                    },
                  ]}
                >
                  <FormLayout>
                    <div className={'DropZone-Custom'}>
                      <DropZone
                        type={'file'}
                        accept={'.xlsx'}
                        onDrop={(files) => {
                          readFile(files[0]);
                        }}
                      >
                        <DropZone.FileUpload actionHint={'Vui lòng chọn file .xlsx'} />
                      </DropZone>
                    </div>
                    <div className='Drop_Zone_Import_Ecommerce'><IconUploadImage/>Upload File</div>
                    <p className='Drop_Zone_Import_Text'>Vui lòng chọn file .xlsx</p>
                    {fileName ? (
                      <LegacyStack>
                        <LegacyStack.Item>
                          <Text as={'p'}>{fileName}</Text>
                        </LegacyStack.Item>
                        <LegacyStack>
                          <Button
                            onClick={() => {
                              setFileName('');
                              setData([]);
                              setComputeData([]);
                            }}
                            plain
                            destructive
                            icon={PolarisIcons.DeleteMinor}
                          />
                        </LegacyStack>
                      </LegacyStack>
                    ) : null}
                  </FormLayout>
                </LegacyCard.Section>
                {data.length ? (
                  <LegacyCard.Section title={'Dữ liệu import'}>
                    <div className={'IndexTable--NoSticky'}>
                      <IndexTable
                        selectable={false}
                        headings={[
                          { title: 'Ảnh sản phẩm' },
                          { title: 'Tên sản phẩm' },
                          { title: 'Đơn giá' },
                          { title: 'Số lượng' },
                          { title: 'Trọng lượng' },
                          { title: 'Phí V/C nội địa' },
                          { title: 'Thuế' },
                          { title: 'Ghi chú' },
                        ]}
                        itemCount={data.length}
                      >
                        {data.map((item: any, index: number) => {
                          let attributes = item.attributes;
                          let url = item.url;
                          return (
                            <IndexTable.Row
                              id={item.id}
                              key={index}
                              position={index}
                              onClick={() => {
                                console.log('');
                              }}
                            >
                              <IndexTable.Cell>
                                <div>
                                  <CustomImage src={item.image} alt={item.name} />
                                </div>
                              </IndexTable.Cell>
                              <IndexTable.Cell>
                                <div className={'Cell-ProductName'}>
                                  <Link onClick={() => window.open(url, '_blank')} removeUnderline url={'#'}>
                                    {item.name}
                                  </Link>
                                </div>
                                {Object.keys(attributes).length ? (
                                  <div style={{ display: 'flex', flexDirection: 'column', gap: 4 }}>
                                    {Object.keys(attributes).map((key: string, idx: number) => (
                                      <div key={idx}>
                                        <Text as={'p'} variant={'bodySm'}>
                                          {key}: {attributes[key]}
                                        </Text>
                                      </div>
                                    ))}
                                  </div>
                                ) : null}
                                {item.trackingNote ? (
                                  <div>
                                    <Text as={'p'} variant={'bodySm'}>
                                      Nick đấu: {item.trackingNote}
                                    </Text>
                                  </div>
                                ) : null}
                              </IndexTable.Cell>
                              <IndexTable.Cell>
                                <div style={{ display: 'flex', flexDirection: 'column', gap: 4 }}>
                                  <Text as={'p'} variant={'bodySm'}>
                                    {formatMoney(item.price, routeCurrencyCode(route))}
                                  </Text>
                                </div>
                              </IndexTable.Cell>
                              <IndexTable.Cell>{item.quantity}</IndexTable.Cell>
                              <IndexTable.Cell>{item.weight ? `${formatNumber(item.weight)} kg` : ''}</IndexTable.Cell>
                              <IndexTable.Cell>
                                {item.shippingFee ? `${formatMoney(item.shippingFee, routeCurrencyCode(route))}` : ''}
                              </IndexTable.Cell>
                              <IndexTable.Cell>{item.tax ? `${formatNumber(item.tax)}%` : ''}</IndexTable.Cell>
                              <IndexTable.Cell>{item.note}</IndexTable.Cell>
                            </IndexTable.Row>
                          );
                        })}
                      </IndexTable>
                    </div>
                  </LegacyCard.Section>
                ) : null}
              </LegacyCard>
            </Layout.Section>
          </Layout>
        ) : null}

        {step == 2 ? (
          <Layout>
            <Layout.Section>
              <LegacyCard>
                <LegacyCard.Section title={'Danh sách sản phẩm'}>
                  <div className={'IndexTable--NoSticky'}>
                    <IndexTable
                      selectable={false}
                      headings={[
                        { title: 'Ảnh sản phẩm' },
                        { title: 'Tên sản phẩm' },
                        { title: 'Đơn giá' },
                        { title: 'Số lượng' },
                        { title: 'Tổng tiền' },
                      ]}
                      itemCount={computeData.length}
                    >
                      {computeData.map((item: any, index: number) => {
                        let attributes = item.attributes;
                        let url = item.url;
                        return (
                          <IndexTable.Row
                            id={item.id}
                            key={index}
                            position={index}
                            onClick={() => {
                              console.log('');
                            }}
                          >
                            <IndexTable.Cell>
                              <div>
                                <CustomImage src={item.image} alt={item.name} />
                              </div>
                            </IndexTable.Cell>
                            <IndexTable.Cell>
                              <div className={'Cell-ProductName'}>
                                <Link onClick={() => window.open(url, '_blank')} removeUnderline url={'#'}>
                                  {item.name}
                                </Link>
                              </div>
                              {Object.keys(attributes).length ? (
                                <div style={{ display: 'flex', flexDirection: 'column', gap: 4 }}>
                                  {Object.keys(attributes).map((key: string, idx: number) => (
                                    <div key={idx}>
                                      <Text as={'p'} variant={'bodySm'}>
                                        {key}: {attributes[key]}
                                      </Text>
                                    </div>
                                  ))}
                                </div>
                              ) : null}
                            </IndexTable.Cell>
                            <IndexTable.Cell>
                              <div style={{ display: 'flex', flexDirection: 'column', gap: 4 }}>
                                <Text as={'p'} variant={'bodyMd'}>
                                  {formatMoney(item.priceVND, 'VND')}
                                </Text>
                                <Text as={'p'} variant={'bodySm'}>
                                  ~{formatMoney(item.price, item.currency)}
                                </Text>
                              </div>
                            </IndexTable.Cell>
                            <IndexTable.Cell>{item.quantity}</IndexTable.Cell>
                            <IndexTable.Cell>{formatMoney(item.amount, 'VND')}</IndexTable.Cell>
                          </IndexTable.Row>
                        );
                      })}
                    </IndexTable>
                  </div>
                </LegacyCard.Section>
                <LegacyCard.Section
                  title={'Địa chỉ nhận hàng'}
                  actions={[
                    {
                      content: 'Danh sách địa chỉ',
                      onAction() {
                        setOpenModalSelectAddress(true);
                      },
                    },
                  ]}
                >
                  {accountState.addresses_loading ? (
                    <LegacyStack distribution={'center'}>
                      <Spinner size={'small'} />
                    </LegacyStack>
                  ) : (
                    <>
                      {address ? (
                        <LegacyStack>
                          <LegacyStack.Item fill>
                            <LegacyStack vertical spacing={'extraTight'}>
                              <Text as={'p'} variant={'bodyMd'} fontWeight={'semibold'}>
                                {address.name}
                              </Text>
                              <Text as={'p'} variant={'bodyMd'}>
                                {address.phone}
                              </Text>
                              <Text as={'p'} variant={'bodyMd'}>
                                {address.fullAddress}
                              </Text>
                            </LegacyStack>
                          </LegacyStack.Item>
                          {/*<LegacyStack.Item>*/}
                          {/*  <Button*/}
                          {/*    icon={PolarisIcons.EditMajor}*/}
                          {/*    plain*/}
                          {/*    onClick={() => {*/}
                          {/*      let tmpAddress = { ...address };*/}
                          {/*      tmpAddress = Object.assign(tmpAddress, {*/}
                          {/*        callback: (data: any) => setAddress(data),*/}
                          {/*        is_post_update: false,*/}
                          {/*      });*/}
                          {/*      dispatch(*/}
                          {/*        modalAction.openModal({*/}
                          {/*          type: 'edit_address',*/}
                          {/*          title: 'Sửa địa chỉ nhận hàng',*/}
                          {/*          data: tmpAddress,*/}
                          {/*        }),*/}
                          {/*      );*/}
                          {/*    }}*/}
                          {/*  />*/}
                          {/*</LegacyStack.Item>*/}
                        </LegacyStack>
                      ) : (
                        <Text as={'span'} variant={'bodyMd'}>
                          Chưa có địa chỉ nhận hàng
                        </Text>
                      )}
                    </>
                  )}
                </LegacyCard.Section>
                <LegacyCard.Section title={'Phương thức thanh toán'}>
                  <LegacyStack spacing={'tight'}>
                    <LegacyStack.Item>
                      <div
                        style={{
                          background: paymentMethod == 'bank_transfer' ? '#0B3558' : '#EFF1F4',
                          color: paymentMethod == 'bank_transfer' ? 'white' : '#0B3558',
                          display: 'flex',
                          padding: '8px 16px',
                          borderRadius: 4,
                          alignItems: 'center',
                          justifyContent: 'center',
                          gap: 8,
                          cursor: 'pointer',
                        }}
                        onClick={() => setPaymentMethod('bank_transfer')}
                      >
                        <svg width='22' height='20' viewBox='0 0 22 20' fill='none' xmlns='http://www.w3.org/2000/svg'>
                          <path
                            d='M1 10.6099H18'
                            stroke='currentColor'
                            strokeWidth='1.5'
                            strokeMiterlimit='10'
                            strokeLinecap='round'
                            strokeLinejoin='round'
                          />
                          <path
                            d='M18 8.28005V15.43C17.97 18.28 17.19 19 14.22 19H4.78003C1.76003 19 1 18.2501 1 15.2701V8.28005C1 5.58005 1.63 4.71005 4 4.57005C4.24 4.56005 4.50003 4.55005 4.78003 4.55005H14.22C17.24 4.55005 18 5.30005 18 8.28005Z'
                            stroke='currentColor'
                            strokeWidth='1.5'
                            strokeLinecap='round'
                            strokeLinejoin='round'
                          />
                          <path
                            d='M21 4.73V11.72C21 14.42 20.37 15.29 18 15.43V8.28C18 5.3 17.24 4.55 14.22 4.55H4.78003C4.50003 4.55 4.24 4.56 4 4.57C4.03 1.72 4.81003 1 7.78003 1H17.22C20.24 1 21 1.75 21 4.73Z'
                            stroke='currentColor'
                            strokeWidth='1.5'
                            strokeLinecap='round'
                            strokeLinejoin='round'
                          />
                          <path
                            d='M4.25 15.8101H5.96997'
                            stroke='currentColor'
                            strokeWidth='1.5'
                            strokeMiterlimit='10'
                            strokeLinecap='round'
                            strokeLinejoin='round'
                          />
                          <path
                            d='M8.10986 15.8101H11.5499'
                            stroke='currentColor'
                            strokeWidth='1.5'
                            strokeMiterlimit='10'
                            strokeLinecap='round'
                            strokeLinejoin='round'
                          />
                        </svg>
                        <span>Chuyển khoản ngân hàng</span>
                      </div>
                    </LegacyStack.Item>
                    <LegacyStack.Item>
                      <div
                        style={{
                          background: paymentMethod == 'shipquocte_wallet' ? '#0B3558' : '#EFF1F4',
                          color: paymentMethod == 'shipquocte_wallet' ? 'white' : '#0B3558',
                          display: 'flex',
                          padding: '8px 16px',
                          borderRadius: 4,
                          alignItems: 'center',
                          justifyContent: 'center',
                          gap: 8,
                          cursor: 'pointer',
                        }}
                        onClick={() => setPaymentMethod('shipquocte_wallet')}
                      >
                        <svg width='22' height='20' viewBox='0 0 22 20' fill='none' xmlns='http://www.w3.org/2000/svg'>
                          <path
                            d='M12 9.16919H6'
                            stroke='currentColor'
                            strokeWidth='1.5'
                            strokeLinecap='round'
                            strokeLinejoin='round'
                          />
                          <path
                            d='M1 9.16939V4.62757C1 2.62208 2.65 1 4.69 1H10.31C12.35 1 14 2.24851 14 4.25399'
                            stroke='currentColor'
                            strokeWidth='1.5'
                            strokeLinecap='round'
                            strokeLinejoin='round'
                          />
                          <path
                            d='M16.48 10.2015C15.98 10.6734 15.74 11.4009 15.94 12.148C16.19 13.0623 17.11 13.6423 18.07 13.6423H19V15.0678C19 17.2404 17.21 19.0001 15 19.0001H5C2.79 19.0001 1 17.2404 1 15.0678V8.18622C1 6.01362 2.79 4.25391 5 4.25391H15C17.2 4.25391 19 6.02345 19 8.18622V9.61164H17.92C17.36 9.61164 16.85 9.82795 16.48 10.2015Z'
                            stroke='currentColor'
                            strokeWidth='1.5'
                            strokeLinecap='round'
                            strokeLinejoin='round'
                          />
                          <path
                            d='M21 10.6146V12.6397C21 13.1902 20.5399 13.6425 19.9699 13.6425H18.0399C16.9599 13.6425 15.97 12.8658 15.88 11.8041C15.82 11.1848 16.0599 10.6048 16.4799 10.2017C16.8499 9.82813 17.36 9.61182 17.92 9.61182H19.9699C20.5399 9.61182 21 10.0641 21 10.6146Z'
                            stroke='currentColor'
                            strokeWidth='1.5'
                            strokeLinecap='round'
                            strokeLinejoin='round'
                          />
                        </svg>
                        <span>{`Ví SHIPQUOCTE (số dư: ${formatMoney(moneyState.wallet?.cash ?? 0, 'VND')})`}</span>
                      </div>
                    </LegacyStack.Item>
                  </LegacyStack>
                </LegacyCard.Section>
              </LegacyCard>
            </Layout.Section>
            <Layout.Section secondary>
              <Sticky>
                <LegacyCard>
                  <LegacyCard.Section title={'Thông tin thanh toán'}>
                    <FormLayout>
                      <LegacyStack>
                        <LegacyStack.Item fill>Tổng tiền sản phẩm</LegacyStack.Item>
                        <LegacyStack.Item>
                          <Text as={'span'} variant={'bodyMd'} fontWeight={'semibold'}>
                            {formatMoney(allAmount, 'VND')}
                          </Text>
                        </LegacyStack.Item>
                      </LegacyStack>
                      <LegacyStack>
                        <LegacyStack.Item fill>Phụ phí</LegacyStack.Item>
                        <LegacyStack.Item>
                          <Text as={'span'} variant={'bodyMd'} fontWeight={'semibold'}>
                            {formatMoney(allAmountFeeBuy + allAmountTax + allAmountVCND, 'VND')}
                          </Text>
                        </LegacyStack.Item>
                      </LegacyStack>
                      <List>
                        <List.Item>
                          <LegacyStack>
                            <LegacyStack.Item fill>Công mua</LegacyStack.Item>
                            <LegacyStack.Item>{formatMoney(allAmountFeeBuy, 'VND')}</LegacyStack.Item>
                          </LegacyStack>
                        </List.Item>
                        <List.Item>
                          <LegacyStack>
                            <LegacyStack.Item fill>Thuế</LegacyStack.Item>
                            <LegacyStack.Item>{formatMoney(allAmountTax, 'VND')}</LegacyStack.Item>
                          </LegacyStack>
                        </List.Item>
                        <List.Item>
                          <LegacyStack>
                            <LegacyStack.Item fill>Phí vận chuyển nội địa</LegacyStack.Item>
                            <LegacyStack.Item>{formatMoney(allAmountVCND, 'VND')}</LegacyStack.Item>
                          </LegacyStack>
                        </List.Item>
                      </List>
                    </FormLayout>
                  </LegacyCard.Section>
                  <LegacyCard.Section>
                    <LegacyStack>
                      <LegacyStack.Item fill>Tổng tiền tạm tính</LegacyStack.Item>
                      <LegacyStack.Item>
                        <Text as={'span'} variant={'bodyMd'} fontWeight={'semibold'}>
                          {formatMoney(allTotalAmount, 'VND')}
                        </Text>
                      </LegacyStack.Item>
                    </LegacyStack>
                  </LegacyCard.Section>
                </LegacyCard>
              </Sticky>
            </Layout.Section>
          </Layout>
        ) : null}
      </Page>
      {step == 1 ? (
        <div className={'BottomActions'}>
          <LegacyCard>
            <LegacyCard.Section>
              <LegacyStack distribution={'equalSpacing'} alignment={'center'}>
                <LegacyStack.Item fill></LegacyStack.Item>
                <LegacyStack.Item>
                  <ButtonGroup>
                    <Button
                      primary
                      loading={loadingCompute}
                      onClick={() => {
                        handleCompute();
                      }}
                    >
                      Tiếp theo
                    </Button>
                  </ButtonGroup>
                </LegacyStack.Item>
              </LegacyStack>
            </LegacyCard.Section>
          </LegacyCard>
        </div>
      ) : null}

      {step == 2 ? (
        <div className={'BottomActions'}>
          <LegacyCard>
            <LegacyCard.Section>
              <LegacyStack distribution={'equalSpacing'} alignment={'center'}>
                <LegacyStack.Item fill>
                  <Button onClick={() => setStep(1)}>Quay lại thông tin sản phẩm</Button>
                </LegacyStack.Item>
                <LegacyStack.Item>
                  <ButtonGroup>
                    <Button
                      primary
                      loading={loadingCreateOrder}
                      onClick={() => {
                        handleCreateMultiOrder();
                      }}
                    >
                      {`Đặt hàng và thanh toán (${formatMoney(allTotalAmount, 'VND')})`}
                    </Button>
                  </ButtonGroup>
                </LegacyStack.Item>
              </LegacyStack>
            </LegacyCard.Section>
          </LegacyCard>
        </div>
      ) : null}

      <Modal
        title={'Chọn địa chỉ nhận hàng'}
        open={openModalSelectAddress}
        onClose={() => setOpenModalSelectAddress(false)}
      >
        <Modal.Section flush>
          <LegacyCard
            actions={[
              {
                content: 'Thêm địa chỉ mới',
                onAction() {
                  setOpenModalSelectAddress(false);
                  dispatch(
                    modalAction.openModal({
                      type: 'create_address',
                      title: 'Thêm địa chỉ nhận hàng',
                      data: {
                        callback: () => {
                          setOpenModalSelectAddress(true);
                        },
                      },
                    }),
                  );
                },
              },
            ]}
          >
            {accountState.addresses.map((item: any, index: number) => (
              <LegacyCard.Section key={index} flush subdued={address && item.id == address.id}>
                <div
                  style={{
                    cursor: 'pointer',
                    width: '100%',
                    padding: '12px 20px',
                  }}
                  onClick={() => {
                    setAddress(item);
                    setOpenModalSelectAddress(false);
                  }}
                >
                  <Text as={'h2'} variant={'bodyMd'} fontWeight={'semibold'}>
                    {item.name}
                  </Text>
                  <div>{item.phone}</div>
                  <div>{item.fullAddress}</div>
                </div>
              </LegacyCard.Section>
            ))}
          </LegacyCard>
        </Modal.Section>
      </Modal>
    </div>
  );
};

export default ImportCreate;

import React, { useEffect, useState } from 'react';
import TitleBreadcrumbs from '../../components/Breadcrumb/TitleBreadcrumb.tsx';
import {
  Button,
  ButtonGroup,
  FormLayout,
  IndexTable,
  Layout,
  LegacyCard,
  LegacyStack,
  Link,
  List,
  Modal,
  Page,
  PolarisIcons,
  Spinner,
  Sticky,
  Text,
} from 'pcs-polaris';
import ItemCreate from './ItemCreate.tsx';
import { clearToast, showToast } from '../../helpers/toast.ts';
import { apiClient } from '../../utils/api.ts';
import { useDispatch, useSelector } from 'react-redux';
import { AppState } from '../../store';
import { moneyAction } from '../../store/reducers/moneyReducer';
import { accountAction } from '../../store/reducers/accountReducer';
import { cartAction } from '../../store/reducers/cartReducer';
import { CreateForm, ecommerceOrderAction } from '../../store/reducers/ecommerceOrderReducer';
import { formatMoney } from '../../helpers/currency.ts';
import CustomImage from '../../components/CustomImage';
import { modalAction } from '../../store/reducers/modalReducer';
import { useNavigate } from 'react-router-dom';
import { IconVectorNext } from '../DeliveryBill/IconDeliveryBill.tsx';

const MultiCreate = () => {
  const navigate = useNavigate();
  const [step, setStep] = useState(1);
  const reduxDispatch = useDispatch();
  const moneyState = useSelector((state: AppState) => state.money);
  const accountState = useSelector((state: AppState) => state.account);
  const ecommerceOrderState = useSelector((state: AppState) => state.ecommerceOrder);

  const emptyProduct: CreateForm = {
    url: '',
    name: '',
    price: '0',
    quantity: '1',

    options: [],
    option1Label: '',
    option1Value: '',
    option2Label: '',
    option2Value: '',
    option3Label: '',
    option3Value: '',

    images: [],

    tax: '0',
    shippingFee: '0',
    weight: '0',
    auctionNick: '',
    note: '',

    route: '',
    transport: '',
    destination: '',

    outOfStock: false,
    errors: [],

    searchRoute: 'Chọn tuyến',
    searchTransport: 'Chọn hình thức vận chuyển',
    searchDestination: 'Chọn điểm đến',
    extraOption: 3,
    variants: [],
    productData: null,
  };
  useEffect(() => {
    reduxDispatch(moneyAction.fetchWallet());
    reduxDispatch(accountAction.fetchAddresses());
  }, []);
  useEffect(() => {
    let addresses = accountState.addresses;
    if (addresses.length) {
      let defaultAddress = addresses[0];
      for (let i = 0; i < addresses.length; i++) {
        if (addresses[i]['active']) {
          defaultAddress = addresses[i];
          break;
        }
      }
      setAddress(defaultAddress);
    }
  }, [accountState.addresses]);

  useEffect(() => {
    if (ecommerceOrderState.create_forms.length == 0) {
      addProduct();
    }
  }, []);

  const addProduct = () => {
    reduxDispatch(
      ecommerceOrderAction.addForm({
        data: {
          form: emptyProduct,
        },
      }),
    );
  };

  const resetPage = () => {
    location.reload();
  };

  const [loadingAddToCart, setLoadingAddToCart] = useState(false);
  const [openModalGoCart, setOpenModalGoCart] = useState(false);
  const [loadingCompute, setLoadingCompute] = useState(false);

  const getValidators = () => {
    let errors = [];
    let products = ecommerceOrderState.create_forms;
    for (let i = 0; i < products.length; i++) {
      let rules = [];
      let product = products[i];
      if (!product.url) {
        rules.push('url');
      }
      if (!product.name) {
        rules.push('name');
      }
      if (Number(product.price) <= 0) {
        rules.push('price');
      }
      if (Number(product.quantity) <= 0) {
        rules.push('quantity');
      }
      if (!product.images.length) {
        rules.push('images');
      }
      if (!product.route) {
        rules.push('route');
      }
      if (product.route == 'JP-VN' && !product.transport) {
        rules.push('transport');
      }
      if (product.route == 'JP-VN' && product.transport == 'S' && !product.destination) {
        rules.push('destination');
      }
      for (let i = 0; i < product.options.length; i++) {
        if (product.options[i].selected.value == '') {
          rules.push(`option_${i}`);
        }
      }
      if (product.option1Label && !product.option1Value) {
        rules.push('option1_value');
      }
      if (product.option2Label && !product.option2Value) {
        rules.push('option2_value');
      }
      if (product.option3Label && !product.option3Value) {
        rules.push('option3_value');
      }
      if (product.url.includes('https://') && product.url.includes('yahoo') && product.url.includes('auction')) {
        if (!product.auctionNick) {
          rules.push('auction');
        }
      }
      errors.push(rules);
    }
    return errors;
  };

  const [computeData, setComputeData] = useState<any>([]);
  const [allAmount, setAllAmount] = useState(0);
  const [allTotalAmount, setAllTotalAmount] = useState(0);
  const [allAmountFeeBuy, setAllAmountFeeBuy] = useState(0);
  const [allAmountTax, setAllAmountTax] = useState(0);
  const [allAmountVCND, setAllAmountVCND] = useState(0);

  const [address, setAddress] = useState<any>(null);
  const [paymentMethod, setPaymentMethod] = useState('bank_transfer');

  const buildPayload = (product: CreateForm) => {
    let payload = {
      url: product.url,
      name: product.name,
      quantity: product.quantity,
      price: product.price,
      route: product.route,
      image: product.images[0],
      images: product.images,
      tax: product.tax,
      shippingFee: product.shippingFee,
      weight: product.weight,
      note: product.note,
      trackingNote: product.auctionNick,
      input_from: 'form',
    };
    let attributes: any = {};
    for (let i = 0; i < product.options.length; i++) {
      let label = product.options[i].label;
      let valueLabel = product.options[i].selected.label;
      attributes[label] = valueLabel;
    }
    if (product.option1Value) {
      if (product.option1Label) {
        attributes[product.option1Label] = product.option1Value;
      } else {
        attributes['option1'] = product.option1Value;
      }
    }
    if (product.option2Value) {
      if (product.option2Label) {
        attributes[product.option2Label] = product.option2Value;
      } else {
        attributes['option2'] = product.option2Value;
      }
    }
    if (product.option3Value) {
      if (product.option3Label) {
        attributes[product.option3Label] = product.option3Value;
      } else {
        attributes['option3'] = product.option3Value;
      }
    }
    payload = Object.assign(payload, { attributes: attributes });
    if (product.route == 'JP-VN') {
      payload = Object.assign(payload, { transportType: product.transport });
      if (product.transport == 'S') {
        payload = Object.assign(payload, { destination: product.destination });
      }
    }
    return payload;
  };

  const handleCompute = async () => {
    if (loadingCompute || loadingAddToCart) {
      return;
    }
    clearToast();
    let products = ecommerceOrderState.create_forms;
    let hasOutOfStock = -1;
    for (let i = 0; i < products.length; i++) {
      if (products[i].outOfStock) {
        hasOutOfStock = i;
        break;
      }
    }
    if (hasOutOfStock > -1) {
      showToast(`Vui lòng kiểm tra lại. Sản phẩm ${hasOutOfStock + 1} đã hết hàng`, 'error');
      return;
    }

    let validators = getValidators();
    let error = false;
    for (let i = 0; i < products.length; i++) {
      if (validators[i].length) {
        error = true;
      }
      reduxDispatch(
        ecommerceOrderAction.updateFormField({
          data: {
            index: i,
            field: 'errors',
            value: validators[i],
          },
        }),
      );
    }
    if (error) {
      showToast('Vui lòng nhập đủ thông tin', 'error');
      return;
    }
    setLoadingCompute(true);
    let productErrors = [];

    let tmpAllAmount = 0;
    let tmpAllTotalAmount = 0;
    let tmpAllAmountFeeBuy = 0;
    let tmpAllAmountTax = 0;
    let tmpAllAmountVCND = 0;

    let tmpComputeData = [];

    for (let i = 0; i < products.length; i++) {
      try {
        let payload = buildPayload(products[i]);
        console.log(payload);

        let response = await apiClient.post('/api/ShoppingCart/AddShoppingNoCart', payload);
        if (response.data.status) {
          let cartItems = response.data.data;
          for (let i = 0; i < cartItems.length; i++) {
            tmpAllAmount += cartItems[i]['amount'];
            tmpAllTotalAmount += cartItems[i]['totalAmount'];
            tmpAllAmountFeeBuy += cartItems[i]['amountFeeBuy'];
            tmpAllAmountTax += cartItems[i]['amountTax'];
            tmpAllAmountVCND += cartItems[i]['amountVCND'];
            tmpComputeData.push(cartItems[i]);
          }
        } else {
          productErrors.push(products[i]);
        }
      } catch (e) {
        console.log(e);
        productErrors.push(products[i]);
      }
    }

    setAllAmount(tmpAllAmount);
    setAllTotalAmount(tmpAllTotalAmount);
    setAllAmountFeeBuy(tmpAllAmountFeeBuy);
    setAllAmountTax(tmpAllAmountTax);
    setAllAmountVCND(tmpAllAmountVCND);
    setComputeData(tmpComputeData);

    setStep(2);
    setLoadingCompute(false);
  };

  const handleAddToCart = async () => {
    if (loadingCompute || loadingAddToCart) {
      return;
    }
    clearToast();
    let products = ecommerceOrderState.create_forms;
    let hasOutOfStock = -1;
    for (let i = 0; i < products.length; i++) {
      if (products[i].outOfStock) {
        hasOutOfStock = i;
        break;
      }
    }
    if (hasOutOfStock > -1) {
      showToast(`Vui lòng kiểm tra lại. Sản phẩm ${hasOutOfStock + 1} đã hết hàng`, 'error');
      return;
    }

    let validators = getValidators();
    let error = false;
    for (let i = 0; i < products.length; i++) {
      if (validators[i].length) {
        error = true;
      }
      reduxDispatch(
        ecommerceOrderAction.updateFormField({
          data: {
            index: i,
            field: 'errors',
            value: validators[i],
          },
        }),
      );
    }
    if (error) {
      showToast('Vui lòng nhập đủ thông tin', 'error');
      return;
    }

    setLoadingAddToCart(true);
    let productErrors = [];

    for (let i = 0; i < products.length; i++) {
      try {
        let payload = buildPayload(products[i]);
        console.log(payload);

        let response = await apiClient.post('/api/ShoppingCart/AddShoppingCart', payload);
        if (response.data.status) {
          let cartItems = response.data.data;
          console.log(cartItems);
        } else {
          productErrors.push(products[i]);
        }
      } catch (e) {
        console.log(e);
        productErrors.push(products[i]);
      }
    }
    let productLength = products.length;
    let productErrorLength = productErrors.length;
    if (productErrorLength) {
      if (productLength == productErrorLength) {
        showToast(`Đã xảy ra lỗi`, 'error');
      } else {
        showToast(
          `Đã thêm ${
            productLength - productErrorLength
          } sản phẩm vào giỏ hàng, ${productErrorLength} sản phẩm chưa được thêm vào giỏ hàng`,
          'success',
        );
        reduxDispatch(cartAction.fetchCart());
        reduxDispatch(
          ecommerceOrderAction.setForms({
            data: {
              forms: [],
            },
          }),
        );
        setTimeout(function () {
          reduxDispatch(
            ecommerceOrderAction.setForms({
              data: {
                form: emptyProduct,
              },
            }),
          );
        }, 200);
      }
    } else {
      showToast(`Đã thêm ${productLength} sản phẩm vào giỏ hàng`, 'success');
      reduxDispatch(cartAction.fetchCart());
      reduxDispatch(
        ecommerceOrderAction.setForms({
          data: {
            forms: [],
          },
        }),
      );
      setTimeout(function () {
        reduxDispatch(
          ecommerceOrderAction.addForm({
            data: {
              form: emptyProduct,
            },
          }),
        );
      }, 200);
      setOpenModalGoCart(true);
    }

    setLoadingAddToCart(false);
  };

  const [openModalSelectAddress, setOpenModalSelectAddress] = useState(false);
  const [loadingCreateOrder, setLoadingCreateOrder] = useState(false);

  const handleOrder = async (item: any) => {
    let orderReturnCodes = [];
    try {
      let payload = {
        customerDistrict: address?.district,
        customerAddress: address?.address,
        customerPhone: address?.phone,
        customerName: address?.name,
        customerProvince: address?.province,
        customerWard: address?.ward,
        orderInfo: buildPayload(item),
        note: '',
        paymentMethod: paymentMethod,
      };
      let response = await apiClient.post('/api/Order/AddNewOrderEcoNoCart', payload);
      if (response.data.status) {
        let data = response.data.data;
        let orders = data.ordersReturn;
        if (Array.isArray(orders)) {
          for (let i = 0; i < orders.length; i++) {
            orderReturnCodes.push(orders[i].orderCode);
          }
        }
      }
    } catch (e) {
      console.log(e);
    }
    return orderReturnCodes;
  };

  const handleCreateMultiOrder = async () => {
    if (loadingCreateOrder) {
      return;
    }
    clearToast();
    if (!address) {
      showToast('Vui lòng chọn địa chỉ nhận hàng', 'error');
      return;
    }
    if (paymentMethod == 'shipquocte_wallet') {
      let wallet = moneyState.wallet?.cash ?? 0;
      if (wallet < allTotalAmount) {
        showToast('Số dư ví không đủ', 'error');
        return;
      }
    }
    setLoadingCreateOrder(true);
    let orderCodes = [];

    let data = ecommerceOrderState.create_forms;
    for (let i = 0; i < data.length; i++) {
      let orderReturnCodes = await handleOrder(data[i]);
      for (let j = 0; j < orderReturnCodes.length; j++) {
        orderCodes.push(orderReturnCodes[j]);
      }
    }

    if (orderCodes.length) {
      let qrCodeData = null;
      let ordersReturn = [];
      reduxDispatch(
        ecommerceOrderAction.setForms({
          data: {
            forms: [],
          },
        }),
      );
      let response = await apiClient.post('/api/Order/GetQRByOrderCodes', orderCodes);
      showToast('Tạo đơn thành công', 'success');

      if (response.data.status) {
        let dataPayment = response.data.data;
        qrCodeData = dataPayment.qrCodeData;
        let orders = dataPayment.ordersReturn;
        if (Array.isArray(orders)) {
          ordersReturn = orders;
          let codes = [];
          for (let i = 0; i < orders.length; i++) {
            codes.push(orders[i].orderCode);
          }
        }
        if (paymentMethod == 'shipquocte_wallet') {
          qrCodeData = null;
        }
        navigate('/don-hang-ecommerce/thank-you', {
          state: {
            checkoutEcommerce: {
              qrCodeData: qrCodeData,
              orderReturn: ordersReturn,
            },
          },
        });
      } else {
        navigate('/don-hang-ecommerce');
        // navigate(`/don-hang-ecommerce/thanh-toan?items=${orderCodes.join(',')}`);
      }
    } else {
      showToast('Tạo đơn không thành công', 'error');
      return;
    }
    setLoadingCreateOrder(false);
  };

  const groupedData = computeData.reduce((acc: any, item: any) => {
    const route = item.route || 'Tuyến không xác định';
    if (!acc[route]) {
      acc[route] = [];
    }
    acc[route].push(item);
    return acc;
  }, {});
  console.log('groupedData', groupedData);
  
  return (
    <div>
      <div className={'Polaris-Custom Title_Breadcrumb'}>
        <Page
          //@ts-ignore
          title={<TitleBreadcrumbs breadcrumbs={[{ title: 'Tạo đơn hàng Ecommerce', url: '' }]} />}
          secondaryActions={[
            {
              content: 'Làm mới dữ liệu',
              icon: PolarisIcons.RefreshMajor,
              destructive: true,
              onAction() {
                resetPage();
              },
            },
            {
              content: 'Import nhiều đơn',
              icon: PolarisIcons.UploadMajor,
              url: '/don-hang-ecommerce/tao-moi/import',
            },
          ]}
        >
          {step == 1 ? (
            <Layout>
              {ecommerceOrderState.create_forms.map((_item: any, index: number) => {
                return <ItemCreate key={index} index={index} />;
              })}
              <Layout.Section>
                <LegacyStack distribution={'center'}>
                  <Button
                    onClick={() => {
                      addProduct();
                    }}
                    icon={PolarisIcons.AddProductMajor}
                  >
                    Thêm sản phẩm
                  </Button>
                </LegacyStack>
              </Layout.Section>
            </Layout>
          ) : null}
          {step == 2 ? (
            <Layout>
              <Layout.Section>
                <LegacyCard>
                  <LegacyCard.Section title={'Danh sách sản phẩm'}>
                    <div className={'IndexTable--NoSticky'}>
                      <IndexTable
                        selectable={false}
                        headings={[
                          { title: 'Tuyến' },
                          { title: '' },
                          {title: ''},
                          { title: '' },
                          { title: '' },
                          { title: '' },
                        ]}
                        itemCount={computeData.length}
                      >
                        {computeData.map((item: any, index: number) => {
                          let attributes = item.attributes;
                          let url = item.url;
                          return (
                            <IndexTable.Row
                              id={item.id}
                              key={index}
                              position={index}
                              onClick={() => {
                                console.log('');
                              }}
                            >
                              <IndexTable.Cell>
                                <div>
                                  <CustomImage src={item.image} alt={item.name} />
                                </div>
                              </IndexTable.Cell>
                              <IndexTable.Cell>
                                <div className={'Cell-ProductName'}>
                                  <Link onClick={() => window.open(url, '_blank')} removeUnderline url={'#'}>
                                    {item.name}
                                  </Link>
                                </div>
                                {Object.keys(attributes).length ? (
                                  <div style={{ display: 'flex', flexDirection: 'column', gap: 4 }}>
                                    {Object.keys(attributes).map((key: string, idx: number) => (
                                      <div key={idx}>
                                        <Text as={'p'} variant={'bodySm'}>
                                          {key}: {attributes[key]}
                                        </Text>
                                      </div>
                                    ))}
                                  </div>
                                ) : null}
                              </IndexTable.Cell>
                              <IndexTable.Cell>
                                <div style={{ display: 'flex', flexDirection: 'column', gap: 4 }}>
                                  <Text as={'p'} variant={'bodyMd'}>
                                    {formatMoney(item.priceVND, 'VND')}
                                  </Text>
                                  <Text as={'p'} variant={'bodySm'}>
                                    ~{formatMoney(item.price, item.currency)}
                                  </Text>
                                </div>
                              </IndexTable.Cell>
                              <IndexTable.Cell>{item.quantity}</IndexTable.Cell>
                              <IndexTable.Cell>{formatMoney(item.amount, 'VND')}</IndexTable.Cell>
                            </IndexTable.Row>
                          );
                        })}
                      </IndexTable>
                    </div>
                  </LegacyCard.Section>
                  <LegacyCard.Section
                    title={'Địa chỉ nhận hàng'}
                    actions={[
                      {
                        content: 'Danh sách địa chỉ',
                        onAction() {
                          setOpenModalSelectAddress(true);
                        },
                      },
                    ]}
                  >
                    {accountState.addresses_loading ? (
                      <LegacyStack distribution={'center'}>
                        <Spinner size={'small'} />
                      </LegacyStack>
                    ) : (
                      <>
                        {address ? (
                          <LegacyStack>
                            <LegacyStack.Item fill>
                              <LegacyStack vertical spacing={'extraTight'}>
                                <Text as={'p'} variant={'bodyMd'} fontWeight={'semibold'}>
                                  {address.name}
                                </Text>
                                <Text as={'p'} variant={'bodyMd'}>
                                  {address.phone}
                                </Text>
                                <Text as={'p'} variant={'bodyMd'}>
                                  {address.fullAddress}
                                </Text>
                              </LegacyStack>
                            </LegacyStack.Item>
                            {/*<LegacyStack.Item>*/}
                            {/*  <Button*/}
                            {/*    icon={PolarisIcons.EditMajor}*/}
                            {/*    plain*/}
                            {/*    onClick={() => {*/}
                            {/*      let tmpAddress = { ...address };*/}
                            {/*      tmpAddress = Object.assign(tmpAddress, {*/}
                            {/*        callback: (data: any) => setAddress(data),*/}
                            {/*        is_post_update: false,*/}
                            {/*      });*/}
                            {/*      dispatch(*/}
                            {/*        modalAction.openModal({*/}
                            {/*          type: 'edit_address',*/}
                            {/*          title: 'Sửa địa chỉ nhận hàng',*/}
                            {/*          data: tmpAddress,*/}
                            {/*        }),*/}
                            {/*      );*/}
                            {/*    }}*/}
                            {/*  />*/}
                            {/*</LegacyStack.Item>*/}
                          </LegacyStack>
                        ) : (
                          <Text as={'span'} variant={'bodyMd'}>
                            Chưa có địa chỉ nhận hàng
                          </Text>
                        )}
                      </>
                    )}
                  </LegacyCard.Section>
                  <LegacyCard.Section title={'Phương thức thanh toán'}>
                    <LegacyStack spacing={'tight'}>
                      <LegacyStack.Item>
                        <div
                          style={{
                            background: paymentMethod == 'bank_transfer' ? '#0B3558' : '#EFF1F4',
                            color: paymentMethod == 'bank_transfer' ? 'white' : '#0B3558',
                            display: 'flex',
                            padding: '8px 16px',
                            borderRadius: 4,
                            alignItems: 'center',
                            justifyContent: 'center',
                            gap: 8,
                            cursor: 'pointer',
                          }}
                          onClick={() => setPaymentMethod('bank_transfer')}
                        >
                          <svg
                            width='22'
                            height='20'
                            viewBox='0 0 22 20'
                            fill='none'
                            xmlns='http://www.w3.org/2000/svg'
                          >
                            <path
                              d='M1 10.6099H18'
                              stroke='currentColor'
                              strokeWidth='1.5'
                              strokeMiterlimit='10'
                              strokeLinecap='round'
                              strokeLinejoin='round'
                            />
                            <path
                              d='M18 8.28005V15.43C17.97 18.28 17.19 19 14.22 19H4.78003C1.76003 19 1 18.2501 1 15.2701V8.28005C1 5.58005 1.63 4.71005 4 4.57005C4.24 4.56005 4.50003 4.55005 4.78003 4.55005H14.22C17.24 4.55005 18 5.30005 18 8.28005Z'
                              stroke='currentColor'
                              strokeWidth='1.5'
                              strokeLinecap='round'
                              strokeLinejoin='round'
                            />
                            <path
                              d='M21 4.73V11.72C21 14.42 20.37 15.29 18 15.43V8.28C18 5.3 17.24 4.55 14.22 4.55H4.78003C4.50003 4.55 4.24 4.56 4 4.57C4.03 1.72 4.81003 1 7.78003 1H17.22C20.24 1 21 1.75 21 4.73Z'
                              stroke='currentColor'
                              strokeWidth='1.5'
                              strokeLinecap='round'
                              strokeLinejoin='round'
                            />
                            <path
                              d='M4.25 15.8101H5.96997'
                              stroke='currentColor'
                              strokeWidth='1.5'
                              strokeMiterlimit='10'
                              strokeLinecap='round'
                              strokeLinejoin='round'
                            />
                            <path
                              d='M8.10986 15.8101H11.5499'
                              stroke='currentColor'
                              strokeWidth='1.5'
                              strokeMiterlimit='10'
                              strokeLinecap='round'
                              strokeLinejoin='round'
                            />
                          </svg>
                          <span>Chuyển khoản ngân hàng</span>
                        </div>
                      </LegacyStack.Item>
                      <LegacyStack.Item>
                        <div
                          style={{
                            background: paymentMethod == 'shipquocte_wallet' ? '#0B3558' : '#EFF1F4',
                            color: paymentMethod == 'shipquocte_wallet' ? 'white' : '#0B3558',
                            display: 'flex',
                            padding: '8px 16px',
                            borderRadius: 4,
                            alignItems: 'center',
                            justifyContent: 'center',
                            gap: 8,
                            cursor: 'pointer',
                          }}
                          onClick={() => setPaymentMethod('shipquocte_wallet')}
                        >
                          <svg
                            width='22'
                            height='20'
                            viewBox='0 0 22 20'
                            fill='none'
                            xmlns='http://www.w3.org/2000/svg'
                          >
                            <path
                              d='M12 9.16919H6'
                              stroke='currentColor'
                              strokeWidth='1.5'
                              strokeLinecap='round'
                              strokeLinejoin='round'
                            />
                            <path
                              d='M1 9.16939V4.62757C1 2.62208 2.65 1 4.69 1H10.31C12.35 1 14 2.24851 14 4.25399'
                              stroke='currentColor'
                              strokeWidth='1.5'
                              strokeLinecap='round'
                              strokeLinejoin='round'
                            />
                            <path
                              d='M16.48 10.2015C15.98 10.6734 15.74 11.4009 15.94 12.148C16.19 13.0623 17.11 13.6423 18.07 13.6423H19V15.0678C19 17.2404 17.21 19.0001 15 19.0001H5C2.79 19.0001 1 17.2404 1 15.0678V8.18622C1 6.01362 2.79 4.25391 5 4.25391H15C17.2 4.25391 19 6.02345 19 8.18622V9.61164H17.92C17.36 9.61164 16.85 9.82795 16.48 10.2015Z'
                              stroke='currentColor'
                              strokeWidth='1.5'
                              strokeLinecap='round'
                              strokeLinejoin='round'
                            />
                            <path
                              d='M21 10.6146V12.6397C21 13.1902 20.5399 13.6425 19.9699 13.6425H18.0399C16.9599 13.6425 15.97 12.8658 15.88 11.8041C15.82 11.1848 16.0599 10.6048 16.4799 10.2017C16.8499 9.82813 17.36 9.61182 17.92 9.61182H19.9699C20.5399 9.61182 21 10.0641 21 10.6146Z'
                              stroke='currentColor'
                              strokeWidth='1.5'
                              strokeLinecap='round'
                              strokeLinejoin='round'
                            />
                          </svg>
                          <span>{`Ví SHIPQUOCTE (số dư: ${formatMoney(moneyState.wallet?.cash ?? 0, 'VND')})`}</span>
                        </div>
                      </LegacyStack.Item>
                    </LegacyStack>
                  </LegacyCard.Section>
                </LegacyCard>
              </Layout.Section>
              <Layout.Section secondary>
                <Sticky>
                  <LegacyCard>
                    <LegacyCard.Section title={'Thông tin thanh toán'}>
                      <FormLayout>
                        <LegacyStack>
                          <LegacyStack.Item fill>Tổng tiền sản phẩm</LegacyStack.Item>
                          <LegacyStack.Item>
                            <Text as={'span'} variant={'bodyMd'} fontWeight={'semibold'}>
                              {formatMoney(allAmount, 'VND')}
                            </Text>
                          </LegacyStack.Item>
                        </LegacyStack>
                        <LegacyStack>
                          <LegacyStack.Item fill>Phụ phí</LegacyStack.Item>
                          <LegacyStack.Item>
                            <Text as={'span'} variant={'bodyMd'} fontWeight={'semibold'}>
                              {formatMoney(allAmountFeeBuy + allAmountTax + allAmountVCND, 'VND')}
                            </Text>
                          </LegacyStack.Item>
                        </LegacyStack>
                        <List>
                          <List.Item>
                            <LegacyStack>
                              <LegacyStack.Item fill>Công mua</LegacyStack.Item>
                              <LegacyStack.Item>{formatMoney(allAmountFeeBuy, 'VND')}</LegacyStack.Item>
                            </LegacyStack>
                          </List.Item>
                          <List.Item>
                            <LegacyStack>
                              <LegacyStack.Item fill>Thuế</LegacyStack.Item>
                              <LegacyStack.Item>{formatMoney(allAmountTax, 'VND')}</LegacyStack.Item>
                            </LegacyStack>
                          </List.Item>
                          <List.Item>
                            <LegacyStack>
                              <LegacyStack.Item fill>Phí vận chuyển nội địa</LegacyStack.Item>
                              <LegacyStack.Item>{formatMoney(allAmountVCND, 'VND')}</LegacyStack.Item>
                            </LegacyStack>
                          </List.Item>
                        </List>
                      </FormLayout>
                    </LegacyCard.Section>
                    <LegacyCard.Section>
                      <LegacyStack>
                        <LegacyStack.Item fill>Tổng tiền tạm tính</LegacyStack.Item>
                        <LegacyStack.Item>
                          <Text as={'span'} variant={'bodyMd'} fontWeight={'semibold'}>
                            {formatMoney(allTotalAmount, 'VND')}
                          </Text>
                        </LegacyStack.Item>
                      </LegacyStack>
                    </LegacyCard.Section>
                  </LegacyCard>
                </Sticky>
              </Layout.Section>
            </Layout>
          ) : null}
          {step == 1 ? (
            <div className={'BottomActions'}>
              <LegacyCard>
                <LegacyCard.Section>
                  <LegacyStack distribution={'equalSpacing'} alignment={'center'}>
                    <LegacyStack.Item fill>
                      {ecommerceOrderState.create_forms.length > 1 ? (
                        <Text as={'span'} variant={'headingMd'} fontWeight={'semibold'}>
                          {ecommerceOrderState.create_forms.length} sản phẩm
                        </Text>
                      ) : null}
                    </LegacyStack.Item>
                    <LegacyStack.Item>
                      <ButtonGroup>
                        <Button
                          icon={PolarisIcons.CartMajor}
                          loading={loadingAddToCart}
                          onClick={() => {
                            handleAddToCart();
                          }}
                        >
                          Thêm vào giỏ hàng
                        </Button>
                        <Button
                          icon={PolarisIcons.QuickSaleMajor}
                          primary
                          loading={loadingCompute}
                          onClick={() => {
                            handleCompute();
                          }}
                        >
                          Mua ngay
                        </Button>
                      </ButtonGroup>
                    </LegacyStack.Item>
                  </LegacyStack>
                </LegacyCard.Section>
              </LegacyCard>
            </div>
          ) : null}
          {step == 2 ? (
            <div className={'BottomActions'}>
              <LegacyCard>
                <LegacyCard.Section>
                  <LegacyStack distribution={'equalSpacing'} alignment={'center'}>
                    <LegacyStack.Item fill>
                      <Button onClick={() => setStep(1)}>Quay lại thông tin sản phẩm</Button>
                    </LegacyStack.Item>
                    <LegacyStack.Item>
                      <ButtonGroup>
                        <Button
                          primary
                          loading={loadingCreateOrder}
                          onClick={() => {
                            handleCreateMultiOrder();
                          }}
                        >
                          {`Đặt hàng và thanh toán (${formatMoney(allTotalAmount, 'VND')})`}
                        </Button>
                      </ButtonGroup>
                    </LegacyStack.Item>
                  </LegacyStack>
                </LegacyCard.Section>
              </LegacyCard>
            </div>
          ) : null}
        </Page>

        <Modal
          title={'Chọn địa chỉ nhận hàng'}
          open={openModalSelectAddress}
          onClose={() => setOpenModalSelectAddress(false)}
        >
          <Modal.Section flush>
            <LegacyCard
              actions={[
                {
                  content: 'Thêm địa chỉ mới',
                  onAction() {
                    setOpenModalSelectAddress(false);
                    reduxDispatch(
                      modalAction.openModal({
                        type: 'create_address',
                        title: 'Thêm địa chỉ nhận hàng',
                        data: {
                          callback: () => {
                            setOpenModalSelectAddress(true);
                          },
                        },
                      }),
                    );
                  },
                },
              ]}
            >
              {accountState.addresses.map((item: any, index: number) => (
                <LegacyCard.Section key={index} flush subdued={address && item.id == address.id}>
                  <div
                    style={{
                      cursor: 'pointer',
                      width: '100%',
                      padding: '12px 20px',
                    }}
                    onClick={() => {
                      setAddress(item);
                      setOpenModalSelectAddress(false);
                    }}
                  >
                    <Text as={'h2'} variant={'bodyMd'} fontWeight={'semibold'}>
                      {item.name}
                    </Text>
                    <div>{item.phone}</div>
                    <div>{item.fullAddress}</div>
                  </div>
                </LegacyCard.Section>
              ))}
            </LegacyCard>
          </Modal.Section>
        </Modal>

        <Modal
          open={openModalGoCart}
          title={
            <LegacyStack distribution={'center'} alignment={'center'}>
              <Text as={'h2'} variant={'headingLg'}>
                Thêm giỏ hàng thành công
              </Text>
              <Text as={'h2'} variant={'headingLg'}>
                🎉
              </Text>
            </LegacyStack>
          }
          primaryAction={{
            content: 'Có, đến giỏ hàng',
            icon: PolarisIcons.CartMajor,
            url: '/shopping/cart',
          }}
          secondaryActions={[
            {
              content: 'Tiếp tục tạo đơn',
              icon: PolarisIcons.AddProductMajor,
              onAction() {
                setOpenModalGoCart(false);
              },
            },
          ]}
          onClose={() => {
            setOpenModalGoCart(false);
          }}
        >
          <Modal.Section>
            <Text as={'p'} variant={'bodyMd'}>
              Bạn có muốn đến giỏ hàng và thanh toán không?
            </Text>
          </Modal.Section>
        </Modal>
      </div>
    </div>
  );
};

export default MultiCreate;

import React, { useEffect, useState } from 'react';
import {
  Autocomplete,
  Grid,
  Icon,
  IndexTable,
  Layout,
  LegacyCard,
  LegacyStack,
  Link,
  Page,
  PolarisIcons,
  SkeletonBodyText,
  Spinner,
  Text,
  Thumbnail,
} from 'pcs-polaris';
import { useDispatch, useSelector } from 'react-redux';
import { moneyAction } from '../../store/reducers/moneyReducer';
import { AppState } from '../../store';
import { formatNumber } from '../../helpers/number.ts';
import moment from 'moment';
import { apiClient } from '../../utils/api.ts';
import { ecommerceOrderAction } from '../../store/reducers/ecommerceOrderReducer';
import { formatMoney } from '../../helpers/currency.ts';
import {
  IconArrowSeeMore,
  IconAUD,
  IconCAD,
  IconCNY,
  IconEUR,
  IconGBP,
  IconJPY,
  IconKRW,
  IconPayment,
  IconRefund,
  IconUSD,
} from './_components/Icons.tsx';
import Empty from '../../components/NoData/Empty.tsx';
import Empty1 from '../../components/NoData/Empty1.tsx';

const paymentDateOptions = [
  {
    label: 'Hôm nay',
    value: 'today',
  },
  {
    label: 'Tuần này',
    value: 'this_week',
  },
  {
    label: 'Tháng này',
    value: 'this_month',
  },
];

const Home = () => {
  const dispatch = useDispatch();
  const moneyState = useSelector((state: AppState) => state.money);
  const ecommerceOrderState = useSelector((state: AppState) => state.ecommerceOrder);

  const startThisMonth = moment().startOf('month');
  const endThisMonth = moment().endOf('month');
  const startLastMonth = moment().startOf('month').subtract(1, 'day').startOf('month');
  const endLastMonth = moment().startOf('month').subtract(1, 'day').endOf('month');

  useEffect(() => {
    if (!moneyState.exchange_rates.length) {
      dispatch(moneyAction.fetchExchangeRates());
    }
    dispatch(
      ecommerceOrderAction.fetchOrders({
        // status: 0,
        orderCode: '',
        trackingCode: '',
        routeCode: '',
        fromDate: moment().subtract(30, 'days').toDate(),
        toDate: moment().add(1, 'd').toDate(),
        pageIndex: 1,
        pageSize: 10,
        sorts: [
          {
            sortBy: 'CreatedDate',
            sortDirection: 'DESC',
          },
        ],
      }),
    );

    dispatch(
      moneyAction.fetchPaymentHistories({
        pageIndex: 1,
        pageSize: 10,
        fromDate: moment().startOf('month').toDate(),
        toDate: moment().toDate(),
        sorts: [
          {
            sortBy: 'CreatedDate',
            sortDirection: 'DESC',
          },
        ],
      }),
    );
  }, []);
  const getIconCurrency = (currency: string) => {
    switch (currency) {
      case 'USD':
        return <IconUSD />;
      case 'KRW':
        return <IconKRW />;
      case 'JPY':
        return <IconJPY />;
      case 'GBP':
        return <IconGBP />;
      case 'EUR':
        return <IconEUR />;
      case 'CNY':
        return <IconCNY />;
      case 'CAD':
        return <IconCAD />;
      case 'AUD':
        return <IconAUD />;
      default:
        break;
    }
    return <React.Fragment />;
  };

  const [totalEcommerceThisMonth, setTotalEcommerceThisMonth] = useState(0);
  const [totalTransportThisMonth, setTotalTransportThisMonth] = useState(0);
  const [totalEcommerceLastMonth, setTotalEcommerceLastMonth] = useState(0);
  const [totalTransportLastMonth, setTotalTransportLastMonth] = useState(0);

  const [totalPaymentThisMonth, setTotalPaymentThisMonth] = useState(0);
  const [totalRefundThisMonth, setTotalRefundThisMonth] = useState(0);
  const [totalPaymentLastMonth, setTotalPaymentLastMonth] = useState(0);
  const [totalRefundLastMonth, setTotalRefundLastMonth] = useState(0);

  useEffect(() => {
    fetchOrderData();
    fetchPaymentData();
  }, []);

  const [loadingOrderAnalytic, setLoadingOrderAnalytic] = useState(false);
  const fetchOrderData = async () => {
    setLoadingOrderAnalytic(true);
    let ecommerceThisMonth = 0;
    let ecommerceLastMonth = 0;
    try {
      let response = await apiClient.post(`/api/Order/GetListOrderECOTotal`, {
        fromDate: startThisMonth.toDate(),
        toDate: endThisMonth.toDate(),
      });
      if (response.data.status) {
        let data = response.data.data;
        ecommerceThisMonth =
          data['buy'] +
          data['cancel'] +
          data['delivering'] +
          data['delivery'] +
          data['new'] +
          data['receiveQT'] +
          data['receiveVN'] +
          data['transportQT'] +
          data['waitingBuy'];
      }
    } catch (e) {
      console.log(e);
    }

    try {
      let response = await apiClient.post(`/api/Order/GetListOrderECOTotal`, {
        fromDate: startLastMonth.toDate(),
        toDate: endLastMonth.toDate(),
      });
      if (response.data.status) {
        let data = response.data.data;
        ecommerceLastMonth =
          data['buy'] +
          data['cancel'] +
          data['delivering'] +
          data['delivery'] +
          data['new'] +
          data['receiveQT'] +
          data['receiveVN'] +
          data['transportQT'] +
          data['waitingBuy'];
      }
    } catch (e) {
      console.log(e);
    }
    setTotalEcommerceThisMonth(ecommerceThisMonth);
    setTotalEcommerceLastMonth(ecommerceLastMonth);

    let transportThisMonth = 0;
    let transportLastMonth = 0;
    try {
      let response = await apiClient.post(`/api/Order/GetListOrderTransportTotal`, {
        fromDate: startThisMonth.toDate(),
        toDate: endThisMonth.toDate(),
      });
      if (response.data.status) {
        let data = response.data.data;
        transportThisMonth =
          data['delivery'] +
          data['notRecWH_QT'] +
          data['recWHQT'] +
          data['recWHVN'] +
          data['transportToVN'] +
          data['transportVN'];
      }
    } catch (e) {
      console.log(e);
    }

    try {
      let response = await apiClient.post(`/api/Order/GetListOrderTransportTotal`, {
        fromDate: startLastMonth.toDate(),
        toDate: endLastMonth.toDate(),
      });
      if (response.data.status) {
        let data = response.data.data;
        transportLastMonth =
          data['delivery'] +
          data['notRecWH_QT'] +
          data['recWHQT'] +
          data['recWHVN'] +
          data['transportToVN'] +
          data['transportVN'];
      }
    } catch (e) {
      console.log(e);
    }
    setTotalTransportThisMonth(transportThisMonth);
    setTotalTransportLastMonth(transportLastMonth);

    setLoadingOrderAnalytic(false);
  };

  const [loadingPaymentAnalytic, setLoadingPaymentAnalytic] = useState(false);
  const fetchPaymentData = async () => {
    setLoadingPaymentAnalytic(true);
    let paymentThisMonth = 0;
    let refundThisMonth = 0;

    try {
      let response = await apiClient.post(`/api/Payment/GetPaymentTransactionHistory`, {
        fromDate: startThisMonth.toDate(),
        toDate: endThisMonth.toDate(),
        pageIndex: 1,
        pageSize: 100,
        sorts: [
          {
            sortBy: 'CreatedDate',
            sortDirection: 'DESC',
          },
        ],
      });

      if (response.data.status) {
        let data = response.data.data;
        for (let i = 0; i < data.length; i++) {
          let payments = data[i].payments;
          for (let j = 0; j < payments.length; j++) {
            if (payments[j].refund) {
              refundThisMonth += payments[j].amount;
            } else {
              paymentThisMonth += payments[j].amount;
            }
          }
        }
      }
    } catch (e) {
      console.log(e);
    }
    setTotalPaymentThisMonth(paymentThisMonth);
    setTotalRefundThisMonth(refundThisMonth);

    let paymentLastMonth = 0;
    let refundLastMonth = 0;

    try {
      let response = await apiClient.post(`/api/Payment/GetPaymentTransactionHistory`, {
        fromDate: startLastMonth.toDate(),
        toDate: endLastMonth.toDate(),
        pageIndex: 1,
        pageSize: 100,
        sorts: [
          {
            sortBy: 'CreatedDate',
            sortDirection: 'DESC',
          },
        ],
      });
      if (response.data.status) {
        let data = response.data.data;
        for (let i = 0; i < data.length; i++) {
          let payments = data[i].payments;
          for (let j = 0; j < payments.length; j++) {
            if (payments[j].refund) {
              refundLastMonth += payments[j].amount;
            } else {
              paymentLastMonth += payments[j].amount;
            }
          }
        }
      }
    } catch (e) {
      console.log(e);
    }
    setTotalPaymentLastMonth(paymentLastMonth);
    setTotalRefundLastMonth(refundLastMonth);

    setLoadingPaymentAnalytic(false);
  };

  const getDiffMonth = (next: number, previous: number) => {
    let diff = 0;
    if (next <= 0 || previous <= 0) {
      if (next <= 0 && previous <= 0) {
        diff = 0;
      } else {
        diff = 100;
      }
    } else {
      diff = Math.round((Math.abs(next - previous) / previous) * 10000) / 100;
    }
    if (previous > next) {
      diff = -diff;
    }
    if (diff >= 0) {
      return (
        <div className='Style_DiffMonth'>
          <div>Tháng này tăng</div>
          <span
            style={{
              color: '#0050a6',
              padding: '2px 6px',
              backgroundColor: '#e7f2ff',
              borderRadius: '4px',
              whiteSpace: 'nowrap',
            }}
          >
            + {Math.abs(diff)}%
          </span>
        </div>
      );
    }
    return (
      <div className='Style_DiffMonth'>
        <div>Tháng này giảm</div>
        <span className='Style_DiffMonth_Item'>- {Math.abs(diff)}%</span>
      </div>
    );
  };

  const getPaymentStatusBadge = (status: string) => {
    if (!status) {
      return '';
    }
    let bgColor = '#FFB703';
    switch (status) {
      case 'Chờ xử lý':
        bgColor = '#FFB703';
        break;
      case 'Đã tạm ứng':
        bgColor = '#219EBC';
        break;
      case 'Đã cọc':
        bgColor = '#219EBC';
        break;
      case 'Chờ thanh toán':
        bgColor = '#FFB703';
        break;
      case 'Đã thanh toán':
        bgColor = '#0050A6';
        break;
      case 'Đã hoàn tiền':
        bgColor = '#A91116';
        break;
      default:
        break;
    }
    return (
      <div
        style={{
          padding: '4px 12px',
          color: '#fff',
          backgroundColor: bgColor,
          borderRadius: '4px',
          display: 'inline-flex',
          textAlign: 'center',
          alignItems: 'center',
          justifyContent: 'center',
          fontSize: '12px',
        }}
      >
        {status}
      </div>
    );
  };

  const [searchPaymentDate, setSearchPaymentDate] = useState('Tháng này');
  const [paymentDate, setPaymentDate] = useState('this_month');

  const [paymentHistories, setPaymentHistories] = useState<any[]>([]);

  useEffect(() => {
    let tmp = [];
    for (let i = 0; i < moneyState.payment_histories.length && tmp.length < 15; i++) {
      let history = moneyState.payment_histories[i];
      let date = history['createdDate'];
      let payments = history['payments'];
      for (let j = 0; j < payments.length; j++) {
        let isRefund = payments[j].refund ?? false;
        tmp.push({
          date: payments[j].createDateStr,
          is_refund: isRefund,
          amount: formatMoney(payments[j].amount, 'VND'),
        });
      }
    }
    setPaymentHistories(tmp);
  }, [moneyState.payment_histories]);

  return (
    <div className='Polaris-Custom Title_Breadcrumb'>
      <Page title='Tổng quan'>
        <Layout>
          <Layout.Section>
            <Grid>
              <Grid.Cell columnSpan={{ xs: 6, sm: 6, md: 6, lg: 6, xl: 6 }}>
                <LegacyCard>
                  <LegacyCard.Section>
                    <LegacyStack wrap={false}>
                      <LegacyStack.Item>
                        <svg width='80' height='80' viewBox='0 0 80 80' fill='none' xmlns='http://www.w3.org/2000/svg'>
                          <rect width='80' height='80' rx='8' fill='#E7F2FF' />
                          <rect x='20' y='20' width='40' height='40' rx='8' fill='#035FC1' />
                          <path
                            d='M47.9436 40V46C47.9436 48.2091 46.1527 50 43.9436 50H35.9436C33.7345 50 31.9436 48.2091 31.9436 46V40'
                            stroke='white'
                            strokeWidth='1.5'
                          />
                          <path
                            d='M44.7123 30H35.1748C33.3575 30 31.7232 31.2448 31.0483 33.143L30.2903 35.2749C30.0608 35.9202 29.9022 36.6107 30.0696 37.2749C30.4659 38.8478 31.7518 40 33.2769 40C35.1178 40 36.6102 38.3211 36.6102 36.25C36.6102 38.3211 38.1026 40 39.9436 40C41.7845 40 43.2769 38.3211 43.2769 36.25C43.2769 38.3211 44.7693 40 46.6102 40C48.1353 40 49.4212 38.8478 49.8176 37.2749C49.9849 36.6107 49.8263 35.9202 49.5969 35.2749L48.8389 33.143C48.1639 31.2448 46.5297 30 44.7123 30Z'
                            stroke='white'
                            strokeWidth='1.5'
                            strokeLinejoin='round'
                          />
                          <path
                            d='M36.9436 45C39.2997 46.3404 40.5912 46.3263 42.9436 45'
                            stroke='white'
                            strokeWidth='1.5'
                            strokeLinecap='round'
                            strokeLinejoin='round'
                          />
                        </svg>
                      </LegacyStack.Item>
                      <LegacyStack.Item fill>
                        <LegacyStack vertical spacing={'tight'}>
                          <LegacyStack.Item>
                            <Text as={'span'} variant={'bodyMd'}>
                              Tổng đơn hàng Ecommerce trong tháng
                            </Text>
                          </LegacyStack.Item>
                          {loadingOrderAnalytic ? (
                            <SkeletonBodyText lines={1} />
                          ) : (
                            <LegacyStack.Item>
                              <Text as={'p'} variant={'headingLg'} fontWeight={'semibold'}>
                                {totalEcommerceThisMonth}
                              </Text>
                            </LegacyStack.Item>
                          )}
                          {loadingOrderAnalytic ? (
                            <SkeletonBodyText lines={1} />
                          ) : (
                            <LegacyStack.Item>
                              <Text as={'p'}>{getDiffMonth(totalEcommerceThisMonth, totalEcommerceLastMonth)}</Text>
                            </LegacyStack.Item>
                          )}
                        </LegacyStack>
                      </LegacyStack.Item>
                    </LegacyStack>
                  </LegacyCard.Section>
                </LegacyCard>
              </Grid.Cell>
              <Grid.Cell columnSpan={{ xs: 6, sm: 6, md: 6, lg: 6, xl: 6 }}>
                <LegacyCard>
                  <LegacyCard.Section>
                    <LegacyStack wrap={false}>
                      <LegacyStack.Item>
                        <svg width='80' height='80' viewBox='0 0 80 80' fill='none' xmlns='http://www.w3.org/2000/svg'>
                          <rect width='80' height='80' rx='8' fill='#DCF3F9' />
                          <rect x='20' y='20' width='40' height='40' rx='8' fill='#219EBC' />
                          <path
                            d='M46.4167 33.6323H44.4917C44.2789 32.6074 43.716 31.6866 42.8978 31.025C42.0796 30.3633 41.0562 30.0013 40 30H33.5833C32.3682 30.0014 31.2033 30.4803 30.344 31.3314C29.4848 32.1826 29.0015 33.3366 29 34.5404V42.713C29.0023 43.5263 29.2801 44.3153 29.7888 44.9536C30.2976 45.592 31.0079 46.0427 31.8059 46.2336C31.7195 46.688 31.7343 47.1557 31.8492 47.6039C31.9641 48.0521 32.1763 48.4701 32.471 48.8287C32.7658 49.1872 33.136 49.4778 33.5558 49.68C33.9756 49.8822 34.4349 49.9913 34.9017 49.9995C35.3684 50.0077 35.8313 49.915 36.2581 49.7277C36.6849 49.5404 37.0654 49.2632 37.3728 48.9152C37.6803 48.5673 37.9075 48.1571 38.0384 47.7132C38.1693 47.2693 38.2009 46.8025 38.1309 46.3453H41.8728C41.8492 46.4955 41.8366 46.6473 41.8352 46.7993C41.8352 47.6423 42.1732 48.4507 42.7749 49.0467C43.3765 49.6427 44.1926 49.9776 45.0435 49.9776C45.8944 49.9776 46.7105 49.6427 47.3121 49.0467C47.9138 48.4507 48.2518 47.6423 48.2518 46.7993C48.2508 46.6095 48.2321 46.4201 48.1959 46.2336C48.9936 46.0423 49.7035 45.5915 50.2119 44.9532C50.7203 44.3149 50.9978 43.5261 51 42.713V38.1726C50.9985 36.9689 50.5152 35.8149 49.656 34.9637C48.7967 34.1126 47.6318 33.6337 46.4167 33.6323ZM49.1667 38.1726V39.0807H44.5833V35.4484H46.4167C47.146 35.4484 47.8455 35.7354 48.3612 36.2463C48.8769 36.7572 49.1667 37.4501 49.1667 38.1726ZM30.8333 42.713V34.5404C30.8333 33.8179 31.1231 33.1249 31.6388 32.614C32.1545 32.1032 32.854 31.8161 33.5833 31.8161H40C40.7293 31.8161 41.4288 32.1032 41.9445 32.614C42.4603 33.1249 42.75 33.8179 42.75 34.5404V44.5292H32.6667C32.1804 44.5292 31.7141 44.3378 31.3703 43.9972C31.0265 43.6566 30.8333 43.1947 30.8333 42.713ZM36.3333 46.7993C36.3333 47.1606 36.1885 47.507 35.9306 47.7625C35.6727 48.0179 35.323 48.1614 34.9583 48.1614C34.5937 48.1614 34.2439 48.0179 33.9861 47.7625C33.7282 47.507 33.5833 47.1606 33.5833 46.7993C33.5839 46.6441 33.6128 46.4903 33.6686 46.3453H36.2481C36.3039 46.4903 36.3328 46.6441 36.3333 46.7993ZM45.0417 48.1614C44.677 48.1614 44.3273 48.0179 44.0694 47.7625C43.8115 47.507 43.6667 47.1606 43.6667 46.7993C43.6671 46.6441 43.696 46.4903 43.7519 46.3453H46.3314C46.3874 46.4903 46.4163 46.6441 46.4167 46.7993C46.4167 47.1606 46.2718 47.507 46.0139 47.7625C45.7561 48.0179 45.4063 48.1614 45.0417 48.1614ZM47.3333 44.5292H44.5833V40.8969H49.1667V42.713C49.1667 43.1947 48.9735 43.6566 48.6297 43.9972C48.2859 44.3378 47.8196 44.5292 47.3333 44.5292Z'
                            fill='white'
                          />
                        </svg>
                      </LegacyStack.Item>
                      <LegacyStack.Item fill>
                        <LegacyStack vertical spacing={'tight'}>
                          <LegacyStack.Item>
                            <Text as={'span'} variant={'bodyMd'}>
                              Tổng đơn hàng Vận chuyển trong tháng
                            </Text>
                          </LegacyStack.Item>
                          {loadingOrderAnalytic ? (
                            <SkeletonBodyText lines={1} />
                          ) : (
                            <LegacyStack.Item>
                              <Text as={'p'} variant={'headingLg'} fontWeight={'semibold'}>
                                {totalTransportThisMonth}
                              </Text>
                            </LegacyStack.Item>
                          )}
                          {loadingOrderAnalytic ? (
                            <SkeletonBodyText lines={1} />
                          ) : (
                            <LegacyStack.Item>
                              <Text as={'p'}>{getDiffMonth(totalTransportThisMonth, totalTransportLastMonth)}</Text>
                            </LegacyStack.Item>
                          )}
                        </LegacyStack>
                      </LegacyStack.Item>
                    </LegacyStack>
                  </LegacyCard.Section>
                </LegacyCard>
              </Grid.Cell>
              <Grid.Cell columnSpan={{ xs: 6, sm: 6, md: 6, lg: 6, xl: 6 }}>
                <LegacyCard>
                  <LegacyCard.Section>
                    <LegacyStack wrap={false}>
                      <LegacyStack.Item>
                        <svg width='80' height='80' viewBox='0 0 80 80' fill='none' xmlns='http://www.w3.org/2000/svg'>
                          <rect width='80' height='80' rx='8' fill='#FFF5DB' />
                          <rect x='20' y='20' width='40' height='40' rx='8' fill='#FFB703' />
                          <path
                            d='M37 42.3298C37 43.6198 38.039 44.6598 39.3298 44.6598H41.964C43.087 44.6598 44 43.7498 44 42.6298C44 41.4098 43.4438 40.9798 42.6147 40.6998L38.3853 39.2998C37.5562 39.0198 37 38.5898 37 37.3698C37 36.2498 37.913 35.3398 39.036 35.3398H41.6702C42.961 35.3398 44 36.3798 44 37.6698'
                            stroke='white'
                            strokeWidth='1.8'
                            strokeLinecap='round'
                            strokeLinejoin='round'
                          />
                          <path
                            d='M40.4928 34V46'
                            stroke='white'
                            strokeWidth='1.8'
                            strokeLinecap='round'
                            strokeLinejoin='round'
                          />
                          <path
                            d='M30 34C30 31.7909 31.7909 30 34 30H46C48.2091 30 50 31.7909 50 34V46C50 48.2091 48.2091 50 46 50H34C31.7909 50 30 48.2091 30 46V34Z'
                            stroke='white'
                            strokeWidth='2'
                          />
                        </svg>
                      </LegacyStack.Item>
                      <LegacyStack.Item fill>
                        <LegacyStack vertical spacing={'tight'}>
                          <LegacyStack.Item>
                            <Text as={'span'} variant={'bodyMd'}>
                              Tổng chi tiêu trong tháng
                            </Text>
                          </LegacyStack.Item>
                          {loadingPaymentAnalytic ? (
                            <SkeletonBodyText lines={1} />
                          ) : (
                            <LegacyStack.Item>
                              <Text as={'p'} variant={'headingLg'} fontWeight={'semibold'}>
                                {formatMoney(totalPaymentThisMonth, 'VND')}
                              </Text>
                            </LegacyStack.Item>
                          )}
                          {loadingPaymentAnalytic ? (
                            <SkeletonBodyText lines={1} />
                          ) : (
                            <LegacyStack.Item>
                              <Text as={'p'}>{getDiffMonth(totalPaymentThisMonth, totalPaymentLastMonth)}</Text>
                            </LegacyStack.Item>
                          )}
                        </LegacyStack>
                      </LegacyStack.Item>
                    </LegacyStack>
                  </LegacyCard.Section>
                </LegacyCard>
              </Grid.Cell>
              <Grid.Cell columnSpan={{ xs: 6, sm: 6, md: 6, lg: 6, xl: 6 }}>
                <LegacyCard>
                  <LegacyCard.Section>
                    <LegacyStack wrap={false}>
                      <LegacyStack.Item>
                        <svg width='80' height='80' viewBox='0 0 80 80' fill='none' xmlns='http://www.w3.org/2000/svg'>
                          <rect width='80' height='80' rx='8' fill='#D9F5DD' />
                          <rect x='20' y='20' width='40' height='40' rx='8' fill='#238832' />
                          <path
                            d='M50 34H34C31.7909 34 30 35.7909 30 38V46C30 48.2091 31.7909 50 34 50H46C48.2091 50 50 48.2091 50 46V34Z'
                            stroke='white'
                            strokeWidth='2'
                            strokeLinejoin='round'
                          />
                          <path
                            d='M50 34C50 31.7909 48.2091 30 46 30H40C37.7909 30 36 31.7909 36 34V34H50V34Z'
                            stroke='white'
                            strokeWidth='2'
                            strokeLinejoin='round'
                          />
                          <path
                            d='M30 40L30 44L34 44C35.1046 44 36 43.1046 36 42V42C36 40.8954 35.1046 40 34 40L30 40Z'
                            stroke='white'
                            strokeWidth='2'
                            strokeLinejoin='round'
                          />
                        </svg>
                      </LegacyStack.Item>
                      <LegacyStack.Item fill>
                        <LegacyStack vertical spacing={'tight'}>
                          <LegacyStack.Item>
                            <Text as={'span'} variant={'bodyMd'}>
                              Tổng tiền nạp trong tháng
                            </Text>
                          </LegacyStack.Item>
                          <LegacyStack.Item>
                            <Text as={'p'} variant={'headingLg'} fontWeight={'semibold'}>
                              {formatMoney(0, 'VND')}
                            </Text>
                          </LegacyStack.Item>
                          {/*{loadingPaymentAnalytic ? (*/}
                          {/*  <SkeletonBodyText lines={1} />*/}
                          {/*) : (*/}
                          {/*  <LegacyStack.Item>*/}
                          {/*    <Text as={'p'} variant={'headingLg'} fontWeight={'semibold'}>*/}
                          {/*      {formatMoney(totalRefundThisMonth, 'VND')}*/}
                          {/*    </Text>*/}
                          {/*  </LegacyStack.Item>*/}
                          {/*)}*/}
                          {/*{loadingPaymentAnalytic ? (*/}
                          {/*  <SkeletonBodyText lines={1} />*/}
                          {/*) : (*/}
                          {/*  <LegacyStack.Item>*/}
                          {/*    <Text as={'p'}>{getDiffMonth(totalRefundThisMonth, totalRefundLastMonth)}</Text>*/}
                          {/*  </LegacyStack.Item>*/}
                          {/*)}*/}
                        </LegacyStack>
                      </LegacyStack.Item>
                    </LegacyStack>
                  </LegacyCard.Section>
                </LegacyCard>
              </Grid.Cell>
              <Grid.Cell columnSpan={{ xs: 6, sm: 6, md: 6, lg: 12, xl: 12 }}>
                <LegacyCard
                  title={'Đơn hàng gần đây'}
                  actions={[
                    {
                      //@ts-ignore
                      content: (
                        <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', gap: '7px' }}>
                          <div>Xem thêm</div>
                          <div>
                            <IconArrowSeeMore />
                          </div>
                        </div>
                      ),
                      url: '/don-hang-ecommerce',
                    },
                  ]}
                >
                  <LegacyCard.Section>
                    <div className={'Style_Dashboard_Data IndexTable--NoSticky'}>
                      <IndexTable
                        loading={ecommerceOrderState.data_loading}
                        selectable={false}
                        headings={[
                          { title: 'Mã đơn hàng' },
                          { title: 'Hình ảnh', alignment: 'center' },
                          { title: 'Sản phẩm' },
                          { title: 'Số lượng', alignment: 'center' },
                          { title: 'Tổng tiền' },
                          { title: 'Trạng thái' },
                        ]}
                        itemCount={ecommerceOrderState.data.length}
                      >
                        {ecommerceOrderState.data.map((item: any, index: number) => (
                          <IndexTable.Row position={index} id={`${index}`} key={index}>
                            <IndexTable.Cell>{item.orderCode}</IndexTable.Cell>
                            <IndexTable.Cell>
                              <Thumbnail source={item.previewImage} alt={''} />
                            </IndexTable.Cell>
                            <IndexTable.Cell>
                              <div className={'Cell-ProductName'}>
                                <Link url={item.productLink} target={'_blank'} removeUnderline>
                                  {item.productName}
                                </Link>
                              </div>
                            </IndexTable.Cell>
                            <IndexTable.Cell>
                              <Text as={'span'} variant={'bodyMd'} alignment={'center'}>
                                {item.amount}
                              </Text>
                            </IndexTable.Cell>
                            <IndexTable.Cell>{formatMoney(item.totalAmount, 'VND')}</IndexTable.Cell>
                            <IndexTable.Cell>{getPaymentStatusBadge(item.paymentStatusName)}</IndexTable.Cell>
                          </IndexTable.Row>
                        ))}
                      </IndexTable>
                    </div>
                  </LegacyCard.Section>
                </LegacyCard>
              </Grid.Cell>
            </Grid>
          </Layout.Section>

          <Layout.Section secondary>
            <LegacyCard title={'BẢNG TỶ GIÁ NGOẠI TỆ'}>
              <LegacyCard.Section>
                <div className={'IndexTable--NoSticky'}>
                  <IndexTable
                    selectable={false}
                    loading={moneyState.exchange_rates_loading}
                    headings={[
                      {
                        id: '1',
                        title: (
                          <Text as={'span'} variant={'bodyMd'} fontWeight={'semibold'}>
                            NGOẠI TỆ
                          </Text>
                        ),
                        alignment: 'start',
                      },
                      {
                        id: '2',
                        title: (
                          <Text as={'span'} variant={'bodyMd'} fontWeight={'semibold'}>
                            VNĐ
                          </Text>
                        ),
                        alignment: 'end',
                      },
                    ]}
                    itemCount={moneyState.exchange_rates.length}
                  >
                    {moneyState.exchange_rates
                      .filter((value) => value['currencyCode'] != 'VNY' && value['currencyCode'] != 'AUD')
                      .map((item: any, index: number) => (
                        <IndexTable.Row position={index} id={`${index}`} key={index}>
                          <IndexTable.Cell>
                            <LegacyStack>
                              <LegacyStack.Item>{getIconCurrency(item['currencyCode'])}</LegacyStack.Item>
                              <LegacyStack.Item>
                                <Text as={'span'} variant={'bodyMd'} fontWeight={'semibold'}>
                                  {item['currencyCode']}
                                </Text>
                              </LegacyStack.Item>
                            </LegacyStack>
                          </IndexTable.Cell>
                          <IndexTable.Cell>
                            <Text as={'span'} variant={'bodyMd'} fontWeight={'semibold'} alignment={'end'}>
                              {formatNumber(item['exchangeRate'])}
                            </Text>
                          </IndexTable.Cell>
                        </IndexTable.Row>
                      ))}
                  </IndexTable>
                </div>
              </LegacyCard.Section>
            </LegacyCard>
            <LegacyCard
              title={
                <LegacyStack distribution={'fill'} alignment={'center'}>
                  <Text as={'h2'} variant={'bodyLg'} fontWeight={'semibold'}>
                    Giao dịch gần nhất
                  </Text>
                  <LegacyStack.Item fill>
                    <div className='Style_AutoComplete_Dashboard'>
                      <Autocomplete
                        options={paymentDateOptions}
                        selected={[paymentDate]}
                        onSelect={(selected) => {
                          setPaymentDate(selected[0]);
                          const selectedText = selected.map((selectedItem) => {
                            const matchedOption = paymentDateOptions.find((option) => {
                              return option['value'] == selectedItem;
                            });
                            if (matchedOption) {
                              return `${matchedOption['label']}`;
                            }
                            return '';
                          });
                          setSearchPaymentDate(selectedText[0]);
                          if (selected[0]) {
                            let fromDate = moment().toDate();
                            let toDate = moment().toDate();
                            // if (selected[0] == 'this_week') {
                            //   fromDate = moment().startOf('week').toDate();
                            // } else if (selected[0] == 'this_month') {
                            //   fromDate = moment().startOf('month').toDate();
                            // }
                            if (selected[0] === 'today') {
                              fromDate = moment().startOf('day').toDate();
                            } else if (selected[0] === 'this_week') {
                              fromDate = moment().startOf('week').toDate();
                            } else if (selected[0] === 'this_month') {
                              fromDate = moment().startOf('month').toDate();
                            }
                            dispatch(
                              moneyAction.fetchPaymentHistories({
                                pageIndex: 1,
                                pageSize: 10,
                                fromDate: fromDate,
                                toDate: toDate,
                                sorts: [
                                  {
                                    sortBy: 'CreatedDate',
                                    sortDirection: 'DESC',
                                  },
                                ],
                              }),
                            );
                          }
                        }}
                        textField={
                          <Autocomplete.TextField
                            value={searchPaymentDate}
                            onChange={(value) => {
                              setSearchPaymentDate(value);
                            }}
                            suffix={<Icon source={PolarisIcons.CaretDownMinor} />}
                            autoComplete={'off'}
                            label={''}
                          />
                        }
                      />
                    </div>
                  </LegacyStack.Item>
                </LegacyStack>
              }
            >
              <LegacyCard.Section>
                {moneyState.payment_histories_loading ? (
                  <LegacyStack distribution={'center'}>
                    <Spinner size={'small'} />
                  </LegacyStack>
                ) : (
                  <>
                    {/* <div style={{borderBottom: '1px solid #D1D5DB', marginBottom: '10px'}}></div> */}
                    {paymentHistories.length ? (
                      <LegacyStack vertical>
                        {paymentHistories.map((item: any, index: number) => {
                          let isRefund = item.is_refund;
                          return (
                            <LegacyStack.Item key={index}>
                              <LegacyStack alignment={'center'}>
                                <LegacyStack.Item>{isRefund ? <IconRefund /> : <IconPayment />}</LegacyStack.Item>
                                <LegacyStack.Item fill>
                                  <Text as={'p'} variant={'bodyMd'} fontWeight={'semibold'}>
                                    {isRefund ? 'Hoàn tiền' : 'Thanh toán'}
                                  </Text>
                                  <Text as={'p'} variant={'bodyMd'} color={'subdued'}>
                                    {item.date}
                                  </Text>
                                </LegacyStack.Item>
                                <LegacyStack.Item>
                                  {isRefund ? (
                                    <Text as={'p'} color={'success'} variant={'bodyMd'} fontWeight={'semibold'}>
                                      +{item.amount}
                                    </Text>
                                  ) : (
                                    <Text as={'p'} color={'critical'} variant={'bodyMd'} fontWeight={'semibold'}>
                                      -{item.amount}
                                    </Text>
                                  )}
                                </LegacyStack.Item>
                              </LegacyStack>
                            </LegacyStack.Item>
                          );
                        })}
                      </LegacyStack>
                    ) : (
                      // <div
                      //   style={{
                      //     display: 'flex',
                      //     justifyContent: 'center',
                      //     alignItems: 'center',
                      //     flexDirection: 'column',
                      //     gap: 8,
                      //     marginTop: '12px'
                      //   }}
                      // >
                      //   <div style={{ flex: 1, width: 200}}>
                      //     <Empty />
                      //   </div>
                      //   <Text as={'p'} variant={'bodyMd'}>
                      //     Không có giao dịch
                      //   </Text>
                      // </div>
                      <div
                        style={{
                          display: 'flex',
                          justifyContent: 'center',
                          alignItems: 'center',
                          flexDirection: 'column',
                          gap: 12,
                          marginTop: '12px',
                        }}
                      >
                        <div style={{ flex: '1' }}>
                          <Empty1 />
                        </div>
                        <Text as={'p'} variant={'bodyMd'}>
                          Không có giao dịch
                        </Text>
                      </div>
                    )}
                  </>
                )}
              </LegacyCard.Section>
            </LegacyCard>
          </Layout.Section>
        </Layout>
      </Page>
    </div>
  );
};
export default Home;

LỌC TIME SHIPPINGORDER (CÓ LƯU URL)
-----------------------------------
LOGIC
-----
  const [dateRangeActive, setDateRangeActive] = useState(false);
  const [{ month, year }, setDate] = useState({ month: new Date().getMonth(), year: new Date().getFullYear() });
  const [selectedDates, setSelectedDates] = useState({
    start: moment().subtract(90, 'days').toDate(),
    end: moment().toDate(),
  });
const handleMonthChange = useCallback((month: number, year: number) => setDate({ month, year }), []);
  const [dateInputValue, setDateInputValue] = useState(
    `${moment(selectedDates.start).format('DD/MM/yyyy')} - ${moment(selectedDates.end).format('DD/MM/yyyy')}`,
  );
  const [rangeSelected, setRangeSelected] = useState<string[]>([]);
  const takeDate = (type: 'start' | 'end') => {
    let splitDate = dateInputValue.split(' - ');
    return type == 'start' ? splitDate[0] : splitDate[1];
  };
const handleInputDate = (event: any) => {
    setDateInputValue(event.target.value);
    // Delay kiểm tra để tránh việc xử lý khi người dùng chưa nhập xong
    debounceCheckDateInput(event.target.value);
};

const debounceCheckDateInput = debounce((inputValue) => {
    const [startDateStr, endDateStr] = inputValue.split(' - ');

    // Chỉ xử lý khi định dạng ngày tháng đủ
    if (startDateStr.length === 10 && endDateStr.length === 10) {
        if (moment(startDateStr, 'DD/MM/yyyy').isValid() && moment(endDateStr, 'DD/MM/yyyy').isValid()) {
            let startDate = moment(startDateStr, 'DD/MM/yyyy').toDate();
            let endDate = moment(endDateStr, 'DD/MM/yyyy').toDate();

            // Giới hạn khoảng thời gian tối đa là 3 tháng
            const maxEndDate = moment(startDate).add(3, 'months').toDate();
            const dateDifference = moment(endDate).diff(moment(startDate), 'days'); // Tính số ngày khác nhau

            // Hiển thị toast nếu khoảng thời gian vượt quá 90 ngày
            if (dateDifference > 90) {
                showToast('Dữ liệu phải nằm trong khoảng tịnh tiến 90 ngày', "warning");
                endDate = new Date(); // Reset endDate về ngày hiện tại
            }

            // Điều chỉnh endDate nếu cần thiết
            if (endDate > maxEndDate || endDate > new Date()) {
                endDate = new Date() < maxEndDate ? new Date() : maxEndDate;
            }

            setSelectedDates({ start: startDate, end: endDate });
            setDate({ month: moment(endDate).month(), year: moment(endDate).year() });

            const dateTime = `${moment(startDate).format('DD/MM/yyyy')} - ${moment(endDate).format('DD/MM/yyyy')}`;
            setDateInputValue(dateTime);
            updateUrl('dateTime', dateTime);
            setCurrentPage(1);
            updateUrl('page', '1');

            debounceFetchDataFun({
                keyWord: '',
                orderCode: trimString(orderCode),
                tracking: trimString(trackingCode),
                trackingCode: '',
                orderType: 'TRANSPORT',
                status: formatActive(activeTab),
                fromDate: startDate,
                toDate: moment(endDate).add(1, 'd').toDate(),
                sorts: [{ sortBy: 'OrderDate', sortDirection: 'DESC' }],
                pageIndex: 1,
                pageSize: pageSize,
            });
        }
    }
}, 500);
const applyDateRange = () => {
    const startDate = selectedDates.start;
    let endDate = selectedDates.end;
    
    // Giới hạn khoảng thời gian tối đa là 3 tháng
    const maxEndDate = moment(startDate).add(3, 'months').toDate();
    
    // Nếu ngày kết thúc vượt quá ngày tối đa hoặc là tương lai, chỉnh lại ngày kết thúc
    if (endDate > maxEndDate || endDate > new Date()) {
      endDate = new Date() < maxEndDate ? new Date() : maxEndDate; // Chặn tương lai, giới hạn 3 tháng
      showToast('Dữ liệu phải nằm trong khoảng tịnh tiến 90 ngày', "warning");
    }
    const startDateStr = moment(startDate).format('DD/MM/yyyy');
    const endDateStr = moment(endDate).format('DD/MM/yyyy');
  
    if (moment(startDateStr, 'DD/MM/yyyy').isValid() && moment(endDateStr, 'DD/MM/yyyy').isValid()) {
      const dateTime = `${startDateStr} - ${endDateStr}`;
      setDateInputValue(dateTime);
      updateUrl('dateTime', dateTime);
      setCurrentPage(1);
      updateUrl('page', '1');
      setDateRangeActive(false);
  
      debounceFetchDataFun({
        keyWord: '',
        orderCode: trimString(orderCode),
        tracking: trimString(trackingCode),
        trackingCode: '',
        orderType: 'TRANSPORT',
        status: formatActive(activeTab),
        fromDate: startDate,
        toDate: moment(endDate).add(1, 'd').toDate(),
        sorts: [{ sortBy: 'OrderDate', sortDirection: 'DESC' }],
        pageIndex: 1,
        pageSize: pageSize,
      });
    }
  };
//render lần đầu:
  useEffect(() => {
    const searchParams = new URLSearchParams(window.location.search);
    let typeParam = searchParams.get('type') ?? 'KHO_QT_CHUA_NHAN';
    setActiveTab(typeParam);
    setActiveTabIndex(itemIndex.indexOf(typeParam));

    const pageParam = searchParams.get('page');
    if (pageParam) {
      setCurrentPage(Number(pageParam));
    } else {
      setCurrentPage(1);
    }

    const dateTime = searchParams.get('dateTime') ?? '';
    let fromDate, toDate;
    if (dateTime) {
      const [start, end] = dateTime.split(' - ').map((date) => moment(date, 'DD/MM/yyyy').toDate());
      setSelectedDates({ start, end });
      setDateInputValue(dateTime);
      fromDate = start;
      toDate = end;
    } else {
      fromDate = moment().subtract(90, 'days').toDate();
      toDate = moment().toDate();
      setSelectedDates({ start: fromDate, end: toDate });
      setDateInputValue(`${moment(fromDate).format('DD/MM/yyyy')} - ${moment(toDate).format('DD/MM/yyyy')}`);
    }
    debounceFetchDataFun({
      keyWord: '',
      orderCode: trimString(orderCode),
      tracking: trimString(trackingCode),
      trackingCode: '',
      orderType: 'TRANSPORT',
      status: formatActive(typeParam),
      fromDate: fromDate,
      toDate: moment(toDate).add(1, 'd').toDate(),
      sorts: [{ sortBy: 'OrderDate', sortDirection: 'DESC' }],
      pageIndex: Number(pageParam),
      pageSize: pageSize,
    });
  }, []);
======================
RETURN
------
 <div className={'DeliveryBill_Picked_Date_Range'}>
                      <div className='Polaris-Labelled__LabelWrapper'>
                        <div className='Polaris-Label'>
                          <label
                            id={'PolarisTextField6Label'}
                            htmlFor={'PolarisTextField6'}
                            className='Polaris-Label__Text'
                          >
                            Thời gian
                          </label>
                        </div>
                      </div>
                      <div className='Polaris-Connected'>
                        <div className='Polaris-Connected__Item Polaris-Connected__Item--primary'>
                          <div className='Polaris-TextField Polaris-TextField--hasValue'>
                            <MaskedInput
                              mask={[
                                /\d/,
                                /\d/,
                                '/',
                                /\d/,
                                /\d/,
                                '/',
                                /\d/,
                                /\d/,
                                /\d/,
                                /\d/,
                                ' ',
                                '-',
                                ' ',
                                /\d/,
                                /\d/,
                                '/',
                                /\d/,
                                /\d/,
                                '/',
                                /\d/,
                                /\d/,
                                /\d/,
                                /\d/,
                              ]}
                              className='Polaris-TextField__Input'
                              placeholder='dd/mm/yyyy - dd/mm/yyyy'
                              guide
                              value={dateInputValue}
                              placeholderChar={'_'}
                              keepCharPositions
                              id='PolarisTextField6'
                              // onChange={(event: any) => {
                              //   setDateInputValue(event.target.value);
                              //   goToPage(1);
                              // }}
                              onChange={handleInputDate}
                              aria-labelledby={'PolarisTextField6Label'}
                              aria-invalid={false}
                            />
                            <div className='Polaris-TextField__Backdrop' />
                            <div className='Polaris-TextField__Suffix'>
                              <Popover
                                fluidContent
                                active={dateRangeActive}
                                activator={
                                  <Button
                                    onClick={() => {
                                      setRangeSelected([]);
                                      setDateRangeActive(!dateRangeActive);
                                      let splitDate = dateInputValue.split(' - ');
                                      let startDateStr = splitDate[0];
                                      let endDateStr = splitDate[1];
                                      if (
                                        moment(startDateStr, 'DD/MM/yyyy').isValid() &&
                                        moment(endDateStr, 'DD/MM/yyyy').isValid()
                                      ) {
                                        setSelectedDates({
                                          start: moment(startDateStr, 'DD/MM/yyyy').toDate(),
                                          end: moment(endDateStr, 'DD/MM/yyyy').toDate(),
                                        });
                                        setDate({
                                          month: moment(endDateStr, 'DD/MM/yyyy').month(),
                                          year: moment(endDateStr, 'DD/MM/yyyy').year(),
                                        });
                                      }
                                    }}
                                    plain
                                    // icon={PolarisIcons.CalendarMajor}
                                    icon={
                                      <div
                                        onClick={handleIconCalendarClick}
                                        onMouseEnter={handleMouseEnter}
                                        onMouseLeave={handleMouseLeave}
                                      >
                                        {/* Sử dụng điều kiện để render biểu tượng phù hợp */}
                                        {isActive ? (
                                          <div className='Block_Wrapper'>
                                            <div className='Block_Icon_Date_Range'>
                                              <IconDateRange />
                                            </div>
                                          </div>
                                        ) : isHovered ? (
                                          <div className='Block_Wrapper'>
                                            <div className='Block_Icon_Date_Range'>
                                              <IconDateRange />
                                            </div>
                                          </div>
                                        ) : (
                                          <div className='Block_Wrapper'>
                                            <div className='Block_Icon_Date_Range'>
                                              <IconDateRange />
                                            </div>
                                          </div>
                                        )}
                                      </div>
                                    }
                                  />
                                }
                                onClose={() => setDateRangeActive(false)}
                              >
                                <div className='Custom-DatePicker'>
                                  <div className='date_range'>
                                    <div className='pre_option'>
                                      <div className='list_option'>
                                        <div className='list_content'>
                                          <OptionList
                                            title=''
                                            onChange={(selected) => {
                                              setRangeSelected(selected);
                                              if (selected[0] == 'today') {
                                                setSelectedDates({
                                                  start: moment().toDate(),
                                                  end: moment().toDate(),
                                                });
                                                setDate({ month: moment().month(), year: moment().year() });
                                              } else if (selected[0] == 'yesterday') {
                                                setSelectedDates({
                                                  start: moment().subtract(1, 'day').toDate(),
                                                  end: moment().subtract(1, 'day').toDate(),
                                                });
                                                setDate({
                                                  month: moment().subtract(1, 'day').month(),
                                                  year: moment().subtract(1, 'day').year(),
                                                });
                                              } else if (selected[0] == 'last_7_days') {
                                                setSelectedDates({
                                                  start: moment().subtract(7, 'day').toDate(),
                                                  end: moment().toDate(),
                                                });
                                                setDate({
                                                  month: moment().subtract(7, 'day').month(),
                                                  year: moment().subtract(7, 'day').year(),
                                                });
                                              } else if (selected[0] == 'last_30_days') {
                                                setSelectedDates({
                                                  start: moment().subtract(30, 'day').toDate(),
                                                  end: moment().toDate(),
                                                });
                                                setDate({
                                                  month: moment().subtract(30, 'day').month(),
                                                  year: moment().subtract(30, 'day').year(),
                                                });
                                              } else if (selected[0] == 'last_90_days') {
                                                setSelectedDates({
                                                  start: moment().subtract(90, 'day').toDate(),
                                                  end: moment().toDate(),
                                                });
                                                setDate({
                                                  month: moment().subtract(90, 'day').month(),
                                                  year: moment().subtract(90, 'day').year(),
                                                });
                                              }
                                            }}
                                            options={[
                                              { value: 'today', label: 'Hôm nay' },
                                              { value: 'yesterday', label: 'Hôm qua' },
                                              { value: 'last_7_days', label: '7 ngày trước' },
                                              { value: 'last_30_days', label: '30 ngày trước' },
                                              { value: 'last_90_days', label: '90 ngày trước' },
                                            ]}
                                            selected={rangeSelected}
                                          />
                                        </div>
                                      </div>
                                    </div>
                                    <div className='pick_date'>
                                      <DatePicker
                                        disableDatesAfter={new Date()}
                                        weekStartsOn={1}
                                        month={month}
                                        year={year}
                                        onChange={setSelectedDates}
                                        onMonthChange={handleMonthChange}
                                        selected={selectedDates}
                                        multiMonth
                                        allowRange
                                      />
                                    </div>
                                  </div>
                                  <div className='actions'>
                                    <LegacyStack distribution={'trailing'}>
                                      <Button onClick={() => setDateRangeActive(false)}>Đóng</Button>
                                      <Button primary onClick={applyDateRange}>
                                        Áp dụng
                                      </Button>
                                    </LegacyStack>
                                  </div>
                                </div>
                              </Popover>
                            </div>
                          </div>
                        </div>
                      </div>
                    </div>
import {
  Autocomplete,
  Button,
  DatePicker,
  FormLayout,
  Icon,
  IndexTable,
  Layout,
  LegacyCard,
  LegacyStack,
  Link,
  Modal,
  OptionList,
  Page,
  PolarisIcons,
  Popover,
  TabProps,
  Tabs,
  Text,
  TextField,
  useIndexResourceState,
} from 'pcs-polaris';
import React, { useCallback, useEffect, useState } from 'react';
import { useLocation, useNavigate } from 'react-router-dom';
import TitleBreadcrumbs from '../../components/Breadcrumb/TitleBreadcrumb.tsx';
import { useDispatch, useSelector } from 'react-redux';
import { AppState } from '../../store';
import { ecommerceOrderAction } from '../../store/reducers/ecommerceOrderReducer';
import moment from 'moment';
import { debounce } from 'lodash';
import { formatMoney } from '../../helpers/currency.ts';
import NumberPagination from '../../components/NumberPagination';
import MaskedInput from 'react-text-mask';
import ActionField from './ActionField.tsx';
import { modalAction } from '../../store/reducers/modalReducer';
import CustomImage from '../../components/CustomImage';
import { apiClient } from '../../utils/api.ts';
import { clearToast, showToast } from '../../helpers/toast.ts';
import CustomAutocomplete from '../../components/CustomAutocomplete';

const limit = 10;
const allRegionOptions = [
  {
    label: 'Tất cả',
    value: '',
  },
  {
    label: 'Tuyến Mỹ',
    value: 'US-VN',
  },
  {
    label: 'Tuyến Nhật Bản',
    value: 'JP-VN',
  },
  {
    label: 'Tuyến Hàn Quốc',
    value: 'KR-VN',
  },
  {
    label: 'Tuyến Anh',
    value: 'UK-VN',
  },
  {
    label: 'Tuyến Đức',
    value: 'DE-VN',
  },
  {
    label: 'Tuyến Canada',
    value: 'CA-VN',
  },
  {
    label: 'Tuyến Trung Quốc',
    value: 'CN-VN',
  },
];

const Ecommerce = () => {
  const dispatch = useDispatch();
  const ecommerceOrderState = useSelector((state: AppState) => state.ecommerceOrder);

  const [regionOptions, setRegionOptions] = useState(allRegionOptions);

  const [page, setPage] = useState(1);
  const [orderCode, setOrderCode] = useState('');
  const [trackingCode, setTrackingCode] = useState('');
  const [searchRoute, setSearchRoute] = useState('Tất cả');
  const [route, setRoute] = useState('');

  const [dateRangeActive, setDateRangeActive] = useState(false);
  const [{ month, year }, setDate] = useState({ month: new Date().getMonth(), year: new Date().getFullYear() });
  const [selectedDates, setSelectedDates] = useState({
    start: moment().subtract(30, 'days').toDate(),
    end: moment().toDate(),
  });

  const handleMonthChange = useCallback((month: number, year: number) => setDate({ month, year }), []);

  const [dateInputValue, setDateInputValue] = useState(
    `${moment(selectedDates.start).format('DD/MM/yyyy')} - ${moment(selectedDates.end).format('DD/MM/yyyy')}`,
  );
  const [rangeSelected, setRangeSelected] = useState<string[]>([]);

  const [itemStrings] = useState([
    { label: 'Đơn mới', value: 'DON_MOI' },
    // {
    //   label: 'Chờ mua',
    //   value: 'CHO_MUA',
    // },
    { label: 'Đã mua', value: 'DA_MUA' },
    {
      label: 'Vận chuyển',
      value: 'VAN_CHUYEN_NOI_DIA',
    },
    // {
    //   label: 'Kho QT',
    //   value: 'KHO_QT',
    // },
    // { label: 'Kho VN', value: 'KHO_VN' },
    {
      label: 'Đang giao',
      value: 'DANG_GIAO_HANG',
    },
    {
      label: 'Đã giao',
      value: 'DA_GIAO_HANG',
    },
    {
      label: 'Đơn hủy',
      value: 'HUY',
    },
  ]);
  const itemIndex = [
    'DON_MOI',
    // 'CHO_MUA',
    'DA_MUA',
    'VAN_CHUYEN_NOI_DIA',
    // 'KHO_QT',
    // 'KHO_VN',
    'DANG_GIAO_HANG',
    'DA_GIAO_HANG',
    'HUY',
  ];
  const [activeTab, setActiveTab] = useState('DON_MOI');
  const [activeTabIndex, setActiveTabIndex] = useState(0);
  const getStatusByType = (type: string) => {
    let status = 0;
    switch (type) {
      case 'CHO_MUA':
        status = 1;
        break;
      case 'DA_MUA':
        status = 2;
        break;
      case 'VAN_CHUYEN_NOI_DIA':
        status = 3;
        break;
      case 'KHO_QT':
        status = 4;
        break;
      case 'KHO_VN':
        status = 5;
        break;
      case 'DANG_GIAO_HANG':
        status = 6;
        break;
      case 'DA_GIAO_HANG':
        status = 7;
        break;
      case 'HUY':
        status = 8;
        break;
      default:
        break;
    }
    return status;
  };

  useEffect(() => {
    let pageParam: string = searchParams.get('page') ?? '1';
    setPage(Number(pageParam));

    let typeParam: string = searchParams.get('type') ?? 'DON_MOI';
    setActiveTab(typeParam);
    setActiveTabIndex(itemIndex.indexOf(typeParam));
  }, []);

  const takeDate = (type: 'start' | 'end') => {
    let splitDate = dateInputValue.split(' - ');
    return type == 'start' ? splitDate[0] : splitDate[1];
  };

  const debounceFetchDataFun = useCallback(
    debounce((data: any) => {
      dispatch(ecommerceOrderAction.fetchOrders(data));
      dispatch(ecommerceOrderAction.fetchTotal(data));
    }, 300),
    [],
  );

  useEffect(() => {
    debounceFetchDataFun({
      status: getStatusByType(activeTab),
      orderCode: orderCode,
      trackingCode: trackingCode,
      routeCode: route,
      fromDate: moment(takeDate('start'), 'DD/MM/yyyy').toDate(),
      toDate: moment(takeDate('end'), 'DD/MM/yyyy').add(1, 'd').toDate(),
      pageIndex: page,
      pageSize: limit,
      sorts: [
        {
          sortBy: 'CreatedDate',
          sortDirection: 'DESC',
        },
      ],
    });
  }, [orderCode, trackingCode, route, dateInputValue]);

  const handleChangeTab = (selectedTabIndex: number) => {
    let activeTabStr = itemIndex[selectedTabIndex];
    clearSelection();
    setActiveTabIndex(selectedTabIndex);
    setPage(1);
    setActiveTab(activeTabStr);
    updateUrl('type', activeTabStr);
    updateUrl('page', '1');

    let payload = {
      status: getStatusByType(activeTabStr),
      orderCode: orderCode,
      trackingCode: trackingCode,
      routeCode: route,
      fromDate: moment(takeDate('start'), 'DD/MM/yyyy').toDate(),
      toDate: moment(takeDate('end'), 'DD/MM/yyyy').add(1, 'd').toDate(),
      pageIndex: 1,
      pageSize: limit,
      sorts: [
        {
          sortBy: 'CreatedDate',
          sortDirection: 'DESC',
        },
      ],
    };
    dispatch(ecommerceOrderAction.fetchOrders(payload));
    dispatch(ecommerceOrderAction.fetchTotal(payload));
  };

  const getTabCount = (type: string) => {
    let badge = 0;
    switch (type) {
      case 'DON_MOI':
        badge = ecommerceOrderState.total.new;
        break;
      case 'CHO_MUA':
        badge = ecommerceOrderState.total.waitingBuy;
        break;
      case 'DA_MUA':
        badge = ecommerceOrderState.total.buy;
        break;
      case 'VAN_CHUYEN_NOI_DIA':
        badge = ecommerceOrderState.total.transportQT;
        break;
      case 'KHO_QT':
        badge = ecommerceOrderState.total.receiveQT;
        break;
      case 'KHO_VN':
        badge = ecommerceOrderState.total.receiveVN;
        break;
      case 'DANG_GIAO_HANG':
        badge = ecommerceOrderState.total.delivering;
        break;
      case 'DA_GIAO_HANG':
        badge = ecommerceOrderState.total.delivery;
        break;
      case 'HUY':
        badge = ecommerceOrderState.total.cancel;
        break;
      default:
        break;
    }
    return badge.toString();
  };
  const navigate = useNavigate();
  const location = useLocation();
  const searchParams = new URLSearchParams(location.search);
  const tabs: TabProps[] = itemStrings.map((item, index) => ({
    content: item.label,
    badge: getTabCount(item.value),
    index,
    onAction: () => {
      setActiveTab(item.value);
      setActiveTabIndex(index);
    },
    id: `${item.value}-${index}`,
  }));

  const updateUrl = (key: string, value: string) => {
    searchParams.set(key, value);
    navigate({ search: searchParams.toString() });
  };
  // Tab_Mobile
  useEffect(() => {
    const typeParam = new URLSearchParams(window.location.search).get('type') || 'DON_MOI';
    setActiveTab(typeParam);
  }, []);

  const getPaymentStatusBadge = (status: string) => {
    if (!status) {
      return '';
    }
    let pad = '4px 12px';
    let bgColor = '#FFB703';
    switch (status) {
      case 'Chờ xử lý':
        bgColor = '#FFB703';
        pad = '4px 19px';
        break;
      case 'Đã tạm ứng':
        bgColor = '#219EBC';
        break;
      case 'Đã cọc':
        bgColor = '#219EBC';
        break;
      case 'Chờ thanh toán':
        bgColor = '#FFB703';
        break;
      case 'Đã thanh toán':
        bgColor = '#0050A6';
        break;
      case 'Đã hoàn tiền':
        bgColor = '#A91116';
        break;
      default:
        break;
    }
    return (
      <div
        style={{
          padding: pad,
          color: '#fff',
          backgroundColor: bgColor,
          borderRadius: '4px',
          fontSize: '12px',
          display: 'inline-flex',
        }}
      >
        {status}
      </div>
    );
  };

  const resourceIDResolver = (item: any) => {
    return `${item.orderCode}`;
  };

  const { selectedResources, allResourcesSelected, handleSelectionChange, clearSelection } = useIndexResourceState(
    ecommerceOrderState.data,
    { resourceIDResolver },
  );
  console.log('chọn cái nào?', selectedResources.length);

  const goToPage = (pageNumber: number) => {
    setPage(pageNumber);
    updateUrl('page', `${pageNumber}`);
    let payload = {
      status: getStatusByType(activeTab),
      orderCode: orderCode,
      trackingCode: trackingCode,
      routeCode: route,
      fromDate: moment(takeDate('start'), 'DD/MM/yyyy').toDate(),
      toDate: moment(takeDate('end'), 'DD/MM/yyyy').add(1, 'd').toDate(),
      pageIndex: pageNumber,
      pageSize: limit,
      sorts: [
        {
          sortBy: 'CreatedDate',
          sortDirection: 'DESC',
        },
      ],
    };
    dispatch(ecommerceOrderAction.fetchOrders(payload));
    dispatch(ecommerceOrderAction.fetchTotal(payload));
  };

  const handleRefresh = () => {
    debounceFetchDataFun({
      status: getStatusByType(activeTab),
      orderCode: orderCode,
      trackingCode: trackingCode,
      routeCode: route,
      fromDate: moment(takeDate('start'), 'DD/MM/yyyy').toDate(),
      toDate: moment(takeDate('end'), 'DD/MM/yyyy').add(1, 'd').toDate(),
      pageIndex: page,
      pageSize: limit,
      sorts: [
        {
          sortBy: 'CreatedDate',
          sortDirection: 'DESC',
        },
      ],
    });
  };

  //format shippingRouteCode
  const formatShippingRouteCode = (code: string) => {
    switch (code) {
      case 'JP-VN':
        return 'Nhật';
      case 'US-VN':
        return 'Mỹ';
      case 'KR-VN':
        return 'Hàn Quốc';
      case 'UK-VN':
        return 'Anh';
      case 'DE-VN':
        return 'Đức';
      case 'VN':
        return 'Việt Nam';
      case 'CA-VN':
        return 'Canada';
      case 'CN-VN':
        return 'Trung Quốc';
      default:
        return code;
    }
  };
  const rowMarkup = ecommerceOrderState.data.map((item: any, index: number) => {
    let attributes = JSON.parse(item.proAttribute) ?? {};
    return (
      <IndexTable.Row
        id={`${item.orderCode}`}
        key={index}
        selected={selectedResources.includes(`${item.orderCode}`)}
        position={index}
        onClick={() => {}}
      >
        <IndexTable.Cell>
          <div
            onClick={() =>
              dispatch(
                modalAction.openModal({
                  type: 'view_image',
                  title: item.productName,
                  data: {
                    src: item.previewImage,
                  },
                }),
              )
            }
          >
            <CustomImage src={item.previewImage} alt={item.productName} />
          </div>
        </IndexTable.Cell>
        <IndexTable.Cell>{item.orderCode}</IndexTable.Cell>
        <IndexTable.Cell>
          <div className={'Cell-ProductName'}>
            <Link onClick={() => window.open(item.productLink, '_blank')} removeUnderline url={'#'}>
              {item.productName}
            </Link>
          </div>
          {Object.keys(attributes).length ? (
            <div style={{ display: 'flex', flexDirection: 'column', gap: 4, marginTop: 4 }}>
              {Object.keys(attributes).map((key: string, idx: number) => (
                <div key={idx}>
                  <Text as={'p'} variant={'bodySm'}>
                    {key}: {attributes[key]}
                  </Text>
                </div>
              ))}
            </div>
          ) : null}
        </IndexTable.Cell>
        <IndexTable.Cell>{formatShippingRouteCode(item.shippingRouteCode)}</IndexTable.Cell>
        <IndexTable.Cell>{item.orderType}</IndexTable.Cell>
        <IndexTable.Cell>{item.amount}</IndexTable.Cell>
        <IndexTable.Cell>{formatMoney(item.totalAmount, 'VND')}</IndexTable.Cell>
        <IndexTable.Cell>{item.orderDate}</IndexTable.Cell>
        {activeTab != 'HUY' ? <IndexTable.Cell>{getPaymentStatusBadge(item.paymentStatusName)}</IndexTable.Cell> : null}
        <IndexTable.Cell>
          <ActionField activeTab={activeTab} data={item} callback={() => handleRefresh()} />
        </IndexTable.Cell>
      </IndexTable.Row>
    );
  });

  const [openModalBulkCancel, setOpenModalBulkCancel] = useState(false);
  const [loadingCancel, setLoadingCancel] = useState(false);

  const handleCancel = async () => {
    if (loadingCancel) {
      return;
    }
    setLoadingCancel(true);
    setOpenModalBulkCancel(true);

    let codes = [];
    let data = ecommerceOrderState.data;
    for (let i = 0; i < data.length; i++) {
      if (data[i].paymentStatusName != 'Đã tạm ứng' && selectedResources.includes(data[i].orderCode)) {
        codes.push(data[i].orderCode);
      }
    }

    if (codes.length) {
      for (let i = 0; i < codes.length; i++) {
        let orderCode = codes[i];
        try {
          let response = await apiClient.post('api/Order/CancelOrder', {
            orderCode: orderCode,
          });
          if (response.data.status) {
            showToast(`Huỷ đơn ${orderCode} thành công`, 'success');
          } else {
            showToast(`Huỷ đơn ${orderCode} thất bại`, 'error');
          }
        } catch (e) {}
      }
      clearSelection();
      handleRefresh();
    } else {
      showToast('Không thể huỷ đơn đã tạm ứng', 'error');
    }
    setLoadingCancel(false);
    setOpenModalBulkCancel(false);
  };

  const [loadingPayment, setLoadingPayment] = useState(false);
  const handlePayment = async () => {};

  const getBulkSelect = () => {
    let bulks = [];
    if (activeTab == 'DON_MOI') {
      bulks.push({
        content: `Thanh toán ${selectedResources.length} đơn hàng`,
        // url: `/don-hang-ecommerce/thanh-toan?items=${selectedResources.join(',')}`,
        onAction: () => {
          let codes = [];
          let data = ecommerceOrderState.data;
          for (let i = 0; i < data.length; i++) {
            if (data[i].paymentStatusName != 'Đã tạm ứng' && selectedResources.includes(data[i].orderCode)) {
              codes.push(data[i].orderCode);
            }
          }
          if (codes.length) {
            window.open(`/don-hang-ecommerce/thanh-toan?items=${codes.join(',')}`, '_blank');
          } else {
            clearToast();
            showToast('Đơn hàng đã được tạm ứng', 'error');
            return;
          }
        },
      });
    }
    if (activeTab == 'DON_MOI' || activeTab == 'CHO_MUA') {
      bulks.push({
        content: `Huỷ ${selectedResources.length} đơn hàng`,
        onAction: () => setOpenModalBulkCancel(true),
      });
    }
    return bulks;
  };

  return (
    <div className='Polaris-Custom Title_Breadcrumb'>
      <Page
        //@ts-ignore
        title={<TitleBreadcrumbs breadcrumbs={[{ title: 'Danh sách đơn hàng', url: '' }]} />}
        primaryAction={
          { content: 'Tạo đơn', url: '/don-hang-ecommerce/tao-moi' }
          // <div className='Create_Order'>
          //   <Link url='/don-hang-ecommerce/tao-moi' removeUnderline monochrome>
          //     <Button>TẠO ĐƠN</Button>
          //   </Link>
          // </div>
        }
      >
        <Layout>
          <Layout.Section>
            <LegacyCard>
              <LegacyCard.Section>
                <FormLayout>
                  <FormLayout.Group>
                    <TextField
                      label='Mã đơn hàng'
                      value={orderCode}
                      onChange={(value) => setOrderCode(value)}
                      autoComplete='off'
                    />
                    <TextField
                      label='Mã tracking'
                      value={trackingCode}
                      onChange={(value) => setTrackingCode(value)}
                      autoComplete='off'
                    />
                    <div className={'TextField--Mask'}>
                      <div className='Polaris-Labelled__LabelWrapper'>
                        <div className='Polaris-Label'>
                          <label
                            id={'PolarisTextField6Label'}
                            htmlFor={'PolarisTextField6'}
                            className='Polaris-Label__Text'
                          >
                            Thời gian
                          </label>
                        </div>
                      </div>
                      <div className='Polaris-Connected'>
                        <div className='Polaris-Connected__Item Polaris-Connected__Item--primary'>
                          <div className='Polaris-TextField Polaris-TextField--hasValue'>
                            <MaskedInput
                              mask={[
                                /\d/,
                                /\d/,
                                '/',
                                /\d/,
                                /\d/,
                                '/',
                                /\d/,
                                /\d/,
                                /\d/,
                                /\d/,
                                ' ',
                                '-',
                                ' ',
                                /\d/,
                                /\d/,
                                '/',
                                /\d/,
                                /\d/,
                                '/',
                                /\d/,
                                /\d/,
                                /\d/,
                                /\d/,
                              ]}
                              className='Polaris-TextField__Input'
                              placeholder='dd/mm/yyyy - dd/mm/yyyy'
                              guide
                              value={dateInputValue}
                              placeholderChar={'_'}
                              keepCharPositions
                              id='PolarisTextField6'
                              onChange={(event: any) => {
                                setDateInputValue(event.target.value);
                                // goToPage(1);
                                setPage(1);
                                updateUrl('page', '1');
                              }}
                              aria-labelledby={'PolarisTextField6Label'}
                              aria-invalid={false}
                            />
                            <div className='Polaris-TextField__Backdrop' />
                            <div className='Polaris-TextField__Suffix'>
                              <Popover
                                fluidContent
                                active={dateRangeActive}
                                activator={
                                  <Button
                                    onClick={() => {
                                      setRangeSelected([]);
                                      setDateRangeActive(!dateRangeActive);
                                      let splitDate = dateInputValue.split(' - ');
                                      let startDateStr = splitDate[0];
                                      let endDateStr = splitDate[1];
                                      if (
                                        moment(startDateStr, 'DD/MM/yyyy').isValid() &&
                                        moment(endDateStr, 'DD/MM/yyyy').isValid()
                                      ) {
                                        setSelectedDates({
                                          start: moment(startDateStr, 'DD/MM/yyyy').toDate(),
                                          end: moment(endDateStr, 'DD/MM/yyyy').toDate(),
                                        });
                                        setDate({
                                          month: moment(endDateStr, 'DD/MM/yyyy').month(),
                                          year: moment(endDateStr, 'DD/MM/yyyy').year(),
                                        });
                                      }
                                    }}
                                    plain
                                    icon={PolarisIcons.CalendarMajor}
                                  />
                                }
                                onClose={() => setDateRangeActive(false)}
                              >
                                <div className='Custom-DatePicker'>
                                  <div className='date_range'>
                                    <div className='pre_option'>
                                      <div className='list_option'>
                                        <div className='list_content'>
                                          <OptionList
                                            title=''
                                            onChange={(selected) => {
                                              setRangeSelected(selected);
                                              if (selected[0] == 'today') {
                                                setSelectedDates({
                                                  start: moment().toDate(),
                                                  end: moment().toDate(),
                                                });
                                                setDate({ month: moment().month(), year: moment().year() });
                                              } else if (selected[0] == 'yesterday') {
                                                setSelectedDates({
                                                  start: moment().subtract(1, 'day').toDate(),
                                                  end: moment().subtract(1, 'day').toDate(),
                                                });
                                                setDate({
                                                  month: moment().subtract(1, 'day').month(),
                                                  year: moment().subtract(1, 'day').year(),
                                                });
                                              } else if (selected[0] == 'last_7_days') {
                                                setSelectedDates({
                                                  start: moment().subtract(7, 'day').toDate(),
                                                  end: moment().toDate(),
                                                });
                                                setDate({
                                                  month: moment().subtract(7, 'day').month(),
                                                  year: moment().subtract(7, 'day').year(),
                                                });
                                              } else if (selected[0] == 'last_30_days') {
                                                setSelectedDates({
                                                  start: moment().subtract(30, 'day').toDate(),
                                                  end: moment().toDate(),
                                                });
                                                setDate({
                                                  month: moment().subtract(30, 'day').month(),
                                                  year: moment().subtract(30, 'day').year(),
                                                });
                                              } else if (selected[0] == 'last_90_days') {
                                                setSelectedDates({
                                                  start: moment().subtract(90, 'day').toDate(),
                                                  end: moment().toDate(),
                                                });
                                                setDate({
                                                  month: moment().subtract(90, 'day').month(),
                                                  year: moment().subtract(90, 'day').year(),
                                                });
                                              }
                                            }}
                                            options={[
                                              { value: 'today', label: 'Hôm nay' },
                                              { value: 'yesterday', label: 'Hôm qua' },
                                              { value: 'last_7_days', label: '7 ngày trước' },
                                              { value: 'last_30_days', label: '30 ngày trước' },
                                              { value: 'last_90_days', label: '90 ngày trước' },
                                            ]}
                                            selected={rangeSelected}
                                          />
                                        </div>
                                      </div>
                                    </div>
                                    <div className='pick_date'>
                                      <DatePicker
                                        disableDatesAfter={new Date()}
                                        weekStartsOn={1}
                                        month={month}
                                        year={year}
                                        onChange={setSelectedDates}
                                        onMonthChange={handleMonthChange}
                                        selected={selectedDates}
                                        multiMonth
                                        allowRange
                                      />
                                    </div>
                                  </div>
                                  <div className='actions'>
                                    <LegacyStack distribution={'trailing'}>
                                      <Button onClick={() => setDateRangeActive(false)}>Đóng</Button>
                                      <Button
                                        primary
                                        onClick={() => {
                                          let startDate = selectedDates.start;
                                          let endDate = selectedDates.end;
                                          let startDateStr = moment(startDate).format('DD/MM/yyyy');
                                          let endDateStr = moment(endDate).format('DD/MM/yyyy');
                                          setDateInputValue(`${startDateStr} - ${endDateStr}`);
                                          // goToPage(1);
                                          setPage(1);
                                          updateUrl('page', '1');
                                          setDateRangeActive(false);
                                        }}
                                      >
                                        Áp dụng
                                      </Button>
                                    </LegacyStack>
                                  </div>
                                </div>
                              </Popover>
                            </div>
                          </div>
                        </div>
                      </div>
                    </div>
                    <CustomAutocomplete
                      id={'EcommerceRoute'}
                      label={'Tuyến'}
                      allOptions={allRegionOptions}
                      selected={route}
                      onSelect={(value) => {
                        setRoute(value);
                        // goToPage(1);
                        setPage(1);
                        updateUrl('page', '1');
                      }}
                    />
                    {/*<Autocomplete*/}
                    {/*  options={regionOptions}*/}
                    {/*  selected={[route]}*/}
                    {/*  onSelect={(selected) => {*/}
                    {/*    setRoute(selected[0]);*/}
                    {/*    goToPage(1);*/}
                    {/*    const selectedText = selected.map((selectedItem) => {*/}
                    {/*      const matchedOption = regionOptions.find((option) => {*/}
                    {/*        return option['value'] == selectedItem;*/}
                    {/*      });*/}
                    {/*      if (matchedOption) {*/}
                    {/*        return `${matchedOption['label']}`;*/}
                    {/*      }*/}
                    {/*      return '';*/}
                    {/*    });*/}
                    {/*    setSearchRoute(selectedText[0]);*/}
                    {/*  }}*/}
                    {/*  textField={*/}
                    {/*    <Autocomplete.TextField*/}
                    {/*      value={searchRoute}*/}
                    {/*      onChange={(value) => {*/}
                    {/*        setSearchRoute(value);*/}
                    {/*        if (value) {*/}
                    {/*          let tmp: any = [];*/}
                    {/*          for (let i = 0; i < allRegionOptions.length; i++) {*/}
                    {/*            let label: any = allRegionOptions[i]['label'];*/}
                    {/*            if (label.toLowerCase().includes(value.toLowerCase())) {*/}
                    {/*              tmp.push(allRegionOptions[i]);*/}
                    {/*            }*/}
                    {/*          }*/}
                    {/*          setRegionOptions(tmp);*/}
                    {/*        } else {*/}
                    {/*          setRegionOptions(allRegionOptions);*/}
                    {/*        }*/}
                    {/*      }}*/}
                    {/*      suffix={<Icon source={PolarisIcons.CaretDownMinor} />}*/}
                    {/*      autoComplete={'off'}*/}
                    {/*      label={'Tuyến'}*/}
                    {/*    />*/}
                    {/*  }*/}
                    {/*/>*/}
                  </FormLayout.Group>
                </FormLayout>
              </LegacyCard.Section>
            </LegacyCard>
          </Layout.Section>

          <Layout.Section>
            <LegacyCard>
              <div className='Tabs_Custom Style_Polaris_Tab'>
                <Tabs
                  tabs={tabs}
                  selected={activeTabIndex}
                  onSelect={(selectedTabIndex) => {
                    handleChangeTab(selectedTabIndex);
                  }}
                />
              </div>
              <LegacyCard.Section>
                <div className='Ecommerce'>
                  <div className='Ecommerce_Index_Table IndexTable--NoSticky'>
                    <IndexTable
                      // promotedBulkActions={getBulkSelect()}
                      loading={ecommerceOrderState.data_loading}
                      lastColumnSticky
                      itemCount={ecommerceOrderState.data.length}
                      selectedItemsCount={allResourcesSelected ? 'All' : selectedResources.length}
                      onSelectionChange={handleSelectionChange}
                      headings={
                        activeTab == 'HUY'
                          ? [
                              { title: 'Hình ảnh', alignment: 'center' },
                              { title: 'Mã đơn hàng', alignment: 'center' },
                              { title: 'Sản phẩm', alignment: 'start' },
                              { title: 'Tuyến', alignment: 'center' },
                              { title: 'Nguồn hàng', alignment: 'center' },
                              { title: 'Số lượng', alignment: 'center' },
                              { title: 'Tổng tiền', alignment: 'center' },
                              { title: 'Ngày đặt hàng', alignment: 'center' },
                              { title: 'Action', alignment: 'center' },
                            ]
                          : [
                              { title: 'Hình ảnh', alignment: 'center' },
                              { title: 'Mã đơn hàng', alignment: 'center' },
                              { title: 'Sản phẩm', alignment: 'start' },
                              { title: 'Tuyến', alignment: 'center' },
                              { title: 'Nguồn hàng', alignment: 'center' },
                              { title: 'Số lượng', alignment: 'center' },
                              { title: 'Tổng tiền', alignment: 'center' },
                              { title: 'Ngày đặt hàng', alignment: 'center' },
                              { title: 'TT thanh toán', alignment: 'center' },
                              { title: 'Action', alignment: 'center' },
                            ]
                      }
                    >
                      {rowMarkup}
                    </IndexTable>
                  </div>
                  {selectedResources.length > 0 && activeTab === 'DON_MOI' && (
                    <div className='List_SelectResource_IndexTable'>
                      <div style={{ color: '#85C0FF', fontSize: '20px' }}>
                        Tổng: {selectedResources.length} đơn hàng
                      </div>
                      <div style={{display: 'flex', justifyContent: 'center', alignItems: 'center', gap: '16px', whiteSpace: 'nowrap'}}>
                        <div style={{color: '#FFFFFF', padding: '12px 16px', cursor: 'pointer', userSelect: 'none'}} onClick={() => setOpenModalBulkCancel(true)}>Hủy đơn</div>
                        <div
                        style={{padding: '12px 20px', color: '#FFFFFF', backgroundColor: '#0B81FF', borderRadius: '4px', cursor: 'pointer', userSelect: 'none'}}
                          onClick={() => {
                            let codes = [];
                            let data = ecommerceOrderState.data;

                            for (let i = 0; i < data.length; i++) {
                              if (
                                data[i].paymentStatusName !== 'Đã tạm ứng' &&
                                selectedResources.includes(data[i].orderCode)
                              ) {
                                codes.push(data[i].orderCode);
                              }
                            }

                            if (codes.length) {
                              window.open(`/don-hang-ecommerce/thanh-toan?items=${codes.join(',')}`, '_blank');
                            } else {
                              clearToast();
                              showToast('Đơn hàng đã được tạm ứng', 'error');
                              return;
                            }
                          }}
                        >
                          Thanh toán
                        </div>
                      </div>
                    </div>
                  )}
                </div>
              </LegacyCard.Section>
              {ecommerceOrderState.data_length ? (
                <LegacyCard.Section>
                  <NumberPagination
                    pageSize={limit}
                    totalItems={ecommerceOrderState.data_length}
                    currentPage={page}
                    goToPage={(pageNumber) => goToPage(pageNumber)}
                  />
                </LegacyCard.Section>
              ) : null}
            </LegacyCard>
          </Layout.Section>
        </Layout>
      </Page>
      <Modal
        open={openModalBulkCancel}
        primaryAction={{
          content: `Huỷ ${selectedResources.length} đơn`,
          destructive: true,
          onAction() {
            handleCancel();
          },
          loading: loadingCancel,
        }}
        secondaryActions={[
          {
            content: 'Đóng',
            onAction() {
              setOpenModalBulkCancel(false);
            },
          },
        ]}
        title={'Xác nhận huỷ đơn'}
        onClose={() => setOpenModalBulkCancel(false)}
      >
        <Modal.Section>
          <Text as={'p'} variant={'bodyMd'}>
            Bạn chắc chắn muốn huỷ {selectedResources.length} đơn hàng?
          </Text>
        </Modal.Section>
      </Modal>
    </div>
  );
};
export default Ecommerce;

LOGIC
-----
  const [searchValue, setSearchValue] = useState('');

  const [mode, setMode] = useState('home');

  const [searchPage, setSearchPage] = useState(1);
  const [loadingSearch, setLoadingSearch] = useState(false);
  const [searchData, setSearchData] = useState<any>([]);

  const [loadingMoreSearch, setLoadingMoreSearch] = useState(false);
  const getIdFromLink = (url: string) => {
    try {
      let urlParse = new URL(url);
      let pathname = urlParse.pathname;
      let pathSplit = pathname.split('/itm/');
      let itemSplit = pathSplit[1].split('/');
      return itemSplit[0];
    } catch (e) {
      console.log(e);
    }
    return '';
  };
  const handleSearch = (value: string, page = 1) => {
    if (value.includes('https://')) {
      let id = getIdFromLink(value);
      setSuggestions([]);
      window.open(`/shopping/product/${id}`, '_blank');


      return;
    }
    setLoadingSearch(true);
    setSearchPage(page);
    shopApiClient
      .get(`/api/ebay/search-products?keyword=${encodeURI(value)}&page=${page}`)
      .then((response: AxiosResponse) => {
        console.log(response);
        let items = response.data.items;
        if (Array.isArray(items)) {
          setSearchData(items);
          setSuggestions([]);
        } else {
          setSearchData([]);
        }
        setLoadingSearch(false);
      })
      .catch((e) => {
        console.log(e);
        setSearchData([]);
        setLoadingSearch(false);
        setSuggestions([]);
      });
  };
===============
  //logic search sugggested
  const [suggestions, setSuggestions] = useState<string[]>([]);
  const fetchSuggestions = (keyword: string) => {
    if (keyword.trim() === '') {
      setSuggestions([]);
      return;
    }
    shopApiClient
      .get(`/api/ebay/suggested-keywords?keyword=${encodeURI(keyword)}`)
      .then((response: AxiosResponse) => {
        setSuggestions(response.data);
      })
      .catch((e) => {
        console.log(e);
        setSuggestions([]);
      });
  };
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
RETURN
------
 <Page
        //@ts-ignore
        title={<TitleBreadcrumbs breadcrumbs={[{ title: 'Shopping', url: '' }]} />}
        primaryAction={
          <div
            className={'HomeSearch'}
            onKeyDown={(event) => {
              const enterKeyPressed = event.keyCode === 13;
              if (enterKeyPressed) {
                event.preventDefault();
                if (searchValue) {
                  setMode('search');
                  handleSearch(searchValue);
                } else {
                  setMode('home');
                }
              }
            }}
          >
            <TextField
              autoComplete={'off'}
              prefix={<Icon source={PolarisIcons.SearchMajor} />}
              label={''}
              value={searchValue}
              onChange={(value) => {
                setSearchValue(value);
                fetchSuggestions(value);
              }}
              placeholder={'Nhập tìm kiếm sản phẩm'}
              clearButton={true}
              onClearButtonClick={() => {
                setSearchValue('');
                setMode('home');
                setSuggestions([]);
              }}
            />
            {suggestions.length > 0 && (
              <div className='suggestions-list'>
                {suggestions.map((suggestion, index) => (
                  <div
                    key={index}
                    className='suggestion-item'
                    onClick={() => {
                      setSearchValue(suggestion);
                      setMode('search');
                      handleSearch(suggestion);
                    }}
                  >
                    {suggestion}
                  </div>
                ))}
              </div>
            )}
          </div>
        }
      >
_______________________________________________
CSS:
.suggestions-list {
  position: absolute;
  background-color: white;
  border: 1px solid #ddd;
  border-radius: 4px;
  width: 600px;
  // max-height: 200px;
  // overflow-y: auto;
  z-index: 10;
  @media screen and (max-width: 1200px) {
    width: 400px;
  }
  @media screen and (max-width: 824px) {
    width: 320px;
  }
  @media all and (max-width: 600px) {
    width: 200px;
  }
}

.suggestion-item {
  padding: 12px;
  cursor: pointer;
}

.suggestion-item:hover {
  background-color: #f0f0f0;
}
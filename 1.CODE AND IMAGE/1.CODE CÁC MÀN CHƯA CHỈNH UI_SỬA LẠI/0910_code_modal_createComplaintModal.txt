import React, { useEffect, useState } from 'react';
import { useDispatch, useSelector } from 'react-redux';
import { AppState } from '../../store';
import { LegacyStack, Modal, TextField } from 'pcs-polaris';
import { modalAction } from '../../store/reducers/modalReducer';
import { IconUploadImage } from '../../pages/Ecommerce/IconEcommerce';
import CustomAutocomplete from '../CustomAutocomplete';
import { complaintAction } from '../../store/reducers/complaintReducer';
import { apiClient } from '../../utils/api';

type Props = {
  data: {
    orderCode: string;
  };
};
const CreateComplaintModal = (props: Props) => {
  const dispatch = useDispatch();
  const modalState = useSelector((state: AppState) => state.modal);
  ////////////////////////////////////////////////////////////////////////////////////////
  // combo box
  const complaintState = useSelector((state: AppState) => state.complaint);
  const [selectedType, setSelectedType] = useState<string>('');
  useEffect(() => {
    dispatch(complaintAction.fetchType());
  }, []);
  const typeComplaint =
    complaintState?.type.map((item) => ({
      label: item.complaintName,
      value: item.complaintId.toString(),
    })) || [];
  const options = [{ label: 'Chọn phương thức khiếu nại', value: '' }, ...typeComplaint];
  //---------------------------------------------------------
  // hình ảnh
  const [uploadedImages, setUploadedImages] = useState<File[]>([]);
  const handleUploadImage = async (event: React.ChangeEvent<HTMLInputElement>) => {
    // Kiểm tra nếu không có tệp nào được chọn
    if (!event.target.files) {
      return;
    }
    const files = Array.from(event.target.files);
    // Kiểm tra số lượng ảnh đã tải lên
    if (uploadedImages.length + files.length > 5) {
      // setShowToast(true);
      return;
    }
    // Tạo FormData và upload ảnh
    const formData = new FormData();
    files.forEach((file) => formData.append('files', file));

    try {
      const response = await apiClient.post('api/File/UploadImage', formData, {
        headers: {
          'Content-Type': 'multipart/form-data',
        },
      });
      // Cập nhật state với ảnh đã tải lên
      setUploadedImages((prevImages) => [...prevImages, ...files]);
    } catch (error) {
      console.error('Upload failed', error);
    }
  };
  const handleRemoveImage = (index: number) => {
    setUploadedImages((prevImages) => prevImages.filter((_, i) => i !== index));
  };
    //---------------------------------------------------------
  ////////////////////////////////////////////////////////////////////////////////////////
  const handleCreateComplaint = () => {
    dispatch(modalAction.closeModal());
  };
  const [codeComplaint, setCodeComplaint] = useState<string>(props.data.orderCode || '');
  const [type, setType] = useState('');
  const [title, setTitle] = useState('');
  const [content, setContent] = useState('');
  return (
    <div className='Modal_Complaint'>
      <Modal
        open={modalState.open}
        onClose={() => dispatch(modalAction.closeModal())}
        title={modalState.title}
        primaryAction={{
          content: 'Gửi khiếu nại',
          onAction: handleCreateComplaint,
        }}
        secondaryActions={[
          {
            content: 'Hủy',
            onAction() {
              dispatch(modalAction.closeModal());
            },
          },
        ]}
      >
        <Modal.Section>
          <LegacyStack vertical>
            <LegacyStack.Item>
              <div style={{ display: 'flex', flexDirection: 'column', gap: '24px' }}>
                <div style={{ display: 'flex', flexDirection: 'column', gap: '16px' }}>
                  <div className='TextField_Complaint'>
                    <TextField
                      label={'Mã đơn hàng/Tracking'}
                      requiredIndicator
                      autoComplete={'off'}
                      onChange={(value) => setCodeComplaint(value)}
                      value={codeComplaint}
                      placeholder='Nhập mã đơn hàng'
                    />
                  </div>
                  {options.length > 1 ? (
                    <CustomAutocomplete
                      id={'ComplaintRoute'}
                      //@ts-ignore
                      label={
                        <div>
                          Loại khiếu nại<span style={{ color: '#A91116', marginLeft: '2px' }}>*</span>
                        </div>
                      }
                      allOptions={options}
                      selected={selectedType}
                      onSelect={(value) => setSelectedType(value)}
                    />
                  ) : null}

                  <div className='TextField_Complaint'>
                    <TextField
                      label={'Tiêu đề'}
                      requiredIndicator
                      autoComplete={'off'}
                      onChange={(value) => setTitle(value)}
                      value={title}
                      placeholder='Nhập nội dung'
                    />
                  </div>
                </div>
                <div style={{ display: 'flex', flexDirection: 'column', gap: '24px' }}>
                  <div className='TextField_Complaint_Content'>
                    <TextField
                      label={'Nội dung khiếu nại'}
                      requiredIndicator
                      autoComplete={'off'}
                      onChange={(value) => setContent(value)}
                      value={content}
                      placeholder='Nhập nội dung khiếu nại'
                      multiline={4}
                    />
                  </div>
                  {/* <div style={{ display: 'flex', alignItems: 'center', gap: '24px', flexWrap: 'wrap' }}>
                    <div style={{ fontWeight: '700' }}>Hình ảnh/Tài liệu đính kèm</div>
                    <div className='Upload_File_Create_Ecommerce'>
                      <IconUploadImage />
                      Upload File
                    </div>
                  </div>
                  <div style={{ display: 'flex', gap: '20px', flexWrap: 'wrap' }}>
                    <div className='Image_Complaint_Wrapper'>
                      <IconImageComplaint />
                    </div>
                    <div className='Image_Complaint_Wrapper'>
                      <IconImageComplaint />
                    </div>
                    <div className='Image_Complaint_Wrapper'>
                      <IconImageComplaint />
                    </div>
                    <div className='Image_Complaint_Wrapper'>
                      <IconImageComplaint />
                    </div>
                    <div className='Image_Complaint_Wrapper'>
                      <IconImageComplaint />
                    </div>
                  </div> */}
                  <div className='Upload_File_Create_Ecommerce'>
                    <input
                      type='file'
                      multiple
                      onChange={handleUploadImage}
                      style={{ display: 'none' }}
                      id='upload-button'
                    />
                    <label htmlFor='upload-button' style={{ display: 'flex', alignItems: 'center', cursor: 'pointer' }}>
                      <IconUploadImage />
                      Upload File
                    </label>
                    {uploadedImages.length >= 5 && <div style={{ color: 'red' }}>Bạn đã đạt tối đa ảnh khiếu nại</div>}
                  </div>
                  <div style={{ display: 'flex', gap: '20px', flexWrap: 'wrap' }}>
                    {uploadedImages.map((image, index) => (
                      <div className='Image_Complaint_Wrapper' key={index}>
                        <img
                          src={URL.createObjectURL(image)}
                          alt={`Uploaded ${index}`}
                          style={{ width: '100%', height: '100%', objectFit: 'cover' }}
                        />
                        <button
                          onClick={() => handleRemoveImage(index)}
                          style={{ position: 'absolute', top: 0, right: 0 }}
                        >
                          XXXXXXXXXXXXXXX
                        </button>
                      </div>
                    ))}
                  </div>
                  {/* {showToast && <div className='toast'>Bạn đã đạt tối đa ảnh khiếu nại</div>} */}
                  <label
                    htmlFor='upload-button'
                    style={{
                      display: 'flex',
                      alignItems: 'center',
                      cursor: uploadedImages.length >= 5 ? 'not-allowed' : 'pointer',
                    }}
                    onClick={uploadedImages.length >= 5 ? (e) => e.preventDefault() : undefined}
                  >
                    <IconUploadImage />
                    Upload File
                  </label>
                </div>
              </div>
            </LegacyStack.Item>
          </LegacyStack>
        </Modal.Section>
      </Modal>
    </div>
  );
};

export default CreateComplaintModal;

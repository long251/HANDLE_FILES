import React, { lazy, Suspense, useCallback, useEffect, useState } from 'react';
import {
  ActionList,
  AppProvider,
  Button,
  Divider,
  Frame,
  Icon,
  Image,
  LegacyCard,
  LegacyStack,
  Link,
  Modal,
  Navigation,
  PolarisIcons,
  Popover,
  Spinner,
  Text,
  TextField,
  Toast,
  Tooltip,
  TopBar,
} from 'pcs-polaris';
import viTranslations from '@shopify/polaris/locales/vi.json';
import LoadingMarkup from '../components/LoadingMarkup';
import { useDispatch, useSelector } from 'react-redux';
import { apiClient } from '../utils/api';
import { debounce, divide } from 'lodash';
import { AppState } from '../store';
import { searchAction } from '../store/reducers/searchReducer';
import RouterLink from '../components/RouterLink';
import { Navigate, useLocation, useNavigate } from 'react-router-dom';
import {
  AccountIcon,
  AddressIcon,
  CollapseIcon,
  DashboardIcon,
  ExpandIcon,
  IconArrowNext,
  IconBill,
  IconCartNew,
  IconDown,
  IconEcommerce,
  IconExpandAccountUser,
  IconOrderSearch,
  IconSearchTracking,
  IconTrackOrder,
  IconTrans,
  IconTransport,
  IconUp,
  IconWallet,
  IconWebsite,
  LockIcon,
  LogoutIcon,
  ShoppingIcon,
} from '../components/Icons';
import Theme from '../config/theme.ts';
import { Route, Routes } from 'react-router';
import FooterMarkup from '../components/FooterMarkup';
import { toastAction } from '../store/reducers/toastReducer';
import { buildAuthUrl, buildLogoutUrl } from '../config/auth.ts';
import { authAction } from '../store/reducers/authReducer';
import { modalAction } from '../store/reducers/modalReducer';
import { showToast } from '../helpers/toast.ts';
import { isDesktop } from '../helpers/device.ts';
import { VITE_REQUIRED_AUTH } from '../config/env.ts';
import { getCustomerLevelImage } from '../helpers/level.ts';
import GeneralInformation from '../pages/Account/GeneralInformation.tsx';
import { cartAction } from '../store/reducers/cartReducer';
import { countryFromRoute, formatMoney } from '../helpers/currency.ts';
import CreateAddressModal from '../components/Modal/CreateAddressModal.tsx';
import EditAddressModal from '../components/Modal/EditAddressModal.tsx';
import OrderDetail from '../components/Modal/OrderDetail.tsx';
import OrderSearch from '../pages/OrderSearch/OrderSearch.tsx';
import { formatNumber } from '../helpers/number.ts';
import ImportCreateShippingOrders from '../pages/ShippingOrders/ImportCreateShippingOrders.tsx';
import PaymentStatusBadge from '../components/PaymentStatusBadge';
import { IconBreadcrumDate } from '../pages/DeliveryBill/IconDeliveryBill.tsx';
import { IconX } from '../pages/Account/IconAccount.tsx';
import { IconCloseProduct, IconXProduct } from '../pages/Ecommerce/IconEcommerce.tsx';
import TrackingSearch from '../pages/TrackingSearch/TrackingSearch.tsx';

const Account = lazy(() => import('../pages/Account'));
const PaymentHistory = lazy(() => import('../pages/PaymentHistory'));
const SQTWallet = lazy(() => import('../pages/SQTWallet/SQTWallet.tsx'));
const CreateRequest = lazy(() => import('../pages/SQTWallet/CreateRequest.tsx'));
const DeliveryBillDetail = lazy(() => import('../pages/DeliveryBill/DeliveryBillDetail.tsx'));
const TrackingList = lazy(() => import('../pages/TrackingList/TrackingList.tsx'));
const Ecommerce = lazy(() => import('../pages/Ecommerce/Ecommerce.tsx'));
const EcommerceDetail2 = lazy(() => import('../pages/Ecommerce/EcommerceDetail.tsx'));
const EcommerceDetail = lazy(() => import('../pages/Ecommerce/Detail.tsx'));
const EcommerceCreate = lazy(() => import('../pages/Ecommerce/Create.tsx'));
const EcommerceMultiCreate = lazy(() => import('../pages/Ecommerce/MultiCreate.tsx'));
const EcommerceImportCreate = lazy(() => import('../pages/Ecommerce/ImportCreate.tsx'));
const EcommercePayment = lazy(() => import('../pages/Ecommerce/Payment.tsx'));
const EcommerceThankYou = lazy(() => import('../pages/Ecommerce/ThankYou.tsx'));
const ShippingOrders = lazy(() => import('../pages/ShippingOrders/ShippingOrders.tsx'));
const CreateShippingOrders = lazy(() => import('../pages/ShippingOrders/CreateShippingOrders.tsx'));
const ShippingDetails = lazy(() => import('../pages/ShippingOrders/ShippingDetails.tsx'));

const DeliveryBill = lazy(() => import('../pages/DeliveryBill/DeliveryBill.tsx'));
const Website = lazy(() => import('../pages/Website'));
const Home = lazy(() => import('../pages/Home'));
const Shopping = lazy(() => import('../pages/Shopping/Home'));
const Cart = lazy(() => import('../pages/Shopping/Cart'));
const Checkout = lazy(() => import('../pages/Shopping/Checkout'));
const ThankYou = lazy(() => import('../pages/Shopping/ThankYou'));
const Category = lazy(() => import('../pages/Shopping/Category/Category.tsx'));
const Product = lazy(() => import('../pages/Shopping/Product/Product.tsx'));
const Deal = lazy(() => import('../pages/Shopping/Deal'));
const Callback = lazy(() => import('../pages/Callback'));

const MainApp = () => {
  const location = useLocation();
  const navigate = useNavigate();
  const toastState = useSelector((state: AppState) => state.toast);
  const modalState = useSelector((state: AppState) => state.modal);
  const cartState = useSelector((state: AppState) => state.cart);
  const ribbonState = useSelector((state: AppState) => state.ribbon);
  const ecommerceOrderState = useSelector((state: AppState) => state.ecommerceOrder);

  const [informationPopover, setInformationPopover] = useState(false);
  const [selectedTab, setSelectedTab] = useState(0);
  const [newsNotifications, setNewsNotifications] = useState<any>([]);
  const [activitiesNotifications, setActivitiesNotifications] = useState<any>([]);
  const [newsNotReadLength, setNewsNotReadLength] = useState(0);
  const [activitiesNotReadLength, setActivitiesNotReadLength] = useState(0);

  const [cartPopover, setCartPopover] = useState(false);

  const dispatch = useDispatch();
  const authState = useSelector((state: AppState) => state.auth);
  useEffect(() => {
    if (VITE_REQUIRED_AUTH) {
      let token = localStorage.getItem('token');
      if (!token) {
        if (!location.pathname.includes('/callback')) {
          window.location.href = `${buildAuthUrl()}`;
        }
      } else {
        initAuth(token);
      }
    } else {
      dispatch(
        authAction.fetchLoginSucceed({
          token: 'development',
          user: {
            customer: {
              fullname: 'Nguyễn Tuấn Minh',
              // email: 'development@pcs.vn',
            },
          },
        }),
      );
    }
  }, []);
  const initAuth = (token: string) => {
    dispatch(authAction.fetchLogin({ token: token }));
  };

  useEffect(() => {
    if (authState.token) {
      dispatch(cartAction.fetchCart());
    }
  }, [authState.token]);

  const loadingPageMarkup = <LoadingMarkup />;

  const [userOpen, setUserOpen] = useState(false);
  const userMenuMarkup = (
    <div className='Style_Avatar'>
      <TopBar.UserMenu
        actions={[
          {
            items: [
              {
                //@ts-ignore
                content: (
                  <img
                    style={{ maxWidth: '250px', height: '40px' }}
                    src={getCustomerLevelImage(authState.user?.customer?.level)}
                    alt={'User rank'}
                  />
                ),
                url: '/tai-khoan',
                id: 'UserMenuLevel',
              },
            ],
          },
          {
            items: [
              {
                //@ts-ignore
                content: (
                  <div className='UserMenuItem'>
                    <AccountIcon />
                    <p className='UserMenuItem--Text'>Thông tin tài khoản</p>
                  </div>
                ),
                url: '/tai-khoan',
              },
              {
                //@ts-ignore
                content: (
                  <div className='UserMenuItem'>
                    <AddressIcon />
                    <p className='UserMenuItem--Text'>Sổ địa chỉ</p>
                  </div>
                ),
                url: '/tai-khoan?tab=so-dia-chi',
                // icon: AddressSVG,
              },
              // {
              //   //@ts-ignore
              //   content: (
              //     <div className='UserMenuItem'>
              //       <BankIcon />
              //       <p className='UserMenuItem--Text'>Tài khoản ngân hàng</p>
              //     </div>
              //   ),
              //   url: '/thong-tin-ca-nhan/tai-khoan-ngan-hang',
              //   // icon: BankAccountSVG,
              // },
              {
                //@ts-ignore
                content: (
                  <div className='UserMenuItem'>
                    <LockIcon />
                    <p className='UserMenuItem--Text'>Đổi mật khẩu</p>
                  </div>
                ),
                url: '/tai-khoan?tab=doi-mat-khau',
                // icon: ChangePasswordSVG,
              },
            ],
          },
          {
            items: [
              {
                //@ts-ignore
                content: (
                  <div>
                    <div className='UserMenuItem'>
                      <LogoutIcon />
                      <p className='UserMenuItem--Text'>Logout</p>
                    </div>
                  </div>
                ),
                onAction: () => handleLogout(),
              },
            ],
          },
        ]}
        // AvatarSample.png
        // avatar={authState.user?.customer?.avatar ?? '/images/account/AvatarSample.png'}
        // name={authState.user?.customer?.fullname}

        // detail={authState.user?.customer?.email}
        initials='Icon'
        open={userOpen}
        onToggle={() => setUserOpen(!userOpen)}
        customActivator={
          <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'center' }}>
            <img
              src={authState.user?.customer?.avatar ?? '/images/account/AvatarSample.png'}
              alt='User Avatar'
              style={{ borderRadius: '50%', width: '40px', height: '40px', objectFit: 'cover' }}
            />
            <div className='Style_AccountUser_FullName'>
              <p style={{ fontWeight: '700' }}>{authState.user?.customer?.fullname}</p>
            </div>
            <div style={{ marginLeft: '16px', marginBottom: '4px' }}>
              <IconDown />
            </div>
          </div>
        }
      />
    </div>
  );

  const handleLogout = () => {
    let token = localStorage.getItem('token');
    let idToken = localStorage.getItem('id_token');
    if (token) {
      localStorage.removeItem('token');
      localStorage.removeItem('id_token');
      window.location.href = `${buildLogoutUrl(idToken)}`;
    }
  };

  const [mobileNavigationActive, setMobileNavigationActive] = useState(false);

  const [expandedItem, setExpandedItem] = useState<string | null>(null);
  const handleToggle = (item: string) => {
    if (expandedItem !== item) {
      setExpandedItem(item);
    } else {
      setExpandedItem(null);
    }
  };

  const toggleMobileNavigationActive = () =>
    setMobileNavigationActive((mobileNavigationActive) => !mobileNavigationActive);
  const navigationMarkup = (
    <Navigation location={location.pathname}>
      <Navigation.Section
        title={''}
        items={[
          {
            label: 'Dashboard',
            url: '/home',
            icon: DashboardIcon,
            onClick: () => setExpandedItem(null),
          },
          {
            label: 'Shopping',
            url: '/shopping',
            icon: ShoppingIcon,
            onClick: () => setExpandedItem(null),
          },
        ]}
      />
      <Navigation.Section
        separator
        title={'Quản lý đơn hàng'}
        items={[
          {
            label: 'Đơn hàng Ecommerce',
            url: '/don-hang-ecommerce',
            icon: IconEcommerce,
            badge: (
              <Icon source={expandedItem === 'ecommerce' ? PolarisIcons.CaretUpMinor : PolarisIcons.CaretDownMinor} />
            ),
            subNavigationItems:
              expandedItem === 'ecommerce'
                ? [
                    {
                      label: 'Danh sách đơn hàng',
                      url: '/don-hang-ecommerce',
                    },
                    { label: 'Tạo đơn mới', url: '/don-hang-ecommerce/tao-moi' },
                  ]
                : [],
            onClick: () => handleToggle('ecommerce'),
            expanded: expandedItem === 'ecommerce',
          },
          {
            label: 'Đơn hàng vận chuyển',
            url: '/don-hang-van-chuyen',
            icon: IconTransport,
            badge: <Icon source={expandedItem === 'vc' ? PolarisIcons.CaretUpMinor : PolarisIcons.CaretDownMinor} />,
            subNavigationItems:
              expandedItem === 'vc'
                ? [
                    {
                      label: 'Danh sách đơn hàng',
                      url: '/don-hang-van-chuyen',
                    },
                    { label: 'Tạo đơn mới', url: '/don-hang-van-chuyen/tao-moi' },
                  ]
                : [],
            onClick: () => handleToggle('vc'),
            expanded: expandedItem === 'vc',
          },
          // {
          //   label: 'Đơn hàng vận chuyển',
          //   url: '/don-hang-van-chuyen',
          //   icon: IconTransport,
          //   subNavigationItems: [
          //     {
          //       label: 'Danh sách đơn hàng',
          //       url: '/don-hang-van-chuyen',
          //     },
          //     {
          //       label: 'Tạo đơn mới',
          //       url: '/don-hang-van-chuyen/tao-moi',
          //     },
          //   ],
          // },
          {
            label: 'Danh sách Phiếu xuất',
            url: '/danh-sach-phieu-xuat',
            icon: IconBill,
            onClick: () => setExpandedItem(null),
          },
          {
            label: 'Tra cứu đơn hàng',
            url: '/tra-cuu-don-hang',
            icon: IconSearchTracking,
            onClick: () => setExpandedItem(null),
          },
        ]}
      />
      <Navigation.Section
        title={'Quản lý giao dịch'}
        items={[
          {
            label: 'SQT Wallet',
            url: '/sqt-wallet',
            icon: IconWallet,
            onClick: () => setExpandedItem(null),
          },
          {
            label: 'Lịch sử giao dịch',
            url: '/lich-su-giao-dich',
            icon: IconTrans,
            onClick: () => setExpandedItem(null),
          },
        ]}
      />
      <Navigation.Section
        title={'Tiện ích'}
        items={[
          {
            label: 'Website mua hàng',
            url: '/website-mua-hang',
            icon: IconWebsite,
            onClick: () => setExpandedItem(null),
          },
        ]}
      />
    </Navigation>
  );

  // const secondaryMenu = (
  //   <div style={{ display: 'flex', gap: 8, alignItems: 'center', marginRight: 16, height: '100%' }}>
  //     <Popover
  //       active={cartPopover}
  //       activator={
  //         // <div className={'sync-information hover-background'} onClick={() => setCartPopover(!cartPopover)}>
  //         //   <Button icon={PolarisIcons.CartMajor} plain />
  //         // {cartState.data.length ? (
  //         //   <>
  //         //     <Badge status={'critical'}>{`${cartState.data.length}`}</Badge>
  //         //   </>
  //         // ) : null}
  //         // </div>
  //         <div className='Style_Cart' onClick={() => setCartPopover(!cartPopover)}>
  //           <div>
  //             <IconCartNew />
  //           </div>
  //           <div>{cartState.data.length ? <div className='Style_Index_Cart'>{cartState.data.length}</div> : null}</div>
  //         </div>
  //       }
  //       onClose={() => setCartPopover(false)}
  //     >
  //       <LegacyCard>
  //         {cartState.data.map((item: any, index: number) => {
  //           let url = item.url;
  //           if (item.input_from == 'shopping') {
  //             let itemUrlSplit = item.url.split('/itm/');
  //             if (itemUrlSplit.length > 1) {
  //               url = `/shopping/product/${itemUrlSplit[1]}`;
  //             }
  //           }
  //           return (
  //             <LegacyCard.Section key={index}>
  //               <div style={{ display: 'flex', gap: 8 }}>
  //                 <div style={{ width: 50 }}>
  //                   <img
  //                     style={{ maxWidth: '100%', maxHeight: '100%', objectFit: 'cover' }}
  //                     src={item.image}
  //                     alt={item.name}
  //                   />
  //                 </div>
  //                 <div style={{ display: 'flex', flexDirection: 'column', gap: 4, flex: 1 }}>
  //                   <Link target={'_blank'} url={url} removeUnderline monochrome>
  //                     {item.name}
  //                   </Link>
  //                   <div>
  //                     {formatMoney(item.price, item.currency)}{' '}
  //                     <Text as={'span'} variant={'bodyMd'} color={'critical'}>
  //                       x{item.quantity}
  //                     </Text>{' '}
  //                     ~{' '}
  //                     <Text as={'span'} variant={'bodyMd'} fontWeight={'semibold'}>
  //                       {formatMoney(item.amount, 'VND')}
  //                     </Text>
  //                   </div>
  //                   <div>
  //                     {item.input_from == 'shopping'
  //                       ? 'Shopping ･ Từ Mỹ'
  //                       : `Buying ･ Từ ${countryFromRoute(item.route)} ･ Thuế ${formatNumber(
  //                           item.tax,
  //                         )}% ･ Shipping fee: ${formatMoney(item.shippingFee, item.currency)}`}
  //                   </div>
  //                 </div>
  //               </div>
  //             </LegacyCard.Section>
  //           );
  //         })}
  //         <LegacyCard.Section>
  //           <LegacyStack distribution={'equalSpacing'} alignment={'center'}>
  //             <LegacyStack.Item fill>
  //               Tổng tiền sản phẩm:{' '}
  //               <Text as={'span'} variant={'bodyMd'} fontWeight={'semibold'}>
  //                 {formatMoney(
  //                   cartState.data.reduce((accumulator, currentValue) => accumulator + currentValue.amount, 0),
  //                   'VND',
  //                 )}
  //               </Text>
  //             </LegacyStack.Item>
  //             <LegacyStack.Item>
  //               <Button onClick={() => setCartPopover(false)} primary url={'/shopping/cart'}>
  //                 Giỏ hàng
  //               </Button>
  //             </LegacyStack.Item>
  //           </LegacyStack>
  //         </LegacyCard.Section>
  //       </LegacyCard>
  //     </Popover>
  //     {/* <Popover
  //       fullHeight
  //       active={informationPopover}
  //       activator={
  //         <div className={'sync-information hover-background'} onClick={() => handleOpenNotification()}>
  //           <Button icon={PolarisIcons.NotificationMajor} plain />
  //           {newsNotReadLength + activitiesNotReadLength > 0 ? (
  //             <>
  //               <Badge status={'critical'}>{`${newsNotReadLength + activitiesNotReadLength}`}</Badge>
  //               <div className='loader'>loading...</div>
  //             </>
  //           ) : null}
  //         </div>
  //       }
  //       onClose={() => setInformationPopover(false)}
  //     >
  //       <div className='Tabs_Custom'>
  //         <Tabs
  //           selected={selectedTab}
  //           tabs={[
  //             {
  //               id: 'news',
  //               content: `Hệ thống (${newsNotReadLength})`,
  //             },
  //             {
  //               id: 'activities',
  //               content: `Hoạt động (${activitiesNotReadLength})`,
  //             },
  //           ]}
  //           onSelect={(selectedTabIndex) => handleChangeTabNotification(selectedTabIndex)}
  //         />
  //       </div>
  //       {selectedTab == 0 ? (
  //         <LegacyCard>
  //           {newsNotifications.map((value: any, index: number) => (
  //             <LegacyCard.Section
  //               key={index}
  //               title={
  //                 <Text as={'h3'} variant={'headingMd'}>
  //                   {value.title}
  //                 </Text>
  //               }
  //             >
  //               <div dangerouslySetInnerHTML={{ __html: value.description }} />
  //             </LegacyCard.Section>
  //           ))}
  //           {newsNotifications.length == 0 ? (
  //             <LegacyCard.Section title={''}>
  //               <Empty />
  //             </LegacyCard.Section>
  //           ) : null}
  //         </LegacyCard>
  //       ) : null}
  //       {selectedTab == 1 ? (
  //         <LegacyCard>
  //           {activitiesNotifications.map((value: any, index: number) => (
  //             <LegacyCard.Section key={index} title={<strong>{value.time_ago}</strong>}>
  //               <span dangerouslySetInnerHTML={{ __html: value.title }} />.{' '}
  //               <span dangerouslySetInnerHTML={{ __html: value.description }} />
  //             </LegacyCard.Section>
  //           ))}
  //           {activitiesNotifications.length == 0 ? (
  //             <LegacyCard.Section title={''}>
  //               <Empty />
  //             </LegacyCard.Section>
  //           ) : null}
  //         </LegacyCard>
  //       ) : null}
  //     </Popover> */}
  //   </div>
  // );

  const handleCartClose = () => {
    setCartPopover(false);
    document.body.classList.remove('no-scroll');
  };

  const handleOverlayClick = () => {
    handleCartClose();
  };
  const handleCartToggle = () => {
    // setCartPopover(!cartPopover);
    setCartPopover((prev) => !prev);
    if (!cartPopover) {
      document.body.classList.add('no-scroll');
    } else {
      document.body.classList.remove('no-scroll');
    }
  };
  const [removeCartId, setRemoveCartId] = useState(0);
  const [loadingRemoveCartItem, setLoadingRemoveCartItem] = useState(false);
  const handleRemoveCartItem = async (removeCartItem: any) => {
    setLoadingRemoveCartItem(true);
    setRemoveCartId(removeCartItem.id);
    let payload = {
      id: removeCartItem.id,
    };
    const response = await apiClient.post('/api/ShoppingCart/DeleteShoppingCart', payload);
    if (response.data.status) {
      dispatch(cartAction.fetchCart());
    } else {
    }
    setRemoveCartId(0);
    setLoadingRemoveCartItem(false);
  };
  const secondaryMenu = (
    <div style={{ display: 'flex', gap: 8, alignItems: 'center', marginRight: 16, height: '100%' }}>
      <div className='Style_Cart' onClick={handleCartToggle}>
        <div>
          <IconCartNew />
        </div>
        <div>{cartState.data.length ? <div className='Style_Index_Cart'>{cartState.data.length}</div> : null}</div>
      </div>
      {/* Drawer thay cho Popover */}
      {/* {cartPopover && ( */}
      <div className={`drawer-overlay ${cartPopover ? 'show' : ''}`} onClick={handleOverlayClick}>
        <div className={`drawer ${cartPopover ? 'show' : ''}`} onClick={(e) => e.stopPropagation()}>
          <div className='header'>
            <Button onClick={handleCartClose} primary url={'/shopping/cart'}>
              Giỏ hàng
            </Button>
            <h2
              onClick={handleCartClose}
              style={{
                cursor: 'pointer',
                userSelect: 'none',
                marginTop: '4px',
                display: 'flex',
                justifyContent: 'center',
                alignContent: 'center',
                gap: '4px',
              }}
            >
              <div>Close</div>
              <div>
                <IconArrowNext />
              </div>
            </h2>
          </div>

          <div className='drawer-content'>
            {cartState.data.length ? (
              <LegacyCard>
                {cartState.data.map((item, index) => (
                  <div key={index} style={{ padding: '20px 0 0 0' }}>
                    <div style={{ display: 'flex', gap: 8 }}>
                      <div style={{ width: 50 }}>
                        <img
                          style={{ maxWidth: '100%', maxHeight: '100%', objectFit: 'cover' }}
                          src={item.image}
                          alt={item.name}
                        />
                      </div>
                      <div style={{ display: 'flex', flexDirection: 'column', gap: 12, flex: 1 }}>
                        <div style={{ display: 'flex', flexDirection: 'row', justifyContent: 'space-between' }}>
                          <Link target={'_blank'} url={item.url} removeUnderline monochrome>
                            <div className='product-name'>{item.name}</div>
                          </Link>
                          <div
                            style={{ textAlign: 'right', cursor: 'pointer', userSelect: 'none' }}
                            onClick={() => handleRemoveCartItem(item)}
                          >
                            {loadingRemoveCartItem && removeCartId === item.id ? (
                              <Spinner size='small' />
                            ) : (
                              <IconXProduct />
                            )}
                          </div>
                        </div>
                        <div style={{ display: 'flex', flexDirection: 'row', justifyContent: 'space-between', alignItems: 'flex-end' }}>
                          <div>
                            <div style={{ color: '#A0ACBE' }}>
                              {item.input_from === 'shopping'
                                ? 'Shopping ･ Từ Mỹ'
                                : `Buying ･ Từ ${countryFromRoute(item.route)} ･ Thuế ${formatNumber(
                                    item.tax,
                                  )}% ･ Shipping fee: ${formatMoney(item.shippingFee, item.currency)}
                                  `}
                            </div>
                          </div>
                          <div style={{ textAlign: 'right' }}>
                            <div>
                              {formatMoney(item.price, item.currency)}{' '}
                              <Text as={'span'} variant={'bodyMd'} color={'critical'}>
                                x{item.quantity}
                              </Text>
                            </div>
                            <div>
                              <Text as={'span'} variant={'bodyMd'} fontWeight={'semibold'}>
                                ~{formatMoney(item.amount, 'VND')}
                              </Text>
                            </div>
                          </div>
                        </div>
                      </div>
                    </div>
                    {index < cartState.data.length - 1 && (
                      <hr style={{ margin: '12px 0', border: 'none', borderTop: '1px solid #D1D5DB' }} />
                    )}
                  </div>
                ))}
              </LegacyCard>
            ) : (
              <div
                style={{
                  textAlign: 'center',
                  padding: '20px',
                  display: 'flex',
                  justifyContent: 'center',
                  alignItems: 'center',
                  gap: '20px',
                  flexDirection: 'column',
                }}
              >
                <img
                  src='/images/shopping/category/ImageNoProduct.png'
                  alt='Không có sản phẩm'
                  style={{ maxWidth: '100%' }}
                />
                <p>Không có sản phẩm nào trong giỏ hàng</p>
                <Button primary url={'/shopping'} onClick={handleCartClose}>
                  Tiếp tục mua sắm
                </Button>
              </div>
            )}
          </div>
        </div>
      </div>
    </div>
  );

  const handleChangeTabNotification = (tabIndex: number) => {
    setSelectedTab(tabIndex);
    if (tabIndex == 0) {
      apiClient
        .post('/notification/read_news.json')
        .then(() => {
          setNewsNotReadLength(0);
        })
        .catch(() => {
          console.log('123');
        });
    }
    if (tabIndex == 1) {
      apiClient
        .post('/notification/read_activities.json')
        .then(() => {
          setActivitiesNotReadLength(0);
        })
        .catch(() => {
          console.log('123');
        });
    }
  };

  const handleOpenNotification = () => {
    setInformationPopover(true);
    handleChangeTabNotification(0);
  };

  const [isSearchActive, setIsSearchActive] = useState(false);
  const [searchValue, setSearchValue] = useState('');
  const [searchResults, setSearchResults] = useState<any>([]);

  const searchState = useSelector((state: AppState) => state.search);

  const searchResultsMarkup = (
    <ActionList items={searchState.loading_customers ? [{ content: 'Searching customers...' }] : searchResults} />
  );
  const handleSearchResultsDismiss = () => {
    setIsSearchActive(false);
    setSearchValue('');
    setSearchResults([]);
  };

  const debounceSearchEmailFun = useCallback(
    debounce(
      (keyword: string) =>
        dispatch(
          searchAction.searchCustomers({
            keyword: keyword,
          }),
        ),
      500,
    ),
    [],
  );

  useEffect(() => {
    let tmp = [];
    let customers = searchState.customers;
    for (let i = 0; i < customers.length; i++) {
      const item = customers[i];
      tmp.push({
        content: item.email,
        url: `/customers/${item.id}`,
        icon: PolarisIcons.CustomersMajor,
      });
    }
    setSearchResults(tmp);
  }, [searchState.customers]);

  const handleSearchChange = (value: any) => {
    setSearchValue(value);
    // setIsSearchActive(value.length > 0);
    // if (value.length) {
    //   debounceSearchEmailFun(value);
    // } else {
    //   setSearchResults([]);
    // }
    // if (value.length > 0) {
    //   navigate(`/tim-kiem-don-hang/${value}`);
    // }
  };
  const isMobile = window.innerWidth <= 576;
  const [desktopNavExpand, setDesktopNavExpand] = useState(localStorage.getItem('desktop_nav_expand') != 'false');
  const searchFieldMarkup = (
    <div style={{ width: '100%', display: 'flex', gap: 8, alignItems: 'center' }}>
      {isDesktop() ? (
        // <Switch
        //   switch={desktopNavExpand}
        //   changeSwitch={(v) => {
        //     setDesktopNavExpand(v);
        //     localStorage.setItem('desktop_nav_expand', v ? 'true' : 'false');
        //   }}
        // />
        <div className={'toggle-menu'}>
          <Button
            onClick={() => {
              let v = !desktopNavExpand;
              setDesktopNavExpand(v);
              localStorage.setItem('desktop_nav_expand', v ? 'true' : 'false');
            }}
            icon={desktopNavExpand ? CollapseIcon : ExpandIcon}
            plain
          />
        </div>
      ) : null}
      {!isMobile ? (
        <div style={{ flex: 1 }}>
          <Text as={'h2'} variant={'headingMd'}>
            QUẢN LÝ ĐƠN HÀNG
          </Text>
        </div>
      ) : null}
      <div
        style={{
          width: '100%',
          flex: 1,
        }}
        className='Style_TopBar_SearchField'
        onKeyDown={(event) => {
          const enterKeyPressed = event.keyCode === 13;
          if (enterKeyPressed) {
            event.preventDefault();
            if (searchValue) {
              navigate(`/tim-kiem-don-hang/${searchValue}`);
            } else {
              navigate(`/`);
            }
          }
        }}
      >
        <TopBar.SearchField placeholder='Nhập nội dung tìm kiếm' value={searchValue} onChange={handleSearchChange} />
      </div>
    </div>
  );

  const topBarMarkup = (
    <TopBar
      secondaryMenu={secondaryMenu}
      searchField={searchFieldMarkup}
      searchResults={searchResultsMarkup}
      searchResultsVisible={isSearchActive}
      onSearchResultsDismiss={handleSearchResultsDismiss}
      showNavigationToggle
      userMenu={userMenuMarkup}
      onNavigationToggle={toggleMobileNavigationActive}
    />
  );

  return (
    <>
      {location.pathname == '/callback' ? (
        <AppProvider i18n={viTranslations} linkComponent={RouterLink}>
          <Callback />
        </AppProvider>
      ) : (
        <>
          {authState.token ? (
            <AppProvider i18n={viTranslations} linkComponent={RouterLink}>
              {isDesktop() && !desktopNavExpand ? (
                <div className='Polaris-AppSwitcher'>
                  <LegacyStack vertical>
                    <LegacyStack.Item>
                      <Link url={'/home'}>
                        <button className={`Polaris-AppSwitcherItem-Logo Polaris-AppSwitcherItem--Logo`}>
                          <img
                            alt={'Home'}
                            style={{ width: '48px', objectFit: 'contain' }}
                            src='/images/logo/shipquocte_square.svg'
                          />
                        </button>
                      </Link>
                    </LegacyStack.Item>
                    <LegacyStack.Item>
                      <Divider />
                    </LegacyStack.Item>
                    <LegacyStack.Item>
                      <Tooltip content={'Dashboard'} dismissOnMouseOut preferredPosition={'below'}>
                        <Link url={'/home'}>
                          <button
                            className={`Polaris-AppSwitcherItem ${
                              location.pathname.includes('/home') ? 'Polaris-AppSwitcherItem--selected' : ''
                            }`}
                          >
                            <div className='MiniIconWrapper'>
                              <div className='MiniIcon'>
                                <Icon source={DashboardIcon} />
                              </div>
                            </div>
                          </button>
                        </Link>
                      </Tooltip>
                    </LegacyStack.Item>
                    <LegacyStack.Item>
                      <Tooltip content={'Shopping'} dismissOnMouseOut preferredPosition={'below'}>
                        <Link url={'/shopping'}>
                          <button
                            className={`Polaris-AppSwitcherItem ${
                              location.pathname.includes('/shopping') ? 'Polaris-AppSwitcherItem--selected' : ''
                            }`}
                          >
                            <div className='MiniIconWrapper'>
                              <div className='MiniIcon'>
                                <Icon source={ShoppingIcon} />
                              </div>
                            </div>
                          </button>
                        </Link>
                      </Tooltip>
                    </LegacyStack.Item>
                    <LegacyStack.Item>
                      <Divider />
                    </LegacyStack.Item>
                    <LegacyStack.Item>
                      <div className='AppSwitcher-Section--Title'>Đơn hàng</div>
                    </LegacyStack.Item>
                    <LegacyStack.Item>
                      <Tooltip content={'Đơn hàng Ecommerce'} dismissOnMouseOut preferredPosition={'below'}>
                        <Link url={'/don-hang-ecommerce'}>
                          <button
                            className={`Polaris-AppSwitcherItem ${
                              location.pathname.includes('/don-hang-ecommerce')
                                ? 'Polaris-AppSwitcherItem--selected'
                                : ''
                            }`}
                          >
                            <div className='MiniIconWrapper'>
                              <div className='MiniIcon'>
                                <Icon source={IconEcommerce} />
                              </div>
                            </div>
                          </button>
                        </Link>
                      </Tooltip>
                    </LegacyStack.Item>
                    <LegacyStack.Item>
                      <Tooltip content={'Đơn hàng vận chuyển'} dismissOnMouseOut preferredPosition={'below'}>
                        <Link url={'/don-hang-van-chuyen'}>
                          <button
                            className={`Polaris-AppSwitcherItem ${
                              location.pathname.includes('/don-hang-van-chuyen')
                                ? 'Polaris-AppSwitcherItem--selected'
                                : ''
                            }`}
                          >
                            <div className='MiniIconWrapper'>
                              <div className='MiniIcon'>
                                <Icon source={IconTransport} />
                              </div>
                            </div>
                          </button>
                        </Link>
                      </Tooltip>
                    </LegacyStack.Item>
                    {/* <LegacyStack.Item>
                      <Tooltip content={'Danh sách Tracking'} dismissOnMouseOut preferredPosition={'below'}>
                        <Link url={'/danh-sach-tracking'}>
                          <button
                            className={`Polaris-AppSwitcherItem ${
                              location.pathname.includes('/danh-sach-tracking')
                                ? 'Polaris-AppSwitcherItem--selected'
                                : ''
                            }`}
                          >
                            <div className='MiniIconWrapper'>
                              <div className='MiniIcon'>
                                <Icon source={IconTracking} />
                              </div>
                            </div>
                          </button>
                        </Link>
                      </Tooltip>
                    </LegacyStack.Item> */}
                    <LegacyStack.Item>
                      <Tooltip content={'Danh sách phiếu xuất'} dismissOnMouseOut preferredPosition={'below'}>
                        <Link url={'/danh-sach-phieu-xuat'}>
                          <button
                            className={`Polaris-AppSwitcherItem ${
                              location.pathname.includes('/danh-sach-phieu-xuat')
                                ? 'Polaris-AppSwitcherItem--selected'
                                : ''
                            }`}
                          >
                            <div className='MiniIconWrapper'>
                              <div className='MiniIcon'>
                                <Icon source={IconBill} />
                              </div>
                            </div>
                          </button>
                        </Link>
                      </Tooltip>
                    </LegacyStack.Item>
                    <LegacyStack.Item>
                      <Tooltip content={'Tra cứu đơn hàng'} dismissOnMouseOut preferredPosition={'below'}>
                        <Link url={'/tra-cuu-don-hang'}>
                          <button
                            className={`Polaris-AppSwitcherItem ${
                              location.pathname.includes('/tra-cuu-don-hang') ? 'Polaris-AppSwitcherItem--selected' : ''
                            }`}
                          >
                            <div className='MiniIconWrapper'>
                              <div className='MiniIcon'>
                                <Icon source={IconOrderSearch} />
                              </div>
                            </div>
                          </button>
                        </Link>
                      </Tooltip>
                    </LegacyStack.Item>
                    <LegacyStack.Item>
                      <Divider />
                    </LegacyStack.Item>
                    {/* <LegacyStack.Item> */}
                    <LegacyStack.Item>
                      <div className='AppSwitcher-Section--Title'>Giao dịch</div>
                    </LegacyStack.Item>
                    <LegacyStack.Item>
                      <Tooltip content={'SQT Wallet'} dismissOnMouseOut preferredPosition={'below'}>
                        <Link url={'/sqt-wallet'}>
                          <button
                            className={`Polaris-AppSwitcherItem ${
                              location.pathname.includes('/sqt-wallet') ? 'Polaris-AppSwitcherItem--selected' : ''
                            }`}
                          >
                            <div className='MiniIconWrapper'>
                              <div className='MiniIcon'>
                                <Icon source={IconWallet} />
                              </div>
                            </div>
                          </button>
                        </Link>
                      </Tooltip>
                    </LegacyStack.Item>
                    <LegacyStack.Item>
                      <Tooltip content={'Lịch sử giao dịch'} dismissOnMouseOut preferredPosition={'below'}>
                        <Link url={'/lich-su-giao-dich'}>
                          <button
                            className={`Polaris-AppSwitcherItem ${
                              location.pathname.includes('/lich-su-giao-dich')
                                ? 'Polaris-AppSwitcherItem--selected'
                                : ''
                            }`}
                          >
                            <div className='MiniIconWrapper'>
                              <div className='MiniIcon'>
                                <Icon source={IconTrans} />
                              </div>
                            </div>
                          </button>
                        </Link>
                      </Tooltip>
                    </LegacyStack.Item>
                    <LegacyStack.Item>
                      <Divider />
                    </LegacyStack.Item>
                    <LegacyStack.Item>
                      <div className='AppSwitcher-Section--Title'>Tiện ích</div>
                    </LegacyStack.Item>
                    <LegacyStack.Item>
                      <Tooltip content={'Website mua hàng'} dismissOnMouseOut preferredPosition={'below'}>
                        <Link url={'/website-mua-hang'}>
                          <button
                            className={`Polaris-AppSwitcherItem ${
                              location.pathname.includes('/website-mua-hang') ? 'Polaris-AppSwitcherItem--selected' : ''
                            }`}
                          >
                            <div className='MiniIconWrapper'>
                              <div className='MiniIcon'>
                                <Icon source={IconWebsite} />
                              </div>
                            </div>
                          </button>
                        </Link>
                      </Tooltip>
                    </LegacyStack.Item>
                    {/* </LegacyStack.Item> */}
                  </LegacyStack>
                </div>
              ) : null}
              <div className={isDesktop() && !desktopNavExpand ? 'desktop-collapse' : ''}>
                <Frame
                  globalRibbon={ribbonState.ribbon}
                  offset={isDesktop() && !desktopNavExpand ? '88px' : '0px'}
                  logo={isDesktop() ? (desktopNavExpand ? Theme.logo : undefined) : Theme.logo}
                  topBar={topBarMarkup}
                  navigation={isDesktop() ? (desktopNavExpand ? navigationMarkup : undefined) : navigationMarkup}
                  showMobileNavigation={mobileNavigationActive}
                  onNavigationDismiss={toggleMobileNavigationActive}
                >
                  <Suspense fallback={loadingPageMarkup}>
                    <Routes>
                      <Route path={'/home'} element={<Home />} />
                      <Route path={'/tai-khoan'} element={<Account />} />

                      <Route path={'/thong-tin-ca-nhan/:id'} element={<GeneralInformation />} />
                      <Route path={'/shopping'} element={<Shopping />} />
                      <Route path={'/shopping/cart'} element={<Cart />} />
                      <Route path={'/shopping/checkout'} element={<Checkout />} />
                      <Route path={'/shopping/thank-you'} element={<ThankYou />} />
                      <Route path={'/shopping/category/:id'} element={<Category />} />
                      <Route path={'/shopping/deal/:id'} element={<Deal />} />
                      <Route path={'/shopping/product/:id'} element={<Product />} />

                      <Route path={'/don-hang-ecommerce'} element={<Ecommerce />} />
                      <Route path={'/don-hang-ecommerce/thanh-toan'} element={<EcommercePayment />} />
                      <Route path={'/don-hang-ecommerce/tao-moi-single'} element={<EcommerceCreate />} />
                      <Route path={'/don-hang-ecommerce/tao-moi'} element={<EcommerceMultiCreate />} />
                      <Route path={'/don-hang-ecommerce/tao-moi/import'} element={<EcommerceImportCreate />} />
                      <Route path={'/don-hang-ecommerce/thank-you'} element={<EcommerceThankYou />} />
                      <Route path={'/don-hang-ecommerce/detail'} element={<EcommerceDetail2 />} />
                      <Route path={'/don-hang-ecommerce/:id'} element={<EcommerceDetail />} />

                      <Route path={'/don-hang-van-chuyen'} element={<ShippingOrders />} />
                      <Route path={'/don-hang-van-chuyen/:id'} element={<ShippingDetails />} />
                      <Route path={'/don-hang-van-chuyen/tao-moi'} element={<CreateShippingOrders />} />
                      <Route path={'/don-hang-van-chuyen/tao-moi/import'} element={<ImportCreateShippingOrders />} />

                      <Route path={'/danh-sach-tracking'} element={<TrackingList />} />

                      <Route path={'/danh-sach-phieu-xuat'} element={<DeliveryBill />} />
                      <Route path={'/danh-sach-phieu-xuat/:id'} element={<DeliveryBillDetail />} />

                      <Route path={'/sqt-wallet'} element={<SQTWallet />} />
                      <Route path={'/sqt-wallet/nap-tien'} element={<CreateRequest />} />

                      <Route path={'/lich-su-giao-dich'} element={<PaymentHistory />} />
                      <Route path={'/website-mua-hang'} element={<Website />} />

                      <Route path={'/tim-kiem-don-hang/:trackingCode'} element={<TrackingSearch />} />
                      <Route path='/tra-cuu-don-hang/:trackingCode' element={<OrderSearch />} />
                      <Route path='/tra-cuu-don-hang' element={<OrderSearch />} />

                      {/* <Route path='/GG' element={<GeneralInformation />} /> */}

                      <Route path='*' element={<Navigate to='/shopping' replace />} />
                    </Routes>
                    <FooterMarkup />
                  </Suspense>
                  {toastState.open ? (
                    <Toast
                      error={toastState.status == 'error'}
                      content={toastState.message}
                      onDismiss={() => dispatch(toastAction.closeToast())}
                    />
                  ) : null}

                  {modalState.open ? (
                    <>
                      {modalState.type == 'view_image' ? (
                        <Modal
                          title={modalState.title}
                          fullScreen
                          large
                          open={modalState.open}
                          onClose={() => dispatch(modalAction.closeModal())}
                        >
                          <Modal.Section>
                            <LegacyStack wrap={false}>
                              <LegacyStack.Item>
                                <Image height={'450'} alt={modalState.data.src} source={modalState.data.src} />
                              </LegacyStack.Item>
                              <LegacyStack.Item fill>
                                <LegacyStack distribution={'fill'} vertical>
                                  <LegacyStack.Item>
                                    <TextField
                                      label={'Đường dẫn ảnh'}
                                      readonly
                                      selectTextOnFocus
                                      suffix={
                                        <Button
                                          onClick={() => {
                                            showToast('Copied to Clipboard!', 'success');
                                            navigator.clipboard.writeText(modalState.data.src);
                                          }}
                                          plain
                                          fullWidth
                                          icon={PolarisIcons.ClipboardMinor}
                                        />
                                      }
                                      value={modalState.data.src}
                                      autoComplete={'off'}
                                    />
                                  </LegacyStack.Item>
                                  <LegacyStack.Item>
                                    <Button url={modalState.data.src} target={'_blank'}>
                                      Mở trong tab mới
                                    </Button>
                                  </LegacyStack.Item>
                                </LegacyStack>
                              </LegacyStack.Item>
                            </LegacyStack>
                          </Modal.Section>
                        </Modal>
                      ) : null}
                      {modalState.type == 'create_address' ? <CreateAddressModal /> : null}
                      {modalState.type == 'edit_address' ? <EditAddressModal /> : null}

                      {modalState.type == 'order_detail' ? (
                        <Modal
                          title={
                            <LegacyStack alignment={'center'}>
                              <LegacyStack.Item>
                                <Text as={'h2'} variant={'headingLg'}>
                                  {modalState.title}{' '}
                                </Text>
                              </LegacyStack.Item>
                              {ecommerceOrderState.detail ? (
                                <LegacyStack.Item>
                                  <div style={{ display: 'flex', gap: '20px' }}>
                                    <PaymentStatusBadge
                                      size={'small'}
                                      status={ecommerceOrderState.detail.orderInfo.PaymentStatusName}
                                    />
                                    {/* <div style={{ display: 'flex', gap: '4px', alignItems: 'flex-end' }}>
                                      <IconBreadcrumDate />
                                      {ecommerceOrderState.detail?.orderHistories[0]?.TraceTime}
                                    </div> */}
                                    <div style={{ display: 'flex', gap: '4px', alignItems: 'flex-start' }}>
                                      <IconBreadcrumDate />
                                      <div style={{ fontSize: '12px', fontWeight: '400' }}>
                                        {ecommerceOrderState.detail?.orderHistories[0]?.TraceTime
                                          ? (() => {
                                              const traceTime = new Date(
                                                ecommerceOrderState.detail.orderHistories[0].TraceTime,
                                              );
                                              const day = traceTime.getDate();
                                              const month = traceTime.getMonth() + 1;
                                              const year = traceTime.getFullYear();
                                              const hours = traceTime.getHours();
                                              const minutes = traceTime.getMinutes();

                                              return `${day}/${month}/${year} ${hours}:${minutes
                                                .toString()
                                                .padStart(2, '0')}`;
                                            })()
                                          : ''}
                                      </div>
                                    </div>
                                  </div>
                                </LegacyStack.Item>
                              ) : null}
                            </LegacyStack>
                          }
                          fullScreen
                          large
                          open={modalState.open}
                          onClose={() => dispatch(modalAction.closeModal())}
                        >
                          <OrderDetail data={modalState.data} />
                        </Modal>
                      ) : null}
                    </>
                  ) : null}
                </Frame>
              </div>
            </AppProvider>
          ) : (
            <div></div>
          )}
        </>
      )}
    </>
  );
};

export default MainApp;

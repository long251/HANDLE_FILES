TO_SOCKET
---------
.env:
PORT=3001
PM2_INSTANCE=1
PM2_NAME="socket"
ALLOW_CORS="http://localhost:4000,https://cc.shipquocte.com"
=================================================================
index.html:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Socket.IO Example</title>
    <script src="https://cdn.socket.io/4.7.1/socket.io.min.js"></script>
</head>
<body>
<h1>Socket.IO Chat</h1>
<input id="messageInput" placeholder="Type a message..." />
<button id="sendButton">Send</button>
<ul id="messages"></ul>

<script>
    const socket = io(); // Connect to the server

    const messageInput = document.getElementById('messageInput');
    const sendButton = document.getElementById('sendButton');
    const messages = document.getElementById('messages');

    // Listen for messages from the server
    socket.on('message', (data) => {
        const li = document.createElement('li');
        li.textContent = data;
        messages.appendChild(li);
    });

    // Send a message when the button is clicked
    sendButton.addEventListener('click', () => {
        const message = messageInput.value;
        socket.emit('message', message); // Send a message to the server
        messageInput.value = '';
    });
</script>
</body>
</html>
=================================================================
index.js:
require('dotenv').config()
const express = require('express');
const {createServer} = require("node:http");
const {join} = require('node:path');
const {Server} = require('socket.io');

const app = express();
// Serve static files (optional, e.g., for serving an HTML client)
// app.use(express.static('public'));
const allowCors = process.env.ALLOW_CORS.split(",");
const server = createServer(app);
const io = new Server(server, {
    cors: {
        origin: allowCors,
    }
});

const users = [];

app.get("/dispatch-event/all", function (req, res) {
    let query = req.query;
    let itemId = req.item;
    let sockets = [];
    for (let i = 0; i < users.length; i++) {
        let userSockets = users[i]['sockets'];
        for (let j = 0; j < userSockets.length; j++) {
            if (!sockets.includes(userSockets[j])) {
                sockets.push(userSockets[j]);
            }
        }
    }
    console.log(`Dispatch all ${sockets.length}`);
    for (let i = 0; i < sockets.length; i++) {
        let targetSocketId = sockets[i];
        if (io.sockets.sockets.has(targetSocketId)) {
            console.log(targetSocketId);
            io.to(targetSocketId).emit("new_message", {
                from: query.from,
                data: {
                    itemId: itemId,
                },
                time: Date.now(),
            })
        }

    }
    res.json({
        status: true,
    });
})

app.get("/dispatch-event/:user_id", function (req, res) {
    let params = req.params;
    let query = req.query;
    let itemId = req.item;
    let sockets = [];
    for (let i = 0; i < users.length; i++) {
        if (users[i]['user_id'] == params['user_id']) {
            sockets = users[i]['sockets'];
            break;
        }
    }
    for (let i = 0; i < sockets.length; i++) {
        let targetSocketId = sockets[i];
        if (io.sockets.sockets.has(targetSocketId)) {
            console.log(targetSocketId);
            io.to(targetSocketId).emit("new_message", {
                from: query.from, data: {
                    itemId: itemId,
                }
            })
        }

    }
    res.json({
        status: true,
    });
});

io.on("connection", (socket) => {
    // ...
    console.log(socket.id);
    socket.on('user_id', (data) => {
        console.log('Message received:', data);
        let exist = false;
        for (let i = 0; i < users.length; i++) {
            if (users[i]['user_id'] == data['user_id']) {
                let sockets = users[i]['sockets'];
                if (!sockets.includes(socket.id)) {
                    sockets.push(socket.id);
                }
                console.log(sockets);
                users[i]['sockets'] = sockets;
                exist = true;
                break;
            }
        }
        if (!exist) {
            users.push({
                user_id: data['user_id'], sockets: [socket.id]
            })
        }
        console.log(users);
    });

    socket.on("disconnect", async () => {
        // Find the user who owns the socket
        const user = users.find(u => u.sockets.includes(socket.id));

        if (user) {
            // Remove the socket ID from the user's sockets array
            const index = user.sockets.indexOf(socket.id);
            if (index !== -1) {
                user.sockets.splice(index, 1); // Remove the socket ID
                console.log(`Socket ${socket.id} removed from user ${user.user_id}`);
            }
        }
    });
});

const port = process.env.PORT;

server.listen(port, () => {
    console.log(`Init server socket port ${port}`);
});
